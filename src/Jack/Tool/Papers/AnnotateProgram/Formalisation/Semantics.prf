(ReferenceFunctions)
(SemanticsTypes)
(SemanticsJMLTypes)
(Semantics
 (update_stack_TCC1 0
  (update_stack_TCC1-1 nil 3390908871 3405060246
   ("" (skosimp*)
    (("" (typepred "lvds!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (assert) (("3" (inst 1 "l!2") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (JType type-decl nil JType_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-decl nil Val_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (defined? const-decl "boolean" ValProp nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (nonempty? const-decl "bool" sets nil))
   219 180 t shostak))
 (derive_TCC1 0
  (derive_TCC1-1 nil 3395749931 3405060246 ("" (tcc)) proved-incomplete
   nil 207 210 nil nil))
 (derive_TCC2 0
  (derive_TCC2-1 nil 3395749931 3405060246 ("" (tcc)) proved-incomplete
   nil 234 200 nil nil))
 (derive_TCC3 0
  (derive_TCC3-1 nil 3395749931 3405060246
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   283 260 t nil))
 (derive_TCC4 0
  (derive_TCC4-1 nil 3395749931 3405060247 ("" (tcc)) proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   470 420 nil nil))
 (derive_TCC5 0
  (derive_TCC5-2 nil 3403269980 3405060247
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   283 250 nil nil)
  (derive_TCC5-1 nil 3395749931 3403269717
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   157 156 t nil))
 (derive_TCC6 0
  (derive_TCC6-1 nil 3395749931 3405060248 ("" (tcc)) proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   468 410 nil nil))
 (derive_TCC7 0
  (derive_TCC7-1 nil 3395749931 3405060248 ("" (tcc)) proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil))
   380 350 nil nil))
 (derive_TCC8 0
  (derive_TCC8-2 nil 3403269989 3405060248
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   222 200 t nil)
  (derive_TCC8-1 nil 3395749931 3403269718
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1) (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   155 149 t nil))
 (derive_TCC9 0
  (derive_TCC9-1 nil 3395749931 3405060249 ("" (tcc)) proved-incomplete
   nil 241 220 nil nil))
 (derive_TCC10 0
  (derive_TCC10-2 nil 3403269995 3405060249
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   282 260 nil nil)
  (derive_TCC10-1 nil 3395749931 3403269720
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   194 195 t nil))
 (derive_TCC11 0
  (derive_TCC11-1 nil 3395749931 3405060249 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   440 420 nil nil))
 (derive_TCC12 0
  (derive_TCC12-2 nil 3403269999 3405060250
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   311 270 nil nil)
  (derive_TCC12-1 nil 3395749931 3403269722
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   160 159 t nil))
 (derive_TCC13 0
  (derive_TCC13-1 nil 3395749931 3405060250 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   457 420 nil nil))
 (derive_TCC14 0
  (derive_TCC14-2 nil 3403270003 3405060250
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   280 250 nil nil)
  (derive_TCC14-1 nil 3395749931 3403269723
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   159 159 t nil))
 (derive_TCC15 0
  (derive_TCC15-1 nil 3395749931 3405060251 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   440 400 nil nil))
 (derive_TCC16 0
  (derive_TCC16-2 nil 3403270008 3405060251
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   284 250 nil nil)
  (derive_TCC16-1 nil 3395749931 3403269725
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   178 177 t nil))
 (derive_TCC17 0
  (derive_TCC17-1 nil 3395749931 3405060252 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   472 430 nil nil))
 (derive_TCC18 0
  (derive_TCC18-1 nil 3395749931 3405060252
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   132 100 t nil))
 (derive_TCC19 0
  (derive_TCC19-2 nil 3403270013 3405060252
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   235 210 t nil)
  (derive_TCC19-1 nil 3395749931 3403269726
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (auto-rewrite "union" "member" "add")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   112 113 t nil))
 (derive_TCC20 0
  (derive_TCC20-1 nil 3395749931 3405060252 ("" (tcc))
   proved-incomplete nil 216 210 nil nil))
 (derive_TCC21 0
  (derive_TCC21-1 nil 3395749931 3405060253 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil))
   375 330 nil nil))
 (derive_TCC22 0
  (derive_TCC22-3 nil 3403270321 3405060253
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!2")
              (("2" (assert)
                (("2" (expand "subterm" 2)
                  (("2" (replace -7) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   239 220 t nil)
  (derive_TCC22-2 nil 3403270025 3403270161
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 42 42 nil nil)
  (derive_TCC22-1 nil 3395749931 3403269728
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1) (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   151 150 t nil))
 (derive_TCC23 0
  (derive_TCC23-1 nil 3395749931 3405060253 ("" (tcc))
   proved-incomplete nil 241 210 nil nil))
 (derive_TCC24 0
  (derive_TCC24-2 nil 3403270031 3405060253
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   288 260 nil nil)
  (derive_TCC24-1 nil 3395749931 3403269729
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   160 160 t nil))
 (derive_TCC25 0
  (derive_TCC25-1 nil 3395749931 3405060254 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   490 430 nil nil))
 (derive_TCC26 0
  (derive_TCC26-2 nil 3403270034 3405060254
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   291 270 nil nil)
  (derive_TCC26-1 nil 3395749931 3403269731
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   198 197 t nil))
 (derive_TCC27 0
  (derive_TCC27-3 nil 3403270324 3405060254
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 3)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (auto-rewrite "union" "member" "add")
                    (("1" (assert)
                      (("1" (expand "var_names" 2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -4)
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   316 280 t nil)
  (derive_TCC27-2 nil 3403270037 3403270164
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 157 158 nil nil)
  (derive_TCC27-1 nil 3395749931 3403269733
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   161 161 t nil))
 (derive_TCC28 0
  (derive_TCC28-1 nil 3395749931 3405060255 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   503 450 nil nil))
 (derive_TCC29 0
  (derive_TCC29-2 nil 3403270040 3405060255
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   358 300 nil nil)
  (derive_TCC29-1 nil 3395749931 3403269734
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   130 129 t nil))
 (derive_TCC30 0
  (derive_TCC30-1 nil 3395749931 3405060256 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   875 770 nil nil))
 (derive_TCC31 0
  (derive_TCC31-2 nil 3403270056 3405060257
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   360 310 nil nil)
  (derive_TCC31-1 nil 3395749931 3403269735
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   128 128 t nil))
 (derive_TCC32 0
  (derive_TCC32-1 nil 3395749931 3405060257 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   880 800 nil nil))
 (derive_TCC33 0
  (derive_TCC33-1 nil 3395749931 3405060259 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1366 1240 nil nil))
 (derive_TCC34 0
  (derive_TCC34-1 nil 3395749931 3405060259
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   191 170 t nil))
 (derive_TCC35 0
  (derive_TCC35-1 nil 3395749931 3405060261 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (update_stack const-decl "FullState" Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1541 1380 nil nil))
 (derive_TCC36 0
  (derive_TCC36-1 nil 3395749931 3405060263
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   2003 170 t nil))
 (derive_TCC37 0
  (derive_TCC37-1 nil 3396354176 3405060264 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (update_stack const-decl "FullState" Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1564 1430 nil nil))
 (derive_TCC38 0
  (derive_TCC38-1 nil 3396354176 3405060266 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (update_stack const-decl "FullState" Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1646 1460 nil nil))
 (derive_TCC39 0
  (derive_TCC39-1 nil 3401446930 3405060267 ("" (subtype-tcc) nil nil)
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (lookup_local const-decl "Val" State nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1068 960 nil nil))
 (derive_TCC40 0
  (derive_TCC40-1 nil 3401446930 3405060267 ("" (subtype-tcc) nil nil)
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil))
   299 270 nil nil))
 (derive_TCC41 0
  (derive_TCC41-3 nil 3403270328 3405060267
   (";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
    (skosimp*)
    ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
      (typepred "b!1")
      ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
        (expand "wf_Body")
        ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (propax) nil)))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   222 190 nil nil)
  (derive_TCC41-2 nil 3403270064 3403270166
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 46 44 nil nil)
  (derive_TCC41-1 nil 3401446930 3403269743 ("" (subtype-tcc) nil nil)
   unfinished
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   753 750 nil nil))
 (derive_TCC42 0
  (derive_TCC42-1 nil 3401446930 3405060268
   ("" (termination-tcc) nil nil) proved-incomplete nil 238 220 nil
   nil))
 (derive_TCC43 0
  (derive_TCC43-1 nil 3401446930 3405060268 ("" (subtype-tcc) nil nil)
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil))
   296 270 nil nil))
 (derive_TCC44 0
  (derive_TCC44-3 nil 3403270332 3405060268
   (";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
    (skosimp*)
    ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
      (typepred "b!1")
      ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
        (expand "wf_Body")
        ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (propax) nil)))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   222 200 nil nil)
  (derive_TCC44-2 nil 3403270068 3403270167
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 63 60 nil nil)
  (derive_TCC44-1 nil 3401446930 3403269749 ("" (subtype-tcc) nil nil)
   unfinished
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   557 556 nil nil))
 (derive_TCC45 0
  (derive_TCC45-1 nil 3401446930 3405060268
   ("" (termination-tcc) nil nil) proved-incomplete nil 216 210 nil
   nil))
 (derive_TCC46 0
  (derive_TCC46-3 nil 3403270335 3405060269
   (""
    (case "FORALL (l: list[[BoolExpr[Name], Stmt[Name]]], p: FullProgram, b: (wf_Body[Name](program(p))), sigma2 : FullState, v : Val, n : nat):
                v = return_of_stmt(sigma2) AND n > 0 AND b = CaseJML(l)
                 IMPLIES wf_Branches[Name](program(p))(l)")
    (("1" (skosimp*)
      (("1" (apply (repeat (inst? -1))) (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "l")
        (("1" (grind) nil nil)
         ("2" (skosimp*)
          (("2" (expand "wf_Branches")
            (("2" (expand "every" 1)
              (("2" (inst -1 "p!1" _ "sigma2!1" "v!1" "n!1")
                (("2" (assert)
                  (("2" (inst -1 "CaseJML(cons2_var!1)")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (typepred "b!1")
                          (("1" (expand "wf_Body")
                            (("1" (flatten)
                              (("1"
                                (replace -5 :hide? t)
                                (("1"
                                  (expand "var_names" -1)
                                  (("1"
                                    (expand "subterm" -2)
                                    (("1"
                                      (auto-rewrite "union" "member")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst? -4)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "some_is_exists")
                                                  (("2"
                                                    (inst? 2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3"
                                              (inst?)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skosimp*)
                                            (("4"
                                              (inst? -4)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (rewrite
                                                   "some_is_exists")
                                                  (("4"
                                                    (inst? 2)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "b!1")
                      (("2" (replace -4)
                        (("2" (hide 2)
                          (("2" (expand "wf_Body")
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" 2)
                                      (("1"
                                        (auto-rewrite
                                         "union"
                                         "member"
                                         "emptyset")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst? -4)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "subterm" (-2 2))
                                      (("2"
                                        (rewrite "some_is_exists")
                                        (("2"
                                          (rewrite "some_is_exists")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst? 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil) nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil) nil
    (list_induction formula-decl nil list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (list type-decl nil list_adt nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (FullState formal-type-decl nil Semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (return_of_stmt const-decl "Val" Semantics nil)
    (> const-decl "bool" reals nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil))
   860 750 t nil)
  (derive_TCC46-2 nil 3403270070 3403270169
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 160 151 nil nil)
  (derive_TCC46-1 nil 3401446930 3403269751
   (""
    (case "FORALL(p : FullProgram, b: (wf_Body[Name](program(p))), v : Val, sigma2 : FullState, n : nat, l: list[[BoolExpr[Name], Stmt[Name]]]):
                v = return_of_stmt(sigma2) AND n > 0 AND b = CaseJML(l)
                 IMPLIES wf_Branches[Name](program(p))(l)")
    (("1" (skosimp*)
      (("1" (apply (repeat (inst? -1))) (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "l")
        (("1" (grind) nil nil)
         ("2" (skosimp*)
          (("2" (inst -1 "p!1" _ "v!1" "sigma2!1" "n!1")
            (("2" (assert)
              (("2" (typepred "b!1")
                (("2" (inst -2 "CaseJML(cons2_var!1)")
                  (("1" (expand "wf_Branches")
                    (("1" (expand "every" 1)
                      (("1" (assert)
                        (("1" (hide -2)
                          (("1" (expand "wf_Body")
                            (("1" (replace -4)
                              (("1"
                                (split 1)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "var_names" 2)
                                        (("1"
                                          (auto-rewrite
                                           "union"
                                           "member")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "var_names" 2)
                                        (("2"
                                          (auto-rewrite
                                           "union"
                                           "member")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "wf_Body_CaseJML" :dir rl) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   247 247 t nil))
 (derive_TCC47 0
  (derive_TCC47-3 nil 3403270337 3405060270
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (assert)
                      (("1" (auto-rewrite "union" "member")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   310 290 t nil)
  (derive_TCC47-2 nil 3403270074 3403270170
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 92 91 nil nil)
  (derive_TCC47-1 nil 3401446930 3403269753
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   181 181 t nil))
 (derive_TCC48 0
  (derive_TCC48-1 nil 3401446930 3405060270
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   260 240 t nil))
 (derive_TCC49 0
  (derive_TCC49-3 nil 3403270340 3405060270
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   295 280 t nil)
  (derive_TCC49-2 nil 3403270078 3403270171
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 92 93 nil nil)
  (derive_TCC49-1 nil 3401446930 3403269755
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   181 180 t nil))
 (derive_TCC50 0
  (derive_TCC50-3 nil 3403270343 3405060271
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 3)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (auto-rewrite "union" "member")
                  (("1" (assert)
                    (("1" (replace -6)
                      (("1" (expand "var_names" 2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -4)
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   317 290 t nil)
  (derive_TCC50-2 nil 3403270081 3403270172
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 165 161 nil nil)
  (derive_TCC50-1 nil 3401446930 3403269756
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   164 164 t nil))
 (derive_TCC51 0
  (derive_TCC51-1 nil 3401446930 3405060271
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   264 250 t nil))
 (derive_TCC52 0
  (derive_TCC52-3 nil 3403270345 3405060271
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   284 270 t nil)
  (derive_TCC52-2 nil 3403270085 3403270173
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 90 89 nil nil)
  (derive_TCC52-1 nil 3401446930 3403269758
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   180 179 t nil))
 (derive_TCC53 0
  (derive_TCC53-1 nil 3401446930 3405060271
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   259 240 t nil))
 (derive_TCC54 0
  (derive_TCC54-3 nil 3403270347 3405060272
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   286 260 t nil)
  (derive_TCC54-2 nil 3403270087 3403270174
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 72 72 nil nil)
  (derive_TCC54-1 nil 3401446930 3403269760
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   180 180 t nil))
 (derive_TCC55 0
  (derive_TCC55-1 nil 3401446930 3405060272 ("" (subtype-tcc) nil nil)
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   395 350 nil nil))
 (derive_TCC56 0
  (derive_TCC56-3 nil 3403270350 3405060272
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Expr")
        (("" (expand "wf_Body")
          (("" (split 2)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (replace -7)
                    (("1" (expand "var_names" 2)
                      (("1" (auto-rewrite "union" "member" "add")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst? -4)
                (("2" (assert)
                  (("2" (replace -8)
                    (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   238 210 t nil)
  (derive_TCC56-2 nil 3403270090 3403270175
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 93 94 nil nil)
  (derive_TCC56-1 nil 3401446930 3403269761
   ("" (skosimp*)
    (("" (expand "wf_Expr")
      (("" (typepred "b!1")
        (("" (expand "wf_Body")
          (("" (skosimp*)
            (("" (inst?)
              (("" (assert)
                (("" (replace -5)
                  (("" (expand "var_names" 1)
                    (("" (auto-rewrite "union" "member" "add")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   96 96 t nil))
 (derive_TCC57 0
  (derive_TCC57-1 nil 3401446930 3405060273
   ("" (termination-tcc) nil nil) proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (return_of_stmt const-decl "Val" Semantics nil))
   388 360 nil nil))
 (derive_TCC58 0
  (derive_TCC58-3 nil 3403270352 3405060273
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "var_names" 2)
                  (("1" (replace -7) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (expand "subterm" 2)
                  (("2" (replace -8) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   313 290 t nil)
  (derive_TCC58-2 nil 3403270094 3403270176
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 106 105 nil nil)
  (derive_TCC58-1 nil 3401446930 3403269762
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -5)
                (("" (expand "var_names" 1) (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   154 153 t nil))
 (derive_TCC59 0
  (derive_TCC59-1 nil 3401446930 3405060273
   ("" (termination-tcc) nil nil) proved-incomplete
   ((return_of_stmt const-decl "Val" Semantics nil)) 245 210 nil nil))
 (derive_TCC60 0
  (derive_TCC60-3 nil 3403270355 3405060274
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   303 270 t nil)
  (derive_TCC60-2 nil 3403270097 3403270177
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 75 75 nil nil)
  (derive_TCC60-1 nil 3401446930 3403269765
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   273 272 t nil))
 (derive_TCC61 0
  (derive_TCC61-1 nil 3401446930 3405060274
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (expand "var_names")
                (("" (expand "emptyset") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   272 250 t nil))
 (derive_TCC62 0
  (derive_TCC62-3 nil 3403270358 3405060274
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterm adt-def-decl "boolean" Body_adt nil))
   306 280 t nil)
  (derive_TCC62-2 nil 3403270099 3403270178
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 114 112 nil nil)
  (derive_TCC62-1 nil 3401446930 3403269767
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   165 164 t nil))
 (derive_TCC63 0
  (derive_TCC63-3 nil 3403270362 3405060274
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (split 3)
                (("1" (skosimp*)
                  (("1" (expand* "var_names" "member" "emptyset") nil
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "subterm") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   277 260 t nil)
  (derive_TCC63-2 nil 3403270105 3403270179
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 166 166 nil nil)
  (derive_TCC63-1 nil 3401446930 3403269767
   ("" (skosimp*)
    (("" (expand "wf_Body")
      (("" (skosimp*)
        (("" (expand "var_names")
          (("" (expand "emptyset") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished ((emptyset const-decl "set" sets nil)) 34 34 t nil))
 (derive_TCC64 0
  (derive_TCC64-1 nil 3401446930 3405060275
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (lemma "wf_Body_preserved_by_proper_subterm")
        (("" (inst -1 "program(p!1)" "b!1" "c3!1")
          (("" (assert)
            (("" (replace -5)
              (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil))
   174 160 t nil))
 (derive_TCC65 0
  (derive_TCC65-3 nil 3403270365 3405060275
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   277 260 t nil)
  (derive_TCC65-2 nil 3403270107 3403270180
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 94 93 nil nil)
  (derive_TCC65-1 nil 3401446930 3403269769
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add" "emptyset")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   183 183 t nil))
 (derive_TCC66 0
  (derive_TCC66-1 nil 3401446930 3405060275
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -5)
                (("" (expand "var_names" 1)
                  (("" (expand "var_names" -6)
                    (("" (auto-rewrite "union" "member")
                      (("" (assert)
                        (("" (flatten)
                          (("" (split -6)
                            (("1" (propax) nil nil)
                             ("2" (expand "var_names")
                              (("2"
                                (expand "emptyset")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   217 200 t nil))
 (derive_TCC67 0
  (derive_TCC67-1 nil 3401446930 3405060276
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (lemma "wf_Body_preserved_by_proper_subterm")
        (("" (inst -1 "program(p!1)" "b!1" _)
          (("" (inst-cp -1 "e!1")
            (("" (inst -1 "c!1")
              (("" (assert)
                (("" (replace -8)
                  (("" (expand "<<")
                    (("" (assert)
                      (("" (expand "wf_Body")
                        (("" (flatten)
                          (("" (split 2)
                            (("1" (skosimp*)
                              (("1"
                                (apply (repeat (inst?)))
                                (("1"
                                  (rewrite "var_names" -1)
                                  (("1"
                                    (auto-rewrite "union" "member")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (rewrite "var_names" -1)
                                          (("3"
                                            (expand "emptyset")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (apply (repeat (inst?)))
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "subterm" -2)
                                    (("2"
                                      (rewrite "subterm" -2)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil))
   528 460 t nil))
 (derive_TCC68 0
  (derive_TCC68-3 nil 3403270368 3405060276
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   196 200 t nil)
  (derive_TCC68-2 nil 3403270111 3403270181
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 48 48 nil nil)
  (derive_TCC68-1 nil 3401600202 3403269771
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -5)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert)
                      (("" (expand "var_names" -6)
                        (("" (assert)
                          (("" (split -6)
                            (("1" (assert) nil nil)
                             ("2" (expand "var_names")
                              (("2"
                                (expand "emptyset")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil))
   163 160 t nil))
 (derive_TCC69 0
  (derive_TCC69-1 nil 3401600202 3405852033
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (lemma "wf_Body_preserved_by_proper_subterm")
        (("" (inst -1 "program(p!1)" "b!1" "e!1")
          (("" (assert)
            (("" (split -1)
              (("1" (expand "wf_Body")
                (("1" (auto-rewrite "union" "member" "add" "emptyset")
                  (("1" (split 2)
                    (("1" (skosimp*)
                      (("1" (rewrite "var_names" -1)
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (inst? -2) (("1" (assert) nil nil))
                              nil)
                             ("2" (inst? -4) (("2" (assert) nil nil))
                              nil)
                             ("3" (rewrite "var_names" -1)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (rewrite "subterm" -2)
                        (("2" (split -2)
                          (("1" (assert) nil nil)
                           ("2" (inst? -4) (("2" (assert) nil nil))
                            nil)
                           ("3" (inst? -6) (("3" (assert) nil nil))
                            nil)
                           ("4" (rewrite "subterm" -1)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "<<")
                (("2" (replace -6) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((program formal-const-decl "[FullProgram -> Program]" Semantics
     nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil))
   312710 2000 t nil))
 (derive_TCC70 0
  (derive_TCC70-1 nil 3405850792 3405850808
   ("" (termination-tcc) nil nil) proved
   ((return_of_stmt const-decl "Val" Semantics nil)) 520 440 nil nil))
 (derive_TCC71 0
  (derive_TCC71-1 nil 3405850792 3405852136
   ("" (skosimp*)
    (("" (expand "wf_BoolExpr")
      (("" (typepred "b!1")
        (("" (lemma "wf_Body_preserved_by_proper_subterm")
          (("" (inst -1 "program(p!1)" "b!1" "e!1")
            (("" (assert)
              (("" (expand "<<")
                (("" (replace -6) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]" Semantics
     nil))
   97817 750 t nil))
 (run_FullProgram_TCC1 0
  (run_FullProgram_TCC1-1 nil 3401446930 3405060276
   ("" (skosimp*)
    (("" (replace -1 :hide? t)
      (("" (expand "wf_Body")
        (("" (split 1)
          (("1" (skosimp*)
            (("1" (expand "ext_declared_var_names")
              (("1"
                (auto-rewrite "var_names" "union" "member" "singleton"
                              "emptyset")
                (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (auto-rewrite "subterm") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   283 260 t nil))
 (run_FullProgram_TCC2 0
  (run_FullProgram_TCC2-1 nil 3405850792 3405850811
   ("" (subtype-tcc) nil nil) proved nil 60 60 nil nil))
 (run_FullProgram_TCC3 0
  (run_FullProgram_TCC3-1 nil 3405850792 3405850811
   ("" (subtype-tcc) nil nil) proved nil 45 50 nil nil))
 (run_FullProgram_TCC4 0
  (run_FullProgram_TCC4-1 nil 3405850792 3405850811
   ("" (subtype-tcc) nil nil) proved nil 60 60 nil nil))
 (run_FullProgram_TCC5 0
  (run_FullProgram_TCC5-1 nil 3405850792 3405850811
   ("" (subtype-tcc) nil nil) proved nil 63 60 nil nil))
 (run_FullProgram_TCC6 0
  (run_FullProgram_TCC6-1 nil 3405850792 3405852250
   ("" (skosimp*)
    (("" (replace -1 :hide? t)
      (("" (expand "wf_Body")
        (("" (split 1)
          (("1" (skosimp*)
            (("1"
              (auto-rewrite "union" "member" "emptyset" "add"
                            "var_names" "singleton")
              (("1" (assert)
                (("1" (replace -1 :hide? t)
                  (("1" (expand "ext_declared_var_names")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2"
              (auto-rewrite "union" "member" "emptyset" "add" "subterm"
                            "singleton")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   106899 630 t nil)))
(SemanticsProofs
 (derive_determ_step 0
  (derive_determ_step-2 nil 3403534328 3405852321
   (""
    (lemma
     "wf_induction[[nat, nat], (LAMBDA(i, j : [nat, nat]) : proj_1(i) < proj_1(j) AND proj_2(i) < proj_2(j))]")
    (("1"
      (inst -1
       "LAMBDA(n : [nat, nat]) :  FORALL (p: FullProgram)(b: (wf_Body(program(p))))
                 (v1, v2: Val, sigma, sigma1, sigma2: FullState):
            derive(p)(b, sigma, v1, sigma1)(proj_1(n)) IMPLIES
             derive(p)(b, sigma, v2, sigma2)(proj_2(n)) IMPLIES
              v1 = v2 AND sigma1 = sigma2 AND proj_1(n) = proj_2(n)")
      (("1" (split -1)
        (("1" (skosimp*)
          (("1" (inst -1 "(n1!1, n2!1)")
            (("1" (apply (repeat (inst?))) (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "derive" -2)
              (("2" (rewrite "derive" -3)
                (("2"
                  (apply (branch (split -2)
                          ((then (flatten) (assert) (flatten)
                            (assert)))))
                  (("2" (lift-if)
                    (("2"
                      (apply (branch (split -1)
                              ((then
                                (flatten)
                                (assert)
                                (flatten)
                                (assert)))))
                      (("2"
                        (apply (branch
                                (split -1)
                                ((then
                                  (flatten)
                                  (assert)
                                  (flatten)
                                  (assert)))))
                        (("1"
                          (apply (then
                                  (skosimp*)
                                  (copy -6)
                                  (inst -7 "(m1!1, m1!2)")
                                  (inst -1 "(m2!1, m2!2)")
                                  (assert)
                                  (apply
                                   (repeat (inst? -7 :where (-4 -9))))
                                  (assert)
                                  (flatten)
                                  (replace -7)
                                  (replace -8)
                                  (replace -9)
                                  (apply
                                   (repeat (inst? -1 :where (-5 -12))))
                                  (assert)
                                  (flatten)
                                  (replace -1)
                                  (replace -2)
                                  (replace -3)
                                  (assert)))
                          (("1"
                            (expand* "check_for_exception_final"
                             "check_for_exception")
                            (("1"
                              (apply (branch
                                      (split -8)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              nil nil))
                            nil))
                          nil)
                         ("2"
                          (apply (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("1"
                                  (apply
                                   (then
                                    (skosimp*)
                                    (inst
                                     -5
                                     "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                    (assert)
                                    (apply
                                     (repeat
                                      (inst? -5 :where (-3 -7))))
                                    (assert)
                                    (flatten)
                                    (replace -5)
                                    (replace -6)
                                    (replace -7)
                                    (assert)))
                                  (("1"
                                    (expand*
                                     "check_for_exception_final"
                                     "check_for_exception")
                                    (("1"
                                      (apply
                                       (branch
                                        (split -4)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                                  (("1"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (inst-cp -6 "(m1!1, m1!2)")
                                      (assert)
                                      (apply
                                       (repeat
                                        (inst? -7 :where (-3 -9))))
                                      (assert)
                                      (flatten)
                                      (assert)
                                      (replace -9)
                                      (replace -8)
                                      (replace -7)
                                      (assert)))
                                    (("1"
                                      (expand*
                                       "check_for_exception_final"
                                       "check_for_exception")
                                      (("1"
                                        (apply
                                         (branch
                                          (split -4)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (inst -9 "(m2!1, m2!2)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -9
                                                   :where
                                                   (-3 -15))))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (replace -10)
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -4)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -14)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("1"
                                      (apply
                                       (then
                                        (skosimp*)
                                        (copy -6)
                                        (inst -7 "(m1!1, m1!2)")
                                        (inst -1 "(m2!1, m2!2)")
                                        (assert)
                                        (apply
                                         (repeat
                                          (inst? -7 :where (-4 -9))))
                                        (assert)
                                        (flatten)
                                        (replace -7)
                                        (replace -8)
                                        (replace -9)
                                        (apply
                                         (repeat
                                          (inst? -1 :where (-5 -12))))
                                        (assert)
                                        (flatten)
                                        (replace -1)
                                        (replace -2)
                                        (replace -3)
                                        (assert)))
                                      (("1"
                                        (expand*
                                         "check_for_exception_final"
                                         "check_for_exception")
                                        (("1"
                                          (apply
                                           (branch
                                            (split -8)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply
                                               (then
                                                (skosimp*)
                                                (inst
                                                 -5
                                                 "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                (assert)
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -5
                                                   :where
                                                   (-3 -7))))
                                                (assert)
                                                (flatten)
                                                (replace -5)
                                                (replace -6)
                                                (replace -7)
                                                (assert)))
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -4)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (apply
                                                 (then
                                                  (inst
                                                   -4
                                                   "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                  (assert)
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -4
                                                     :where
                                                     (-3 -6))))
                                                  (assert)
                                                  (flatten)
                                                  (replace -4)
                                                  (replace -5)
                                                  (replace -6)
                                                  (assert)))
                                                nil
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (apply
                                                   (then
                                                    (skosimp*)
                                                    (copy -6)
                                                    (inst
                                                     -7
                                                     "(m1!1, m1!2)")
                                                    (inst
                                                     -1
                                                     "(m2!1, m2!2)")
                                                    (assert)
                                                    (apply
                                                     (repeat
                                                      (inst?
                                                       -7
                                                       :where
                                                       (-4 -9))))
                                                    (assert)
                                                    (flatten)
                                                    (replace -7)
                                                    (replace -8)
                                                    (replace -9)))
                                                  (("1"
                                                    (expand
                                                     "check_for_exception")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -5)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -2)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (apply
                                                             (then
                                                              (repeat
                                                               (inst?
                                                                -4
                                                                :where
                                                                (-2
                                                                 -14)))
                                                              (assert)
                                                              (flatten)
                                                              (assert)))
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (repeat
                                                               (inst?
                                                                -3
                                                                :where
                                                                (-1
                                                                 -13)))
                                                              (assert)
                                                              (flatten)
                                                              (assert)))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (copy -15)
                                                      (("1"
                                                        (copy -16)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(m1!1, m1!2)")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "(m2!1, m2!2)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (repeat
                                                                   (inst?
                                                                    -1
                                                                    :where
                                                                    (-5
                                                                     -19)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)
                                                                  (replace
                                                                   -1)
                                                                  (replace
                                                                   -2)))
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (repeat
                                                                     (inst?
                                                                      -4
                                                                      :where
                                                                      (-8
                                                                       -22)))
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)
                                                                    (replace
                                                                     -4)
                                                                    (replace
                                                                     -5)))
                                                                  (("1"
                                                                    (case-replace
                                                                     "tau3!1 = tau3!2"
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -12)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -27)
                                                                          (("1"
                                                                            (lemma
                                                                             "on_method_entry_deterministic")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p!1"
                                                                               "md!1"
                                                                               "a!2"
                                                                               "tau3!2"
                                                                               "tau4!1"
                                                                               "tau4!2"
                                                                               "m3!1"
                                                                               "m3!2"
                                                                               _
                                                                               _)
                                                                              (("1"
                                                                                (apply
                                                                                 (then
                                                                                  (repeat
                                                                                   (inst?
                                                                                    -1))
                                                                                  (assert)))
                                                                                (("1"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "tau5!1 = tau5!2")
                                                                                        (("1"
                                                                                          (copy
                                                                                           -25)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(m4!1, m4!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (repeat
                                                                                                   (inst?
                                                                                                    -1
                                                                                                    :where
                                                                                                    (-21
                                                                                                     -35)))
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (replace
                                                                                                   -2)))
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "tau7!1 = tau7!2 AND m5!1 = m5!2 AND w!1 = w!2")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (branch
                                                                                                                (split
                                                                                                                 -41)
                                                                                                                ((then
                                                                                                                  (flatten)
                                                                                                                  (assert)
                                                                                                                  (flatten)
                                                                                                                  (assert)))))
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "on_method_exit_normal_deterministic")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "p!1"
                                                                                                                   "md!1"
                                                                                                                   "a!2"
                                                                                                                   "tau7!2"
                                                                                                                   "tau8!1"
                                                                                                                   "tau8!2"
                                                                                                                   "m6!1"
                                                                                                                   "m6!2"
                                                                                                                   _
                                                                                                                   _)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (then
                                                                                                                      (repeat
                                                                                                                       (inst?
                                                                                                                        -1))
                                                                                                                      (assert)))
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           -45)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -34
                                                                                                                           "(m1!3, m2!3)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (repeat
                                                                                                                                 (inst?
                                                                                                                                  -34
                                                                                                                                  :where
                                                                                                                                  (-1
                                                                                                                                   -2)))
                                                                                                                                (assert)
                                                                                                                                (flatten)
                                                                                                                                (assert)
                                                                                                                                (flatten)))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "on_method_exit_exceptional_deterministic")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "p!1"
                                                                                                                   "md!1"
                                                                                                                   "a!2"
                                                                                                                   "tau7!2"
                                                                                                                   "tau8!1"
                                                                                                                   "tau8!2"
                                                                                                                   "m6!1"
                                                                                                                   "m6!2"
                                                                                                                   _
                                                                                                                   _)
                                                                                                                  (("2"
                                                                                                                    (apply
                                                                                                                     (then
                                                                                                                      (repeat
                                                                                                                       (inst?
                                                                                                                        -1))
                                                                                                                      (assert)))
                                                                                                                    (("2"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           -44)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -33
                                                                                                                           "(m1!3, m2!3)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (repeat
                                                                                                                                 (inst?
                                                                                                                                  -33
                                                                                                                                  :where
                                                                                                                                  (-1
                                                                                                                                   -2)))
                                                                                                                                (assert)
                                                                                                                                (flatten)
                                                                                                                                (assert)
                                                                                                                                (flatten)))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (apply
                                                                                                     (branch
                                                                                                      (split
                                                                                                       -37)
                                                                                                      ((then
                                                                                                        (flatten)
                                                                                                        (assert)
                                                                                                        (flatten)
                                                                                                        (assert)))))
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -28
                                                                                                       "(m5!1, m5!2)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (repeat
                                                                                                             (inst?
                                                                                                              -28
                                                                                                              :where
                                                                                                              (-1
                                                                                                               -24)))
                                                                                                            (assert)
                                                                                                            (flatten)
                                                                                                            (assert)
                                                                                                            (flatten)))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "update_stack")
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -32)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -24
                                                                                       "(m1!3, m2!3)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (repeat
                                                                                             (inst?
                                                                                              -24
                                                                                              :where
                                                                                              (-1
                                                                                               -2)))
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -11)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -25)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst
                                                         -4
                                                         "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -4
                                                           :where
                                                           (-3 -6))))
                                                        (assert)
                                                        (flatten)
                                                        (replace -4)
                                                        (replace -5)
                                                        (replace -6)
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (then
                                                          (inst
                                                           -4
                                                           "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                          (assert)
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -4
                                                             :where
                                                             (-3 -6))))
                                                          (assert)
                                                          (flatten)
                                                          (replace -4)
                                                          (replace -5)
                                                          (replace -6)
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lemma
                                                           "execute_CaseJML_deterministic")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p!1"
                                                             "branches(b!1)"
                                                             "sigma!1"
                                                             "sigma1!1"
                                                             "sigma2!1"
                                                             "PROJ_1(x!1)"
                                                             "PROJ_2(x!1)"
                                                             _
                                                             _)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -1)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       -7
                                                                       "(m1!1, m2!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (then
                                                                            (repeat
                                                                             (inst?
                                                                              -7
                                                                              :where
                                                                              (-1
                                                                               -2)))
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (apply
                                                             (then
                                                              (skosimp*)
                                                              (copy -7)
                                                              (inst
                                                               -8
                                                               "(m1!1, m1!2)")
                                                              (inst
                                                               -1
                                                               "(m2!1, m2!2)")
                                                              (assert)
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 (-5
                                                                  -11))))
                                                              (assert)
                                                              (flatten)
                                                              (replace
                                                               -8)
                                                              (replace
                                                               -9)
                                                              (replace
                                                               -10)))
                                                            (("1"
                                                              (expand
                                                               "check_for_exception")
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -6)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -2)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (apply
                                                                       (then
                                                                        (repeat
                                                                         (inst?
                                                                          -4
                                                                          :where
                                                                          (-2
                                                                           -16)))
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (repeat
                                                                         (inst?
                                                                          -3
                                                                          :where
                                                                          (-1
                                                                           -15)))
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (copy
                                                                 -6)
                                                                (inst
                                                                 -7
                                                                 "(m1!1, m1!2)")
                                                                (inst
                                                                 -1
                                                                 "(m2!1, m2!2)")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   (-5
                                                                    -10))))
                                                                (assert)
                                                                (flatten)
                                                                (replace
                                                                 -7)
                                                                (replace
                                                                 -8)
                                                                (replace
                                                                 -9)))
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (repeat
                                                                   (inst?
                                                                    -1
                                                                    :where
                                                                    (-6
                                                                     -12)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (lemma
                                                                 "execute_set_deterministic")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p!1"
                                                                   "target(b!1)"
                                                                   "source(b!1)"
                                                                   "sigma!1"
                                                                   "sigma1!1"
                                                                   "sigma2!1"
                                                                   "PROJ_1(x!1)"
                                                                   "PROJ_2(x!1)"
                                                                   _
                                                                   _)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "(m1!1, m2!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (then
                                                                                  (repeat
                                                                                   (inst?
                                                                                    -7
                                                                                    :where
                                                                                    (-1
                                                                                     -2)))
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (apply
                                                                     (then
                                                                      (skosimp*)
                                                                      (inst
                                                                       -5
                                                                       "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                      (assert)
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -5
                                                                         :where
                                                                         (-4
                                                                          -8))))
                                                                      (assert)
                                                                      (flatten)
                                                                      (replace
                                                                       -5)
                                                                      (replace
                                                                       -6)
                                                                      (replace
                                                                       -7)
                                                                      (assert)))
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (copy
                                                                           -8)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(m1!1, m1!2)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -1
                                                                                   :where
                                                                                   (-5
                                                                                    -12))))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (case
                                                                                         "tau2!1 = tau2!2 AND m2!1 = m2!2")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -10
                                                                                               "(m3!1, m3!2)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -10
                                                                                                     :where
                                                                                                     (-8
                                                                                                      -15))))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -10
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (branch
                                                                                                              (split
                                                                                                               -9)
                                                                                                              ((then
                                                                                                                (flatten)
                                                                                                                (assert)
                                                                                                                (flatten)
                                                                                                                (assert)))))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -6)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("1"
                                                                                            (inst
                                                                                             -11
                                                                                             "(m2!1, m2!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -11
                                                                                                   :where
                                                                                                   (-3
                                                                                                    -15))))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (split
                                                                                             -14)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (apply
                                                                           (then
                                                                            (skosimp*)
                                                                            (inst
                                                                             -5
                                                                             "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                            (assert)
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -5
                                                                               :where
                                                                               (-4
                                                                                -8))))
                                                                            (assert)
                                                                            (flatten)
                                                                            (replace
                                                                             -5)
                                                                            (replace
                                                                             -6)
                                                                            (replace
                                                                             -7)
                                                                            (assert)))
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "execute_assert_deterministic")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "p!1"
                                                                             "expr(b!1)"
                                                                             "sigma!1"
                                                                             "sigma1!1"
                                                                             "sigma2!1"
                                                                             "PROJ_1(x!1)"
                                                                             "PROJ_2(x!1)"
                                                                             _
                                                                             _)
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1)))
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       "(m1!1, m2!1)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (repeat
                                                                                             (inst?
                                                                                              -6
                                                                                              :where
                                                                                              (-1
                                                                                               -2)))
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "well_founded?_product")
      (("2"
        (inst -1 "LAMBDA(i, j : nat) : i < j"
         "LAMBDA(i, j : nat) : i < j")
        (("2" (assert)
          (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (execute_CaseJML_deterministic formula-decl nil SemanticsProofs
     nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (execute_assert_deterministic formula-decl nil SemanticsProofs nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch const-decl "PState" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (execute_set_deterministic formula-decl nil SemanticsProofs nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (on_method_entry_deterministic formula-decl nil SemanticsProofs
     nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (on_method_exit_exceptional_deterministic formula-decl nil
     SemanticsProofs nil)
    (on_method_exit_normal_deterministic formula-decl nil
     SemanticsProofs nil)
    (update_stack const-decl "FullState" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert formal-const-decl "(execute_assert_type)"
     SemanticsProofs nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (well_founded?_product formula-decl nil WF nil))
   50658 46490 t nil)
  (derive_determ_step-1 nil 3403506316 3403534307
   (""
    (lemma
     "wf_induction[[nat, nat], (LAMBDA(i, j : [nat, nat]) : proj_1(i) < proj_1(j) AND proj_2(i) < proj_2(j))]")
    (("1"
      (inst -1
       "LAMBDA(n : [nat, nat]) :  FORALL (p: FullProgram)(b: (wf_Body(program(p))))
             (v1, v2: Val, sigma, sigma1, sigma2: FullState):
        derive(p)(b, sigma, v1, sigma1)(proj_1(n)) IMPLIES
         derive(p)(b, sigma, v2, sigma2)(proj_2(n)) IMPLIES
          v1 = v2 AND sigma1 = sigma2 AND proj_1(n) = proj_2(n)")
      (("1" (split -1)
        (("1" (skosimp*)
          (("1" (inst -1 "(n1!1, n2!1)")
            (("1" (apply (repeat (inst?))) (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "derive" -2)
              (("2" (rewrite "derive" -3)
                (("2"
                  (apply (branch (split -2)
                          ((then (flatten) (assert) (flatten)
                            (assert)))))
                  (("2" (lift-if)
                    (("2"
                      (apply (branch (split -1)
                              ((then
                                (flatten)
                                (assert)
                                (flatten)
                                (assert)))))
                      (("2"
                        (apply (branch
                                (split -1)
                                ((then
                                  (flatten)
                                  (assert)
                                  (flatten)
                                  (assert)))))
                        (("1"
                          (apply (then
                                  (skosimp*)
                                  (copy -6)
                                  (inst -7 "(m1!1, m1!2)")
                                  (inst -1 "(m2!1, m2!2)")
                                  (assert)
                                  (apply
                                   (repeat (inst? -7 :where (-4 -9))))
                                  (assert)
                                  (flatten)
                                  (replace -7)
                                  (replace -8)
                                  (replace -9)
                                  (apply
                                   (repeat (inst? -1 :where (-5 -12))))
                                  (assert)
                                  (flatten)
                                  (replace -1)
                                  (replace -2)
                                  (replace -3)
                                  (assert)))
                          (("1"
                            (expand* "check_for_exception_final"
                             "check_for_exception")
                            (("1"
                              (apply (branch
                                      (split -8)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              nil nil))
                            nil))
                          nil)
                         ("2"
                          (apply (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                            (("2"
                              (apply (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("2"
                                (apply
                                 (branch
                                  (split -1)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("1"
                                  (apply
                                   (then
                                    (skosimp*)
                                    (inst
                                     -5
                                     "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                    (assert)
                                    (apply
                                     (repeat
                                      (inst? -5 :where (-3 -7))))
                                    (assert)
                                    (flatten)
                                    (replace -5)
                                    (replace -6)
                                    (replace -7)
                                    (assert)))
                                  (("1"
                                    (expand*
                                     "check_for_exception_final"
                                     "check_for_exception")
                                    (("1"
                                      (apply
                                       (branch
                                        (split -4)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply
                                   (branch
                                    (split -1)
                                    ((then
                                      (flatten)
                                      (assert)
                                      (flatten)
                                      (assert)))))
                                  (("1"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (copy -6)
                                      (inst -7 "(m1!1, m1!2)")
                                      (inst -1 "(m2!1, m2!2)")
                                      (assert)
                                      (apply
                                       (repeat
                                        (inst? -7 :where (-4 -9))))
                                      (assert)
                                      (flatten)
                                      (replace -7)
                                      (replace -8)
                                      (replace -9)
                                      (apply
                                       (repeat
                                        (inst? -1 :where (-5 -12))))
                                      (assert)
                                      (flatten)
                                      (replace -1)
                                      (replace -2)
                                      (replace -3)
                                      (assert)))
                                    (("1"
                                      (expand*
                                       "check_for_exception_final"
                                       "check_for_exception")
                                      (("1"
                                        (apply
                                         (branch
                                          (split -8)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (replace -17)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("1"
                                      (apply
                                       (then
                                        (skosimp*)
                                        (copy -6)
                                        (inst -7 "(m1!1, m1!2)")
                                        (inst -1 "(m2!1, m2!2)")
                                        (assert)
                                        (apply
                                         (repeat
                                          (inst? -7 :where (-4 -9))))
                                        (assert)
                                        (flatten)
                                        (replace -7)
                                        (replace -8)
                                        (replace -9)
                                        (apply
                                         (repeat
                                          (inst? -1 :where (-5 -12))))
                                        (assert)
                                        (flatten)
                                        (replace -1)
                                        (replace -2)
                                        (replace -3)
                                        (assert)))
                                      (("1"
                                        (expand*
                                         "check_for_exception_final"
                                         "check_for_exception")
                                        (("1"
                                          (apply
                                           (branch
                                            (split -8)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply
                                               (then
                                                (skosimp*)
                                                (inst
                                                 -5
                                                 "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                (assert)
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -5
                                                   :where
                                                   (-3 -7))))
                                                (assert)
                                                (flatten)
                                                (replace -5)
                                                (replace -6)
                                                (replace -7)
                                                (assert)))
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -4)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (apply
                                                 (then
                                                  (inst
                                                   -4
                                                   "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                  (assert)
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -4
                                                     :where
                                                     (-3 -6))))
                                                  (assert)
                                                  (flatten)
                                                  (replace -4)
                                                  (replace -5)
                                                  (replace -6)
                                                  (assert)))
                                                nil
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (copy -15)
                                                      (("1"
                                                        (copy -16)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(m1!1, m1!2)")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "(m2!1, m2!2)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (repeat
                                                                   (inst?
                                                                    -1
                                                                    :where
                                                                    (-5
                                                                     -19)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)
                                                                  (replace
                                                                   -1)
                                                                  (replace
                                                                   -2)))
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (repeat
                                                                     (inst?
                                                                      -4
                                                                      :where
                                                                      (-8
                                                                       -22)))
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)
                                                                    (replace
                                                                     -4)
                                                                    (replace
                                                                     -5)))
                                                                  (("1"
                                                                    (case-replace
                                                                     "tau3!1 = tau3!2"
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -12)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -27)
                                                                          (("1"
                                                                            (lemma
                                                                             "on_method_entry_deterministic")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p!1"
                                                                               "md!1"
                                                                               "a!2"
                                                                               "tau3!2"
                                                                               "tau4!1"
                                                                               "tau4!2"
                                                                               "m3!1"
                                                                               "m3!2"
                                                                               _
                                                                               _)
                                                                              (("1"
                                                                                (apply
                                                                                 (then
                                                                                  (repeat
                                                                                   (inst?
                                                                                    -1))
                                                                                  (assert)))
                                                                                (("1"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "tau5!1 = tau5!2")
                                                                                        (("1"
                                                                                          (copy
                                                                                           -25)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(m4!1, m4!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (repeat
                                                                                                   (inst?
                                                                                                    -1
                                                                                                    :where
                                                                                                    (-21
                                                                                                     -35)))
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (replace
                                                                                                   -2)))
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "tau7!1 = tau7!2")
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (branch
                                                                                                      (split
                                                                                                       -25)
                                                                                                      ((then
                                                                                                        (flatten)
                                                                                                        (assert)
                                                                                                        (flatten)
                                                                                                        (assert)))))
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "on_method_exit_normal_deterministic")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "p!1"
                                                                                                         "md!1"
                                                                                                         "a!2"
                                                                                                         "tau7!2"
                                                                                                         "tau8!1"
                                                                                                         "tau8!2"
                                                                                                         "m6!1"
                                                                                                         "m6!2"
                                                                                                         _
                                                                                                         _)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (repeat
                                                                                                             (inst?
                                                                                                              -1))
                                                                                                            (assert)))
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (branch
                                                                                                              (split
                                                                                                               -1)
                                                                                                              ((then
                                                                                                                (flatten)
                                                                                                                (assert)
                                                                                                                (flatten)
                                                                                                                (assert)))))
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (branch
                                                                                                                  (split
                                                                                                                   -29)
                                                                                                                  ((then
                                                                                                                    (flatten)
                                                                                                                    (assert)
                                                                                                                    (flatten)
                                                                                                                    (assert)))))
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -22)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -33)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -17)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -20)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (branch
                                                                                                                                  (split
                                                                                                                                   -30)
                                                                                                                                  ((then
                                                                                                                                    (flatten)
                                                                                                                                    (assert)
                                                                                                                                    (flatten)
                                                                                                                                    (assert)))))
                                                                                                                                (("1"
                                                                                                                                  (postpone)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (postpone)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (postpone)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst
                                                         -4
                                                         "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -4
                                                           :where
                                                           (-3 -6))))
                                                        (assert)
                                                        (flatten)
                                                        (replace -4)
                                                        (replace -5)
                                                        (replace -6)
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (then
                                                          (inst
                                                           -4
                                                           "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                          (assert)
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -4
                                                             :where
                                                             (-3 -6))))
                                                          (assert)
                                                          (flatten)
                                                          (replace -4)
                                                          (replace -5)
                                                          (replace -6)
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lemma
                                                           "execute_CaseJML_deterministic")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p!1"
                                                             "branches(b!1)"
                                                             "sigma!1"
                                                             "sigma1!1"
                                                             "sigma2!1"
                                                             "PROJ_1(x!1)"
                                                             "PROJ_2(x!1)"
                                                             _
                                                             _)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -1)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       -7
                                                                       "(m1!1, m2!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (then
                                                                            (repeat
                                                                             (inst?
                                                                              -7
                                                                              :where
                                                                              (-1
                                                                               -2)))
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (copy
                                                                 -6)
                                                                (inst
                                                                 -7
                                                                 "(m1!1, m1!2)")
                                                                (inst
                                                                 -1
                                                                 "(m2!1, m2!2)")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   (-5
                                                                    -10))))
                                                                (assert)
                                                                (flatten)
                                                                (replace
                                                                 -7)
                                                                (replace
                                                                 -8)
                                                                (replace
                                                                 -9)))
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (repeat
                                                                   (inst?
                                                                    -1
                                                                    :where
                                                                    (-6
                                                                     -12)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (lemma
                                                                 "execute_set_deterministic")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p!1"
                                                                   "target(b!1)"
                                                                   "source(b!1)"
                                                                   "sigma!1"
                                                                   "sigma1!1"
                                                                   "sigma2!1"
                                                                   "PROJ_1(x!1)"
                                                                   "PROJ_2(x!1)"
                                                                   _
                                                                   _)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "(m1!1, m2!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (then
                                                                                  (repeat
                                                                                   (inst?
                                                                                    -7
                                                                                    :where
                                                                                    (-1
                                                                                     -2)))
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (apply
                                                                     (then
                                                                      (skosimp*)
                                                                      (inst
                                                                       -5
                                                                       "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                      (assert)
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -5
                                                                         :where
                                                                         (-4
                                                                          -8))))
                                                                      (assert)
                                                                      (flatten)
                                                                      (replace
                                                                       -5)
                                                                      (replace
                                                                       -6)
                                                                      (replace
                                                                       -7)
                                                                      (assert)))
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (copy
                                                                           -8)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(m1!1, m1!2)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (then
                                                                                  (repeat
                                                                                   (inst?
                                                                                    -1
                                                                                    :where
                                                                                    (-5
                                                                                     -12)))
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -7)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        (("1"
                                                                                          (copy
                                                                                           -11)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(m2!1, m2!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (repeat
                                                                                                   (inst?
                                                                                                    -1
                                                                                                    :where
                                                                                                    (-3
                                                                                                     -16)))
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (replace
                                                                                                   -2)))
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -13
                                                                                                   "(m3!1, m3!2)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -13)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -13
                                                                                                         "Unit"
                                                                                                         "tau3!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -13)
                                                                                                                (("1"
                                                                                                                  (apply
                                                                                                                   (branch
                                                                                                                    (split
                                                                                                                     -12)
                                                                                                                    ((then
                                                                                                                      (flatten)
                                                                                                                      (assert)
                                                                                                                      (flatten)
                                                                                                                      (assert)))))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "derive"
                                                                                           (-1
                                                                                            -14))
                                                                                          (("2"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -1)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -16)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -12
                                                                                                   "(m3!1, m3!2)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (repeat
                                                                                                         (inst?
                                                                                                          -12
                                                                                                          :where
                                                                                                          (-10
                                                                                                           -19)))
                                                                                                        (assert)
                                                                                                        (flatten)
                                                                                                        (assert)
                                                                                                        (replace
                                                                                                         -12)
                                                                                                        (replace
                                                                                                         -13)))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (apply
                                                                           (then
                                                                            (skosimp*)
                                                                            (inst
                                                                             -5
                                                                             "(proj_1(x!1) - 1, proj_2(x!1) - 1)")
                                                                            (assert)
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -5
                                                                               :where
                                                                               (-4
                                                                                -8))))
                                                                            (assert)
                                                                            (flatten)
                                                                            (replace
                                                                             -5)
                                                                            (replace
                                                                             -6)
                                                                            (replace
                                                                             -7)
                                                                            (assert)))
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "execute_assert_deterministic")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "p!1"
                                                                             "expr(b!1)"
                                                                             "sigma!1"
                                                                             "sigma1!1"
                                                                             "sigma2!1"
                                                                             "PROJ_1(x!1)"
                                                                             "PROJ_2(x!1)"
                                                                             _
                                                                             _)
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1)))
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       "(m1!1, m2!1)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (repeat
                                                                                             (inst?
                                                                                              -6
                                                                                              :where
                                                                                              (-1
                                                                                               -2)))
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (lemma "well_founded?_product")
      (("2"
        (inst -1 "LAMBDA(i, j : nat) : i < j"
         "LAMBDA(i, j : nat) : i < j")
        (("2" (assert)
          (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 142684 13702 t shostak))
 (derive_determ 0
  (derive_determ-1 nil 3395752130 3405850863
   ("" (skosimp*)
    (("" (expand "derives")
      (("" (skosimp*)
        (("" (lemma "derive_determ_step")
          (("" (inst?)
            (("" (assert)
              (("" (inst? -1 :where -3)
                (("" (assert)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((derives const-decl "bool" Semantics nil)
    (derive_determ_step formula-decl nil SemanticsProofs nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil))
   208 200 t shostak))
 (derive_bottom_iff_exception_step 0
  (derive_bottom_iff_exception_step-2 nil 3401608082 3405852746
   ("" (use "wf_induction[nat, LAMBDA(x, y : nat) : x < y]")
    (("1"
      (inst -1
       " LAMBDA(n : nat) : FORALL (p: FullProgram)(e: (wf_Body(program(p))))
                             (sigma1, sigma2: FullState, v: Val):
                        derive(p)(e, sigma1, v, sigma2)(n) IMPLIES
                         Bottom?(v) = up?(ex(pstate(sigma2)))")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -2)
              (("2" (split -2)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2"
                              (expand* "check_for_exception_final"
                               "check_for_exception")
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (split -5)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst-cp -8 "m1!1")
                                          (("2"
                                            (inst -8 "m2!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (split
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "x!1 - 1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst-cp
                                                                   -6
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -7
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -4)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (inst
                                                                               -9
                                                                               "m2!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -9
                                                                                     :where
                                                                                     -3)))
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -4)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -5
                                                                                                     "x!1 - 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   13)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "update_PState")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState_type")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "sigma2!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update")
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "update_local")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "update_field")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "x!1 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst?
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -5)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "update_PState")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "update_PState_type")
                                                                                                                          (("1"
                                                                                                                            (inst?
                                                                                                                             -1
                                                                                                                             :where
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "sigma2!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "raise")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (postpone)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "on_method_entry")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "on_method_event_type")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (postpone)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -4
                                                                                                                           "x!1 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "x!1 - 1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "return_of_stmt")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (update const-decl "PState" State nil)
    (update_local const-decl "PState" State nil)
    (update_field const-decl "PState" State nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (return_of_stmt const-decl "Val" Semantics nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil) nil
    nil
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert formal-const-decl "(execute_assert_type)"
     SemanticsProofs nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   361223 14220 t nil)
  (derive_bottom_iff_exception_step-1 nil 3395752639 3401608061
   ("" (use "wf_induction[nat, LAMBDA(x, y : nat) : x < y]")
    (("1"
      (inst -1 " LAMBDA(n : nat) : FORALL (p: FullProgram)(e: Body)
                     (sigma1, sigma2: FullState, v: Val):
                derive(p)(e, sigma1, v, sigma2)(n) IMPLIES
                 Bottom?(v) = up?(ex(pstate(sigma2)))")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -2)
              (("2" (split -2)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2"
                              (expand* "check_for_exception_final"
                               "check_for_exception")
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (split -5)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst-cp -8 "m1!1")
                                          (("2"
                                            (inst -8 "m2!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (split
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "x!1 - 1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst-cp
                                                                           -8
                                                                           "m1!1")
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "m2!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -5
                                                                                                     "x!1 - 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   13)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "update_PState")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState_type")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "sigma2!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update")
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "update_local")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "update_field")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "x!1 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst-cp
                                                                                                                       -6
                                                                                                                       "m1!1")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -6
                                                                                                                         "m2!1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (inst?
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "update_PState_type")
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1
                                                                                                                           :where
                                                                                                                           -15)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "sigma2!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "update_local")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -14)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -16
                                                                                                                                           "m5!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (inst?
                                                                                                                                               -17)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   -13)
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "on_method_exit_exceptional")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "on_method_event_type")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -4
                                                                                                                           "x!1 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "x!1 - 1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "return_of_stmt")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((wf_nat formula-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil))
   15150 2600 t shostak))
 (derive_boolean_expr_type_TCC1 0
  (derive_boolean_expr_type_TCC1-1 nil 3401446935 3405060344
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   408 370 nil nil))
 (derive_boolean_expr_type 0
  (derive_boolean_expr_type-1 nil 3396347233 3405850875
   ("" (skosimp)
    (("" (induct "b")
      (("1" (typepred "b!1") (("1" (assert) nil nil)) nil)
       ("2" (skosimp*) (("2" (assert) nil nil)) nil)
       ("3" (skosimp*) (("3" (assert) nil nil)) nil)
       ("4" (skosimp*) (("4" (assert) nil nil)) nil)
       ("5" (skosimp*)
        (("5" (expand "derive") (("5" (assert) nil nil)) nil)) nil)
       ("6" (skosimp*)
        (("6" (expand "derive") (("6" (assert) nil nil)) nil)) nil)
       ("7" (skosimp*)
        (("7" (expand "derive") (("7" (assert) nil nil)) nil)) nil)
       ("8" (skosimp*)
        (("8" (assert)
          (("8" (expand "derive" -4)
            (("8"
              (expand* "check_for_exception_final"
               "check_for_exception")
              nil nil))
            nil))
          nil))
        nil)
       ("9" (skosimp*)
        (("9" (expand "derive" -5)
          (("9"
            (expand* "check_for_exception_final" "check_for_exception")
            (("9" (assert) nil nil)) nil))
          nil))
        nil)
       ("10" (skosimp*)
        (("10" (expand "derive" -5)
          (("10"
            (expand* "check_for_exception_final" "check_for_exception")
            (("10" (assert) nil nil)) nil))
          nil))
        nil)
       ("11" (skosimp*)
        (("11" (expand "derive" -3) (("11" (assert) nil nil)) nil))
        nil)
       ("12" (skosimp*) (("12" (assert) nil nil)) nil)
       ("13" (skosimp*) (("13" (assert) nil nil)) nil)
       ("14" (skosimp*) (("14" (assert) nil nil)) nil)
       ("15" (skosimp*) (("15" (assert) nil nil)) nil)
       ("16" (skosimp*) (("16" (assert) nil nil)) nil)
       ("17" (skosimp*) (("17" (assert) nil nil)) nil)
       ("18" (skosimp*) (("18" (assert) nil nil)) nil)
       ("19" (skosimp*) (("19" (assert) nil nil)) nil)
       ("20" (skosimp*) (("20" (assert) nil nil)) nil)
       ("21" (skosimp*) (("21" (assert) nil nil)) nil)
       ("22" (skosimp*) (("22" (assert) nil nil)) nil)
       ("23" (skosimp*) (("23" (assert) nil nil)) nil)
       ("24" (skosimp*) (("24" (assert) nil nil)) nil)
       ("25" (skosimp*) (("25" (assert) nil nil)) nil)
       ("26" (skosimp*) (("26" (assert) nil nil)) nil)
       ("27" (skosimp*) (("27" (assert) nil nil)) nil)
       ("28" (skosimp*) (("28" (assert) nil nil)) nil)
       ("29" (skosimp*) (("29" (assert) nil nil)) nil)
       ("30" (skosimp*)
        (("30" (expand "wf_BoolExpr") (("30" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (p!1 skolem-const-decl "FullProgram" SemanticsProofs nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert formal-const-decl "(execute_assert_type)"
     SemanticsProofs nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (derive def-decl "bool" Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Body_induction formula-decl nil Body_adt nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3560 2990 t nil)))
(SemanticsJML
 (wf_initial_ghost_state_TCC1 0
  (wf_initial_ghost_state_TCC1-1 nil 3392370163 3404465312 ("" (tcc))
   proved-incomplete
   ((Name formal-nonempty-type-decl nil SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil))
   136 70 nil nil))
 (wf_initial_ghost_state 0
  (wf_initial_ghost_state-1 nil 3392370167 3405850877
   ("" (skosimp*)
    (("" (expand "wf_ghoststate")
      (("" (skosimp*)
        (("" (expand "is_ghost")
          (("" (replace -1 :hide? t)
            (("" (assert)
              (("" (expand "var_names")
                (("" (expand "get_GhostDecl")
                  (("" (lift-if)
                    (("" (assert)
                      (("" (split 1)
                        (("1" (skosimp*)
                          (("1"
                            (typepred "choose({g: FieldDecl[Name] |
                                getGhostDecls(program(p!1))(g) AND
                                 name(g) = vn!1})`init_val")
                            (("1" (expand "defined?")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "nonempty_exists")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (rewrite "nonempty_exists")
                            (("2" (expand "defined?")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (p!1 skolem-const-decl "FullProgram" SemanticsJML nil)
    (f!1 skolem-const-decl "FieldDecl[Name]" SemanticsJML nil)
    (vn!1 skolem-const-decl "Name" SemanticsJML nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil))
   1814 160 t shostak))
 (execute_set_TCC1 0
  (execute_set_TCC1-1 nil 3390908875 3404465313 ("" (tcc))
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   324 270 nil nil))
 (execute_set_TCC2 0
  (execute_set_TCC2-1 nil 3390908875 3404465313
   ("" (skosimp*)
    (("" (typepred "e!1")
      (("" (expand "wf_Expr") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   12 10 t nil))
 (execute_set_TCC3 0
  (execute_set_TCC3-1 nil 3390908875 3404465313 ("" (tcc))
   proved-incomplete nil 200 190 nil nil))
 (execute_set_TCC4 0
  (execute_set_TCC4-1 nil 3401446938 3404465313
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   195 200 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3390908875 3404465314 ("" (tcc) nil nil)
   proved-incomplete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil))
   433 350 t nil))
 (execute_CaseJML_TCC2 0
  (execute_CaseJML_TCC2-2 "no proof, because old one suddenly broken"
   3401701533 3404465314
   ("" (skosimp*)
    (("" (typepred "branches!1")
      (("" (case "wf_Branches(program(p!1))(xs!1)")
        (("1" (expand "wf_Branches" -2)
          (("1" (use "every_is_forall")
            (("1" (rewrite -1)
              (("1" (inst?)
                (("1" (rewrite -4)
                  (("1" (expand "member")
                    (("1" (flatten)
                      (("1" (use "wf_Body_CaseJML")
                        (("1" (replace -1 -2 :dir rl :hide? t)
                          (("1" (expand "wf_Body")
                            (("1" (prop)
                              (("1"
                                (hide -2 -4 -6)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (expand "var_names" -1)
                                    (("1"
                                      (expand* "union" "member")
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst? -3)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst? -4)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -3 -5)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "subterm" -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst? -4)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst? -5)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_Branches")
          (("2" (use "every_is_forall")
            (("2" (rewrite -1)
              (("2" (use "every_is_forall")
                (("2" (rewrite -1)
                  (("2" (skosimp)
                    (("2" (inst?)
                      (("2" (replace -4 -2)
                        (("2" (expand "member" -2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body_CaseJML formula-decl nil WellFormedProgram nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (every_is_forall formula-decl nil listfuncs nil))
   493 420 t shostak)
  (execute_CaseJML_TCC2-1 nil 3390908875 3401701497
   ("" (induct "xs")
    (("1" (skosimp*)
      (("1" (typepred "branches!1")
        (("1" (expand "wf_Branches")
          (("1" (replace -3)
            (("1" (expand "every")
              (("1" (expand "every")
                (("1" (flatten)
                  (("1" (expand "wf_Body")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "var_names" -4)
                              (("1"
                                (auto-rewrite "union" "member")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -3)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (typepred "branches!1")
        (("2"
          (inst -2 "p!1" "cdr(branches!1)" "s1!1" "s2!1" "n!1"
           "cons1_var!1")
          (("1" (assert)
            (("1" (replace -4)
              (("1" (assert)
                (("1" (inst -2 "CaseJML(cons2_var!1)")
                  (("1" (expand "wf_Branches")
                    (("1" (expand "every")
                      (("1" (flatten)
                        (("1" (expand "every")
                          (("1" (flatten)
                            (("1" (expand "wf_Body")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "var_names" -6)
                                            (("1"
                                              (auto-rewrite
                                               "union"
                                               "member")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (expand
                                                     "var_names"
                                                     -6)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "var_names"
                                                             5)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "wf_Branches")
            (("2" (expand "every" -1)
              (("2" (assert) (("2" (flatten) nil nil)) nil)) nil))
            nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil))
   5099 135 t nil))
 (execute_CaseJML_TCC3 0
  (execute_CaseJML_TCC3-1 nil 3390908875 3405851626 ("" (tcc) nil nil)
   unfinished nil 749121 735690 t shostak))
 (execute_CaseJML_TCC4 0
  (execute_CaseJML_TCC4-1 nil 3395749089 3404465315 ("" (tcc) nil nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (extend const-decl "R" extend nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil))
   403 350 t shostak))
 (execute_CaseJML_TCC5 0
  (execute_CaseJML_TCC5-1 nil 3405850797 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (check_assertion_TCC1 0
  (check_assertion_TCC1-1 nil 3395749089 3404465315
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   15 10 t shostak))
 (check_assertion_TCC2 0
  (check_assertion_TCC2-1 nil 3401446938 3404465315
   ("" (skosimp*)
    (("" (typepred "e!1")
      (("" (expand "wf_BoolExpr") (("" (propax) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   12 10 t nil))
 (execute_assert_TCC1 0
  (execute_assert_TCC1-1 nil 3397383993 3404465315
   ("" (subtype-tcc) nil nil) unchecked nil 189 150 nil nil))
 (execute_assert_TCC2 0
  (execute_assert_TCC2-1 nil 3397383993 3404465316
   ("" (subtype-tcc) nil nil) unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (This const-decl "Name" Program nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   808 760 nil nil))
 (on_method_entry_TCC1 0
  (on_method_entry_TCC1-1 nil 3390908875 3404465317 ("" (tcc))
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   764 730 nil nil))
 (on_method_entry_TCC2 0
  (on_method_entry_TCC2-2 "" 3395751614 3404465317 ("" (tcc)) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   796 750 t shostak)
  (on_method_entry_TCC2-1 nil 3390908875 3395751480
   ("" (subtype-tcc) nil nil) unfinished
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   143 143 nil nil))
 (on_method_entry_TCC3 0
  (on_method_entry_TCC3-1 nil 3390908875 3404465318
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (expand "wf_BoolExpr") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   86 80 t shostak))
 (on_method_entry_TCC4 0
  (on_method_entry_TCC4-1 nil 3390908875 3404465318 ("" (tcc))
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   853 810 t shostak))
 (on_method_entry_TCC5 0
  (on_method_entry_TCC5-1 nil 3390908875 3404465318
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   111 80 t nil))
 (on_method_entry_TCC6 0
  (on_method_entry_TCC6-1 nil 3401446938 3404465320
   ("" (subtype-tcc) nil nil) unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (This const-decl "Name" Program nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1764 1720 nil nil))
 (on_method_exit_normal_TCC1 0
  (on_method_exit_normal_TCC1-1 nil 3390908875 3404465320
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   63 60 t shostak))
 (on_method_exit_normal_TCC2 0
  (on_method_exit_normal_TCC2-1 nil 3390908875 3404465320
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   102 70 t nil))
 (on_method_exit_normal_TCC3 0
  (on_method_exit_normal_TCC3-1 nil 3390908875 3404465321
   ("" (skosimp*)
    (("" (typepred "post(md!1)")
      (("" (assert) (("" (postpone) nil nil)) nil)) nil))
    nil)
   unchecked
   ((BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   74 70 t shostak))
 (on_method_exit_normal_TCC4 0
  (on_method_exit_normal_TCC4-1 nil 3390908875 3404465321
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (assert)
          (("" (expand "wf_BoolExpr") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   79 80 t shostak))
 (on_method_exit_normal_TCC5 0
  (on_method_exit_normal_TCC5-1 nil 3390908875 3404465321
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (expand "wf_BoolExpr") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   110 80 t nil))
 (on_method_exit_normal_TCC6 0
  (on_method_exit_normal_TCC6-1 nil 3401446938 3404465322
   ("" (subtype-tcc) nil nil) unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (This const-decl "Name" Program nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1755 1720 nil nil))
 (on_method_exit_exceptional_TCC1 0
  (on_method_exit_exceptional_TCC1-1 nil 3390908875 3404465323
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   86 50 t shostak))
 (on_method_exit_exceptional_TCC2 0
  (on_method_exit_exceptional_TCC2-1 nil 3390908875 3404465323
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   68 70 t nil))
 (on_method_exit_exceptional_TCC3 0
  (on_method_exit_exceptional_TCC3-1 nil 3390908875 3404465323
   ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   228 230 nil nil))
 (on_method_exit_exceptional_TCC4 0
  (on_method_exit_exceptional_TCC4-1 nil 3397385085 3404465323
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (lift-if)
                (("1" (split -6)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (typepred "update_PState")
                      (("2" (expand "update_PState_type")
                        (("2" (inst?)
                          (("2" (inst -1 "s2!1")
                            (("2" (assert)
                              (("2"
                                (replace -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   65 70 t nil))
 (on_method_exit_exceptional_TCC5 0
  (on_method_exit_exceptional_TCC5-1 nil 3401446938 3404465421
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (replace -6)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split 2)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (typepred "update_PState")
                          (("2" (expand "update_PState_type")
                            (("2" (inst?)
                              (("2"
                                (inst
                                 -1
                                 "update_PState(tau2!1, raise[Name](down[Excpt](ex(pstate(s1!1)))))")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (expand "raise")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((update_PState formal-const-decl "(update_PState_type)"
     SemanticsJML nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (raise const-decl "PState" State nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   35998 230 t nil)))

