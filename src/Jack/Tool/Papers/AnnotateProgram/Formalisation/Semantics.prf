(Excpt)
(State
 (IMP_WellFormedProgram_TCC1 0
  (IMP_WellFormedProgram_TCC1-1 nil 3390204218 nil
   ("" (existence-tcc) nil nil) nil nil nil nil nil nil))
 (wf_state_vars_local_or_field 0
  (wf_state_vars_local_or_field-1 nil 3390110934 3390204314
   ("" (skosimp*)
    (("" (use "wf_program_variables_disjoint") (("" (grind) nil nil))
      nil))
    nil)
   proved
   ((wf_program_variables_disjoint formula-decl nil WellFormedProgram
     nil)
    (Name formal-nonempty-type-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (member const-decl "bool" sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]" Program nil)
    (var_names const-decl "finite_set[Name]" WellFormedProgram nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" Program nil)
    (var_names const-decl "finite_set[Name]" WellFormedProgram nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" Program nil)
    (is_field const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil))
   25029 2190 t shostak))
 (lookup_mthd_axiom_TCC1 0
  (lookup_mthd_axiom_TCC1-1 nil 3387861241 3390110793
   ("" (skosimp)
    (("" (use "get_class_definedness") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((get_class_definedness formula-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil State nil)
    (JType type-decl nil JType_adt nil)
    (Val type-decl nil Val_adt nil))
   285 150 t nil))
 (lookup_inv_axiom_TCC1 0
  (lookup_inv_axiom_TCC1-1 nil 3387861241 3390110793
   ("" (skosimp)
    (("" (use "get_class_definedness") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((get_class_definedness formula-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil State nil)
    (JType type-decl nil JType_adt nil)
    (Val type-decl nil Val_adt nil))
   25 20 t nil)))
(Evaluation
 (eval_TCC1 0
  (eval_TCC1-1 nil 3371189456 3390110793 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   319 170 nil nil))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3371189456 3390110793 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   272 120 nil nil))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3371189456 3390110793 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   238 90 nil nil))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3371189456 3390110794 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   215 110 nil nil))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3371189456 3390110794 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   201 100 nil nil))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3371189456 3390110794 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   104 100 nil nil))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3371189456 3390110794 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   176 100 nil nil))
 (eval_TCC8 0
  (eval_TCC8-1 nil 3371189456 3390110794 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   331 100 nil nil))
 (eval_TCC9 0
  (eval_TCC9-1 nil 3371189456 3390110795 ("" (subtype-tcc) nil nil)
   unchecked ((/= const-decl "boolean" notequal nil)) 71 30 nil nil))
 (eval_TCC10 0
  (eval_TCC10-1 nil 3371189456 3390110795
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   56 50 nil nil))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3371189456 3390110795
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   88 50 nil nil))
 (eval_TCC12 0
  (eval_TCC12-1 nil 3371189456 3390110795
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   92 60 nil nil))
 (eval_TCC13 0
  (eval_TCC13-1 nil 3371189456 3390110795
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   88 60 nil nil))
 (eval_TCC14 0
  (eval_TCC14-1 nil 3371189456 3390110795
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   92 50 nil nil)))
(SemanticsTypes)
(Semantics
 (default_value_TCC1 0
  (default_value_TCC1-1 nil 3390204016 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (default_value_TCC2 0
  (default_value_TCC2-1 nil 3390204016 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (default_value_TCC3 0
  (default_value_TCC3-1 nil 3390204016 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (default_value_TCC4 0
  (default_value_TCC4-1 nil 3390204016 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (initial_Program_state_TCC1 0
  (initial_Program_state_TCC1-1 nil 3385977479 3390110795
   ("" (skosimp) (("" (assert) nil nil)) nil) unchecked nil 8 10 t
   nil))
 (initial_Program_state_TCC2 0
  (initial_Program_state_TCC2-1 nil 3385977479 3390110795
   ("" (skosimp) (("" (assert) nil nil)) nil) unchecked nil 7 10 t
   nil))
 (wf_initial_Program_state 0
  (wf_initial_Program_state-1 nil 3390204344 3390204759
   ("" (skosimp*)
    (("" (expand "initial_Program_state")
      (("" (expand "wf_state")
        (("" (skosimp*)
          (("" (expand "is_field")
            (("" (expand "is_local")
              (("" (expand "defined?")
                (("" (expand "var_names")
                  (("" (expand "get_FieldDecl")
                    (("" (expand "get_LocalDecl")
                      (("" (split 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (rewrite "nonempty_exists")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (rewrite "nonempty_exists")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lift-if)
                          (("3" (assert)
                            (("3" (expand "default_value")
                              (("3"
                                (lift-if)
                                (("3"
                                  (assert)
                                  (("3"
                                    (split 1)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (rewrite "nonempty_exists")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (typepred "x!1")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lift-if)
                          (("4" (assert)
                            (("4" (expand "default_value")
                              (("4"
                                (lift-if)
                                (("4"
                                  (assert)
                                  (("4"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (rewrite "nonempty_exists")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((initial_Program_state const-decl "PState" Semantics nil)
    (is_local const-decl "boolean" State nil)
    (var_names const-decl "finite_set[Name]" WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" WellFormedProgram nil)
    (get_LocalDecl const-decl "lift[LocalVarDecl]" Program nil)
    (p!1 skolem-const-decl "FullProgram" Semantics nil)
    (l!1 skolem-const-decl "LocalVarDecl[Name]" Semantics nil)
    (vn!1 skolem-const-decl "Name" Semantics nil)
    (default_value const-decl "(defined?)" Semantics nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]" Program nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" Program nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (JType type-decl nil JType_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (FieldDecl type-eq-decl nil Program nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_FieldDecl const-decl "lift[FieldDecl]" Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil))
   415696 24120 t shostak))
 (deriv_expr_TCC1 0
  (deriv_expr_TCC1-1 nil 3371191509 3390110795
   ("" (skosimp) (("" (assert) nil nil)) nil) unchecked nil 48 20 t
   nil))
 (deriv_expr_TCC2 0
  (deriv_expr_TCC2-1 nil 3371191509 3390110795
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 66 30 t
   nil))
 (deriv_expr_TCC3 0
  (deriv_expr_TCC3-1 nil 3371191509 3390110795
   ("" (subtype-tcc) nil nil) unchecked nil 20 10 nil nil))
 (deriv_expr_TCC4 0
  (deriv_expr_TCC4-1 nil 3371191509 3390110795
   ("" (termination-tcc) nil nil) unchecked nil 25 20 nil nil))
 (deriv_expr_TCC5 0
  (deriv_expr_TCC5-1 nil 3371191509 3390110796
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   417 250 nil nil))
 (deriv_expr_TCC6 0
  (deriv_expr_TCC6-1 nil 3371191509 3390110796
   ("" (subtype-tcc) nil nil) unchecked nil 34 30 nil nil))
 (deriv_expr_TCC7 0
  (deriv_expr_TCC7-1 nil 3371191509 3390110796
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   447 340 nil nil))
 (deriv_expr_TCC8 0
  (deriv_expr_TCC8-1 nil 3371191509 3390110796
   ("" (skosimp*) (("" (replace -4 2) (("" (assert) nil nil)) nil))
    nil)
   unchecked nil 333 260 t nil))
 (deriv_expr_TCC9 0
  (deriv_expr_TCC9-1 nil 3371191509 3390110797
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   549 400 nil nil))
 (deriv_expr_TCC10 0
  (deriv_expr_TCC10-1 nil 3371191509 3390110798
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   715 460 nil nil))
 (deriv_expr_TCC11 0
  (deriv_expr_TCC11-1 nil 3371191509 3390110798
   ("" (subtype-tcc) nil nil) unchecked nil 195 150 nil nil))
 (deriv_expr_TCC12 0
  (deriv_expr_TCC12-1 nil 3371191509 3390110799
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   743 530 nil nil))
 (deriv_expr_TCC13 0
  (deriv_expr_TCC13-1 nil 3371191509 3390110799
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 444 330 t
   nil))
 (deriv_expr_TCC14 0
  (deriv_expr_TCC14-1 nil 3390110778 3390110800
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil))
   1142 820 nil nil))
 (deriv_expr_TCC15 0
  (deriv_expr_TCC15-1 nil 3390110778 3390110801
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil))
   1110 810 nil nil))
 (deriv_expr_TCC16 0
  (deriv_expr_TCC16-1 nil 3390110778 3390110803
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil))
   1200 890 nil nil))
 (deriv_expr_TCC17 0
  (deriv_expr_TCC17-1 nil 3390110778 3390110804
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil))
   1174 820 nil nil))
 (deriv_stmt_TCC1 0
  (deriv_stmt_TCC1-1 nil 3371191509 3390110804
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 238 200 t
   nil))
 (deriv_stmt_TCC2 0
  (deriv_stmt_TCC2-1 nil 3371191509 3390110804
   ("" (termination-tcc) nil nil) unchecked nil 380 290 nil nil))
 (deriv_stmt_TCC3 0
  (deriv_stmt_TCC3-1 nil 3371191509 3390110805
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_expr def-decl "bool" Semantics nil))
   1092 820 nil nil))
 (deriv_stmt_TCC4 0
  (deriv_stmt_TCC4-1 nil 3371191509 3390110806
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   678 450 nil nil))
 (deriv_stmt_TCC5 0
  (deriv_stmt_TCC5-1 nil 3371191509 3390110807
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   401 270 nil nil))
 (deriv_stmt_TCC6 0
  (deriv_stmt_TCC6-1 nil 3371191509 3390110807
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   234 160 nil nil))
 (deriv_stmt_TCC7 0
  (deriv_stmt_TCC7-1 nil 3371191509 3390110807
   ("" (subtype-tcc) nil nil) unchecked nil 65 70 nil nil))
 (deriv_stmt_TCC8 0
  (deriv_stmt_TCC8-1 nil 3371191509 3390110807
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   431 300 nil nil))
 (deriv_stmt_TCC9 0
  (deriv_stmt_TCC9-1 nil 3371191509 3390110808
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   688 500 nil nil))
 (deriv_stmt_TCC10 0
  (deriv_stmt_TCC10-1 nil 3371191509 3390110809
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   719 510 nil nil))
 (deriv_stmt_TCC11 0
  (deriv_stmt_TCC11-1 nil 3371191509 3390110809
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   489 360 nil nil))
 (deriv_stmt_TCC12 0
  (deriv_stmt_TCC12-1 nil 3371191509 3390110809
   ("" (subtype-tcc) nil nil) unchecked nil 103 70 nil nil))
 (expr_determ_step 0
  (expr_determ_step-3 "adapted proof for the new semantics" 3385988510
   3390110817
   ("" (assert)
    (("" (skosimp)
      ((""
        (lemma
         "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (inst?)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -2)
                        (("1" (rewrite "deriv_expr" -3)
                          (("1" (case "up?(ex(pstate(sigma!1)))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst -10 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "Assign2_var!1"
                                         "sigma!1"
                                         "v1!1"
                                         "v2!1"
                                         "tau!1"
                                         "tau!2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -10)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (case
                                                   "up?(ex(pstate(tau!2)))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!1"
                                                 "m2!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "deriv_expr" -2)
                      (("2" (rewrite "deriv_expr" -3)
                        (("2" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2 -3)
                      (("3" (rewrite "deriv_expr" -2)
                        (("3" (rewrite "deriv_expr" -3)
                          (("3" (case "up?(ex(pstate(sigma!1)))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "CondExpr1_var!1"
                                       "sigma!1"
                                       "v1!2"
                                       "v1!3"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (split -8)
                                        (("1" (postpone) nil nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (postpone) nil nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (skosimp*)
                                            (("4"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!3"
                                               "m2!3")
                                              (("4" (prop) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (postpone) nil nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_expr" -2)
                      (("5" (rewrite "deriv_expr" -3)
                        (("5" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (skosimp*) (("6" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   unfinished nil 7821 5350 t shostak)
  (expr_determ_step-2 nil 3382347845 3382347916
   ("" (assert)
    (("" (skosimp)
      ((""
        (lemma
         "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (inst?)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -2)
                        (("1" (rewrite "deriv_expr" -3)
                          (("1" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst -10 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "Assign2_var!1"
                                         "sigma!1"
                                         "v1!1"
                                         "v2!1"
                                         "tau!1"
                                         "tau!2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -10)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (case
                                                   "up?(ex(tau!2))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "s!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!1"
                                                 "m2!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "deriv_expr" -2)
                      (("2" (rewrite "deriv_expr" -3)
                        (("2" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2)
                      (("3" (rewrite "deriv_expr" -2)
                        (("3" (rewrite "deriv_expr" -3)
                          (("3" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "eval(CondExpr1_var!1)(sigma!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -7
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -7
                                           "CondExpr2_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -7)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -4
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -6
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -6
                                           "CondExpr3_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -6)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -3
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (hide -1 -2)
                      (("4" (rewrite "deriv_expr" -2)
                        (("4" (rewrite "deriv_expr" -3)
                          (("4" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -36 "(m1!1, m1!2)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -37
                                       "MethodCall1_var!1"
                                       "sigma!1"
                                       "a!1"
                                       "a!2"
                                       "tau1!1"
                                       "tau1!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -37)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst-cp
                                                 -39
                                                 "(m2!1, m2!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -40
                                                     "MethodCall3_var!1"
                                                     "tau1!2"
                                                     "pv!1"
                                                     "pv!2"
                                                     "tau2!1"
                                                     "tau2!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -40)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace

                                                             -2)
                                                            (("1"
                                                              (case-replace
                                                               "tau4!1 = tau4!2")
                                                              (("1"
                                                                (case-replace
                                                                 "md!1 = md!2")
                                                                (("1"
                                                                  (inst-cp
                                                                   -9
                                                                   "pre_set(md!2)"
                                                                   "tau4!2"
                                                                   "tau5!1"
                                                                   "tau5!2"
                                                                   "m3!1"
                                                                   "m3!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace

                                                                         -10)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -9
                                                                           "body(md!2)"
                                                                           "tau5!2"
                                                                           "tau6!1"
                                                                           "tau6!2"
                                                                           "m4!1"
                                                                           "m4!2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace

                                                                                 -10)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -48
                                                                                   "(m5!1, m5!2)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -49
                                                                                       "res(md!2)"
                                                                                       "tau6!2"
                                                                                       "v1!1"
                                                                                       "v2!1"
                                                                                       "tau7!1"
                                                                                       "tau7!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -49)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace

                                                                                               -2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "bottom?(ex(tau7!2))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -13
                                                                                                     "post_set(md!2)"
                                                                                                     "tau7!2"
                                                                                                     "tau8!1"
                                                                                                     "tau8!2"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace

                                                                                                           -14)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "tau3!1 = tau3!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -40)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -24)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -12
                                                                                                     "exc_set(md!2)"
                                                                                                     "tau7!2 WITH [ex := bottom]"
                                                                                                     "tau8!1 WITH [ex := bottom]"
                                                                                                     "tau8!2 WITH [ex := bottom]"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "tau8!1 = tau8!2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "tau3!1 = tau3!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -40)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -23)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply-extensionality
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("2"
                                                                                                                (case-replace
                                                                                                                 "tau8!1 = (# st := tau8!1`st, ex := tau8!1`ex #)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case-replace
                                                                                                                     "tau8!2 = (# st := tau8!2`st, ex := tau8!2`ex #)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -11
                                                                                               "s!1"
                                                                                               "sigma!2"
                                                                                               "sigma1!2"
                                                                                               "sigma2!2"
                                                                                               "m1!3"
                                                                                               "m2!3")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "up?(ex(tau1!2)) AND Null?(a!2)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       -28)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -12)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             -6
                                                             "s!1"
                                                             "sigma!2"
                                                             "sigma1!2"
                                                             "sigma2!2"
                                                             "m1!3"
                                                             "m2!3")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "s!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!3"
                                               "m2!3")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_expr" -2)
                      (("5" (rewrite "deriv_expr" -3)
                        (("5" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (use "well_founded?_product"
               ("ord1" "LAMBDA(i, j : nat) : i < j" "ord2"
                "LAMBDA(i, j : nat) : i < j"))
          (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   6837 4989 nil nil)
  (expr_determ_step-1 nil 3372767918 3382347154
   ("" (assert)
    (("" (skosimp)
      ((""
        (lemma
         "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (inst?)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -2)
                        (("1" (rewrite "deriv_expr" -3)
                          (("1" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst -10 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "Assign2_var!1"
                                         "sigma!1"
                                         "v1!1"
                                         "v2!1"
                                         "tau!1"
                                         "tau!2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -10)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (case
                                                   "up?(ex(tau!2))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "s!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!1"
                                                 "m2!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "deriv_expr" -2)
                      (("2" (rewrite "deriv_expr" -3)
                        (("2" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2)
                      (("3" (rewrite "deriv_expr" -2)
                        (("3" (rewrite "deriv_expr" -3)
                          (("3" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "eval(CondExpr1_var!1)(sigma!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -7
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -7
                                           "CondExpr2_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -7)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -4
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -6
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -6
                                           "CondExpr3_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -6)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -3
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (hide -1 -2)
                      (("4" (rewrite "deriv_expr" -2)
                        (("4" (rewrite "deriv_expr" -3)
                          (("4" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -36 "(m1!1, m1!2)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -37
                                       "MethodCall1_var!1"
                                       "sigma!1"
                                       "a!1"
                                       "a!2"
                                       "tau1!1"
                                       "tau1!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -37)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst-cp
                                                 -39
                                                 "(m2!1, m2!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -40
                                                     "MethodCall3_var!1"
                                                     "tau1!2"
                                                     "pv!1"
                                                     "pv!2"
                                                     "tau2!1"
                                                     "tau2!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -40)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace

                                                             -2)
                                                            (("1"
                                                              (case-replace
                                                               "tau4!1 = tau4!2")
                                                              (("1"
                                                                (case-replace
                                                                 "md!1 = md!2")
                                                                (("1"
                                                                  (inst-cp
                                                                   -9
                                                                   "preset(md!2)"
                                                                   "tau4!2"
                                                                   "tau5!1"
                                                                   "tau5!2"
                                                                   "m3!1"
                                                                   "m3!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace

                                                                         -10)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -9
                                                                           "body(md!2)"
                                                                           "tau5!2"
                                                                           "tau6!1"
                                                                           "tau6!2"
                                                                           "m4!1"
                                                                           "m4!2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace

                                                                                 -10)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -48
                                                                                   "(m5!1, m5!2)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -49
                                                                                       "res(md!2)"
                                                                                       "tau6!2"
                                                                                       "v1!1"
                                                                                       "v2!1"
                                                                                       "tau7!1"
                                                                                       "tau7!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -49)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace

                                                                                               -2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "bottom?(ex(tau7!2))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -13
                                                                                                     "postset(md!2)"
                                                                                                     "tau7!2"
                                                                                                     "tau8!1"
                                                                                                     "tau8!2"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace

                                                                                                           -14)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "tau3!1 = tau3!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -40)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -24)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -12
                                                                                                     "excset(md!2)"
                                                                                                     "tau7!2 WITH [ex := bottom]"
                                                                                                     "tau8!1 WITH [ex := bottom]"
                                                                                                     "tau8!2 WITH [ex := bottom]"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "tau8!1 = tau8!2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "tau3!1 = tau3!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -40)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -23)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply-extensionality
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("2"
                                                                                                                (case-replace
                                                                                                                 "tau8!1 = (# st := tau8!1`st, ex := tau8!1`ex #)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case-replace
                                                                                                                     "tau8!2 = (# st := tau8!2`st, ex := tau8!2`ex #)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -11
                                                                                               "s!1"
                                                                                               "sigma!2"
                                                                                               "sigma1!2"
                                                                                               "sigma2!2"
                                                                                               "m1!3"
                                                                                               "m2!3")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "up?(ex(tau1!2)) AND Null?(a!2)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       -28)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -12)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             -6
                                                             "s!1"
                                                             "sigma!2"
                                                             "sigma1!2"
                                                             "sigma2!2"
                                                             "m1!3"
                                                             "m2!3")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "s!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!3"
                                               "m2!3")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_expr" -2)
                      (("5" (rewrite "deriv_expr" -3)
                        (("5" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (use "well_founded?_product"
               ("ord1" "LAMBDA(i, j : nat) : i < j" "ord2"
                "LAMBDA(i, j : nat) : i < j"))
          (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   9788 4901 t shostak))
 (expr_determ_step2 0
  (expr_determ_step2-1 nil 3387107674 3390110817
   ("" (skosimp*)
    (("" (expand "deriv_expr")
      (("" (use "expr_determ_step")
        (("" (assert)
          (("" (inst?)
            (("" (assert)
              (("" (split -1)
                (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((deriv_expr const-decl "bool" Semantics nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil Semantics nil)
    (Expr type-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (expr_determ_step formula-decl nil Semantics nil))
   226 150 t shostak))
 (stmt_determ_step 0
  (stmt_determ_step-1 nil 3371194190 3390110818
   ("" (skosimp)
    ((""
      (lemma
       "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "s")
                  (("1" (skosimp*)
                    (("1" (hide -1 -2)
                      (("1" (rewrite "deriv_stmt" -1)
                        (("1" (rewrite "deriv_stmt" -2)
                          (("1" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "eval(IfThenElse1_var!1)(sigma!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -6
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -6
                                           "IfThenElse2_var!1"
                                           "sigma!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -5
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -5
                                           "IfThenElse3_var!1"
                                           "sigma!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (hide -1 -2)
                      (("2" (rewrite "deriv_stmt" -1)
                        (("2" (rewrite "deriv_stmt" -2)
                          (("2" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -7 "(m1!1, m1!2)")
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -8
                                           "Sequence1_var!1"
                                           "sigma!1"
                                           "tau!1"
                                           "tau!2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -7
                                                 "(m2!1, m2!2)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -7
                                                     "Sequence2_var!1"
                                                     "tau!1"
                                                     "sigma1!1"
                                                     "sigma2!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (rewrite "deriv_stmt" -1)
                      (("3" (rewrite "deriv_stmt" -2)
                        (("3" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (use
                                   "expr_determ_step"
                                   ("n1" "x!1`1 - 1" "n2" "x!1`2 - 1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "v!1"
                                       "v!2"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred "m1!1")
                                              (("2"
                                                (typepred "m2!1")
                                                (("2"
                                                  (inst
                                                   -13
                                                   "(m1!1, m2!1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -13
                                                       "s!1"
                                                       "sigma!2"
                                                       "sigma1!2"
                                                       "sigma2!2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (rewrite "deriv_stmt" -1)
                      (("4" (rewrite "deriv_stmt" -2)
                        (("4" (flatten) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_stmt" -1)
                      (("5" (rewrite "deriv_stmt" -2)
                        (("5" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (use
                                   "expr_determ_step"
                                   ("n1" "x!1`1 - 1" "n2" "x!1`2 - 1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "v!1"
                                       "v!2"
                                       "sigma1!1"
                                       "sigma2!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst -7 "(m1!1, m2!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -7
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (skosimp*)
                    (("6" (rewrite "deriv_stmt" -1)
                      (("6" (rewrite "deriv_stmt" -2)
                        (("6" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (skosimp*)
                    (("7" (hide -1 -2 -3)
                      (("7" (rewrite "deriv_stmt" -1)
                        (("7" (rewrite "deriv_stmt" -2)
                          (("7" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -11 "(m1!1, m1!2)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -12
                                       "TryCatch1_var!1"
                                       "sigma!1"
                                       "tau1!1"
                                       "tau1!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replace -12)
                                            (("2"
                                              (case "up?(ex(tau1!2))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst-cp
                                                   -12
                                                   "(m2!1, m2!2)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -13
                                                       "TryCatch2_var!1"
                                                       "tau1!2 WITH [ex := bottom]"
                                                       "tau2!1"
                                                       "tau2!2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace

                                                             -13)
                                                            (("1"
                                                              (inst
                                                               -12
                                                               "(m3!1, m3!2)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -12
                                                                   "TryCatch3_var!1"
                                                                   "tau2!2 WITH [ex := bottom]"
                                                                   "tau3!1"
                                                                   "tau3!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "up?(ex(tau2!2))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "deriv_stmt"
                                                   -3)
                                                  (("2"
                                                    (rewrite
                                                     "deriv_stmt"
                                                     -8)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m3!1, m3!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "TryCatch3_var!1"
                                                               "tau2!2 WITH [ex := bottom]"
                                                               "tau3!1"
                                                               "tau3!2")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (skosimp*)
                    (("8" (hide -1)
                      (("8" (rewrite "deriv_stmt" -1)
                        (("8" (rewrite "deriv_stmt" -2)
                          (("8" (assert)
                            (("8" (case "up?(ex(sigma!1))")
                              (("1" (grind) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst -5 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst -5 "sigma2!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (use "well_founded?_product"
             ("ord1" "LAMBDA(i, j : nat) : i < j" "ord2"
              "LAMBDA(i, j : nat) : i < j"))
        (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((wf_nat formula-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil) (list type-decl nil list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil))
   306 220 t shostak))
 (expr_determ 0
  (expr_determ-1 nil 3371191515 3390110818
   ("" (skosimp*)
    (("" (use "expr_determ_step")
      (("" (assert)
        (("" (expand "derives")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst -1 "n!2")
                (("" (inst?)
                  (("" (inst?)
                    (("" (assert)
                      (("" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (use "stmt_determ_step")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil))
   324 200 t shostak))
 (stmt_determ 0
  (stmt_determ-1 nil 3371193973 3390110818
   ("" (skosimp*)
    (("" (use "stmt_determ_step")
      (("" (expand "derives")
        (("" (skosimp*)
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((stmt_determ_step formula-decl nil Semantics nil)
    (FullState formal-type-decl nil Semantics nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Stmt type-decl nil Stmt_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   160 70 t shostak)))
(SemanticsCommon
 (check_assertion_TCC1 0
  (check_assertion_TCC1-1 nil 3385977476 3390110818
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   69 40 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3385977476 3390110818
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 26 30 t
   nil))
 (execute_CaseJML_TCC2 0
  (execute_CaseJML_TCC2-1 nil 3385977476 3390110818
   ("" (expand "execute_CaseJML_type")
    (("" (skosimp) (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked nil 45 10 t nil))
 (execute_CaseJML_TCC3 0
  (execute_CaseJML_TCC3-1 nil 3390110778 3390110818
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsCommon
     nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsCommon nil)
    (FullProgram formal-type-decl nil SemanticsCommon nil)
    (Name formal-nonempty-type-decl nil SemanticsCommon nil)
    (execute_CaseJML_type const-decl "bool" SemanticsTypes nil))
   113 90 nil nil)))
(ProgramSemantics
 (execute_set_TCC1 0
  (execute_set_TCC1-1 nil 3385977480 3390110818
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (execute_set_type const-decl "bool" SemanticsTypes nil))
   95 60 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3385977480 3390110819
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (execute_CaseJML_type const-decl "bool" SemanticsTypes nil))
   126 60 nil nil))
 (on_method_event_TCC1 0
  (on_method_event_TCC1-1 nil 3390110778 3390110819
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (on_method_event_type const-decl "bool" SemanticsTypes nil))
   96 50 nil nil))
 (IMP_Semantics_TCC1 0
  (IMP_Semantics_TCC1-1 nil 3385977480 3390110819
   ("" (subtype-tcc) nil nil) unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil))
   21 30 nil nil)))

