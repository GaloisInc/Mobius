(Excpt)
(Val)
(State
 (lookup_mthd_axiom_TCC1 0
  (lookup_mthd_axiom_TCC1-1 nil 3387861241 3388985963
   ("" (skosimp)
    (("" (use "get_class_definedness") (("" (assert) nil nil)) nil))
    nil)
   proved
   ((get_class_definedness formula-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil State nil)
    (JType type-decl nil JType_adt nil)
    (Val type-decl nil Val_adt nil))
   158 60 t nil))
 (lookup_inv_axiom_TCC1 0
  (lookup_inv_axiom_TCC1-1 nil 3387861241 3388985963
   ("" (skosimp)
    (("" (use "get_class_definedness") (("" (assert) nil nil)) nil))
    nil)
   proved
   ((get_class_definedness formula-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil State nil)
    (JType type-decl nil JType_adt nil)
    (Val type-decl nil Val_adt nil))
   31 30 t nil)))
(Evaluation
 (eval_TCC1 0
  (eval_TCC1-1 nil 3371189456 3388985963 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   522 410 nil nil))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3371189456 3388985964 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   480 360 nil nil))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3371189456 3388985964 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   477 370 nil nil))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3371189456 3388985965 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   479 390 nil nil))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3371189456 3388985965 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   469 370 nil nil))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3371189456 3388985965 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   459 370 nil nil))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3371189456 3388985966 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   470 360 nil nil))
 (eval_TCC8 0
  (eval_TCC8-1 nil 3371189456 3388985966 ("" (termination-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[NumExpr -> nat]" NumExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   495 420 nil nil))
 (eval_TCC9 0
  (eval_TCC9-1 nil 3371189456 3388985967 ("" (subtype-tcc) nil nil)
   proved ((/= const-decl "boolean" notequal nil)) 178 100 nil nil))
 (eval_TCC10 0
  (eval_TCC10-1 nil 3371189456 3388985970
   ("" (termination-tcc) nil nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[BoolExpr -> nat]" BoolExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3050 2700 nil nil))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3371189456 3388985973
   ("" (termination-tcc) nil nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[BoolExpr -> nat]" BoolExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3409 2970 nil nil))
 (eval_TCC12 0
  (eval_TCC12-1 nil 3371189456 3388985977
   ("" (termination-tcc) nil nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[BoolExpr -> nat]" BoolExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3425 3030 nil nil))
 (eval_TCC13 0
  (eval_TCC13-1 nil 3371189456 3388985980
   ("" (termination-tcc) nil nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[BoolExpr -> nat]" BoolExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3400 2940 nil nil))
 (eval_TCC14 0
  (eval_TCC14-1 nil 3371189456 3388985983
   ("" (termination-tcc) nil nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[BoolExpr -> nat]" BoolExpr_adt nil)
    (Name formal-nonempty-type-decl nil Evaluation nil)
    (size const-decl "nat" SizeFunctions nil)
    (size const-decl "nat" SizeFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   3403 3010 nil nil)))
(SemanticsTypes
 (execute_set_type_TCC1 0
  (execute_set_type_TCC1-1 nil 3388911891 3388985983
   ("" (subtype-tcc) nil nil) proved nil 22 20 nil nil))
 (on_method_exit_type_TCC1 0
  (on_method_exit_type_TCC1-1 nil 3388983324 3388985984
   ("" (subtype-tcc) nil nil) unfinished nil 135 60 nil nil)))
(Semantics
 (initial_Program_state_TCC1 0
  (initial_Program_state_TCC1-1 nil 3385977479 3388985984
   ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 22 30 t nil))
 (initial_Program_state_TCC2 0
  (initial_Program_state_TCC2-1 nil 3385977479 3388985984
   ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 24 20 t nil))
 (deriv_expr_TCC1 0
  (deriv_expr_TCC1-1 nil 3371191509 3388985984
   ("" (skosimp) (("" (assert) nil nil)) nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   115 40 t nil))
 (deriv_expr_TCC2 0
  (deriv_expr_TCC2-1 nil 3371191509 3388985984
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   216 130 t nil))
 (deriv_expr_TCC3 0
  (deriv_expr_TCC3-1 nil 3371191509 3388985984
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   458 310 nil nil))
 (deriv_expr_TCC4 0
  (deriv_expr_TCC4-1 nil 3371191509 3388985984
   ("" (termination-tcc) nil nil) proved nil 58 50 nil nil))
 (deriv_expr_TCC5 0
  (deriv_expr_TCC5-1 nil 3371191509 3388985985
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   537 380 nil nil))
 (deriv_expr_TCC6 0
  (deriv_expr_TCC6-1 nil 3371191509 3388985986
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   713 500 nil nil))
 (deriv_expr_TCC7 0
  (deriv_expr_TCC7-1 nil 3371191509 3388985987
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   962 650 nil nil))
 (deriv_expr_TCC8 0
  (deriv_expr_TCC8-1 nil 3371191509 3388985987
   ("" (skosimp*) (("" (replace -4 2) (("" (assert) nil nil)) nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   519 370 t nil))
 (deriv_expr_TCC9 0
  (deriv_expr_TCC9-1 nil 3371191509 3388985988
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1270 960 nil nil))
 (deriv_expr_TCC10 0
  (deriv_expr_TCC10-1 nil 3371191509 3388985990
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1703 1270 nil nil))
 (deriv_expr_TCC11 0
  (deriv_expr_TCC11-1 nil 3371191509 3388985992
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1807 1310 nil nil))
 (deriv_expr_TCC12 0
  (deriv_expr_TCC12-1 nil 3371191509 3388985994
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1956 1560 nil nil))
 (deriv_expr_TCC13 0
  (deriv_expr_TCC13-1 nil 3371191509 3388985995
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   681 450 t nil))
 (deriv_stmt_TCC1 0
  (deriv_stmt_TCC1-1 nil 3371191509 3388985995
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   196 130 t nil))
 (deriv_stmt_TCC2 0
  (deriv_stmt_TCC2-1 nil 3371191509 3388985996
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1047 780 nil nil))
 (deriv_stmt_TCC3 0
  (deriv_stmt_TCC3-1 nil 3371191509 3388985997
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1323 1000 nil nil))
 (deriv_stmt_TCC4 0
  (deriv_stmt_TCC4-1 nil 3371191509 3388985998
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   988 740 nil nil))
 (deriv_stmt_TCC5 0
  (deriv_stmt_TCC5-1 nil 3371191509 3388985999
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   736 520 nil nil))
 (deriv_stmt_TCC6 0
  (deriv_stmt_TCC6-1 nil 3371191509 3388986000
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   554 390 nil nil))
 (deriv_stmt_TCC7 0
  (deriv_stmt_TCC7-1 nil 3371191509 3388986000
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   479 380 nil nil))
 (deriv_stmt_TCC8 0
  (deriv_stmt_TCC8-1 nil 3371191509 3388986001
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   534 380 nil nil))
 (deriv_stmt_TCC9 0
  (deriv_stmt_TCC9-1 nil 3371191509 3388986002
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1203 800 nil nil))
 (deriv_stmt_TCC10 0
  (deriv_stmt_TCC10-1 nil 3371191509 3388986003
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1088 830 nil nil))
 (deriv_stmt_TCC11 0
  (deriv_stmt_TCC11-1 nil 3371191509 3388986004
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1172 870 nil nil))
 (deriv_stmt_TCC12 0
  (deriv_stmt_TCC12-1 nil 3371191509 3388986005
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   554 380 nil nil))
 (deriv_stmt_TCC13 0
  (deriv_stmt_TCC13-1 nil 3371191509 3388986005
   ("" (termination-tcc) nil nil) proved nil 431 370 nil nil))
 (expr_determ_step 0
  (expr_determ_step-3 "adapted proof for the new semantics" 3385988510
   3388986011
   ("" (assert)
    (("" (skosimp)
      ((""
        (lemma
         "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (inst?)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -2)
                        (("1" (rewrite "deriv_expr" -3)
                          (("1" (case "up?(ex(pstate(sigma!1)))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst -10 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "Assign2_var!1"
                                         "sigma!1"
                                         "v1!1"
                                         "v2!1"
                                         "tau!1"
                                         "tau!2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -10)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (case
                                                   "up?(ex(pstate(tau!2)))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!1"
                                                 "m2!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "deriv_expr" -2)
                      (("2" (rewrite "deriv_expr" -3)
                        (("2" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2 -3)
                      (("3" (rewrite "deriv_expr" -2)
                        (("3" (rewrite "deriv_expr" -3)
                          (("3" (case "up?(ex(pstate(sigma!1)))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "CondExpr1_var!1"
                                       "sigma!1"
                                       "v1!2"
                                       "v1!3"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (split -8)
                                        (("1" (postpone) nil nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (postpone) nil nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (skosimp*)
                                            (("4"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!3"
                                               "m2!3")
                                              (("4" (prop) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (postpone) nil nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_expr" -2)
                      (("5" (rewrite "deriv_expr" -3)
                        (("5" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (skosimp*) (("6" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   unfinished nil 5800 4200 t shostak)
  (expr_determ_step-2 nil 3382347845 3382347916
   ("" (assert)
    (("" (skosimp)
      ((""
        (lemma
         "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (inst?)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -2)
                        (("1" (rewrite "deriv_expr" -3)
                          (("1" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst -10 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "Assign2_var!1"
                                         "sigma!1"
                                         "v1!1"
                                         "v2!1"
                                         "tau!1"
                                         "tau!2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -10)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (case
                                                   "up?(ex(tau!2))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "s!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!1"
                                                 "m2!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "deriv_expr" -2)
                      (("2" (rewrite "deriv_expr" -3)
                        (("2" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2)
                      (("3" (rewrite "deriv_expr" -2)
                        (("3" (rewrite "deriv_expr" -3)
                          (("3" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "eval(CondExpr1_var!1)(sigma!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -7
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -7
                                           "CondExpr2_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -7)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -4
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -6
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -6
                                           "CondExpr3_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -6)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -3
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (hide -1 -2)
                      (("4" (rewrite "deriv_expr" -2)
                        (("4" (rewrite "deriv_expr" -3)
                          (("4" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -36 "(m1!1, m1!2)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -37
                                       "MethodCall1_var!1"
                                       "sigma!1"
                                       "a!1"
                                       "a!2"
                                       "tau1!1"
                                       "tau1!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -37)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst-cp
                                                 -39
                                                 "(m2!1, m2!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -40
                                                     "MethodCall3_var!1"
                                                     "tau1!2"
                                                     "pv!1"
                                                     "pv!2"
                                                     "tau2!1"
                                                     "tau2!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -40)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (case-replace
                                                               "tau4!1 = tau4!2")
                                                              (("1"
                                                                (case-replace
                                                                 "md!1 = md!2")
                                                                (("1"
                                                                  (inst-cp
                                                                   -9
                                                                   "pre_set(md!2)"
                                                                   "tau4!2"
                                                                   "tau5!1"
                                                                   "tau5!2"
                                                                   "m3!1"
                                                                   "m3!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -10)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -9
                                                                           "body(md!2)"
                                                                           "tau5!2"
                                                                           "tau6!1"
                                                                           "tau6!2"
                                                                           "m4!1"
                                                                           "m4!2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -10)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -48
                                                                                   "(m5!1, m5!2)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -49
                                                                                       "res(md!2)"
                                                                                       "tau6!2"
                                                                                       "v1!1"
                                                                                       "v2!1"
                                                                                       "tau7!1"
                                                                                       "tau7!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -49)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "bottom?(ex(tau7!2))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -13
                                                                                                     "post_set(md!2)"
                                                                                                     "tau7!2"
                                                                                                     "tau8!1"
                                                                                                     "tau8!2"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -14)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "tau3!1 = tau3!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -40)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -24)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -12
                                                                                                     "exc_set(md!2)"
                                                                                                     "tau7!2 WITH [ex := bottom]"
                                                                                                     "tau8!1 WITH [ex := bottom]"
                                                                                                     "tau8!2 WITH [ex := bottom]"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "tau8!1 = tau8!2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "tau3!1 = tau3!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -40)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -23)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply-extensionality
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("2"
                                                                                                                (case-replace
                                                                                                                 "tau8!1 = (# st := tau8!1`st, ex := tau8!1`ex #)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case-replace
                                                                                                                     "tau8!2 = (# st := tau8!2`st, ex := tau8!2`ex #)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -11
                                                                                               "s!1"
                                                                                               "sigma!2"
                                                                                               "sigma1!2"
                                                                                               "sigma2!2"
                                                                                               "m1!3"
                                                                                               "m2!3")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "up?(ex(tau1!2)) AND Null?(a!2)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       -28)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -12)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             -6
                                                             "s!1"
                                                             "sigma!2"
                                                             "sigma1!2"
                                                             "sigma2!2"
                                                             "m1!3"
                                                             "m2!3")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "s!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!3"
                                               "m2!3")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_expr" -2)
                      (("5" (rewrite "deriv_expr" -3)
                        (("5" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (use "well_founded?_product"
               ("ord1" "LAMBDA(i, j : nat) : i < j" "ord2"
                "LAMBDA(i, j : nat) : i < j"))
          (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   6837 4989 nil nil)
  (expr_determ_step-1 nil 3372767918 3382347154
   ("" (assert)
    (("" (skosimp)
      ((""
        (lemma
         "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (inst?)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -2)
                        (("1" (rewrite "deriv_expr" -3)
                          (("1" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (inst -10 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "Assign2_var!1"
                                         "sigma!1"
                                         "v1!1"
                                         "v2!1"
                                         "tau!1"
                                         "tau!2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -10)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (case
                                                   "up?(ex(tau!2))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "s!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!1"
                                                 "m2!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "deriv_expr" -2)
                      (("2" (rewrite "deriv_expr" -3)
                        (("2" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2)
                      (("3" (rewrite "deriv_expr" -2)
                        (("3" (rewrite "deriv_expr" -3)
                          (("3" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "eval(CondExpr1_var!1)(sigma!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -7
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -7
                                           "CondExpr2_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -7)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -4
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -6
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -6
                                           "CondExpr3_var!1"
                                           "sigma!1"
                                           "v1!1"
                                           "v2!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -6)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -3
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2"
                                                   "m1!1"
                                                   "m2!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (hide -1 -2)
                      (("4" (rewrite "deriv_expr" -2)
                        (("4" (rewrite "deriv_expr" -3)
                          (("4" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -36 "(m1!1, m1!2)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -37
                                       "MethodCall1_var!1"
                                       "sigma!1"
                                       "a!1"
                                       "a!2"
                                       "tau1!1"
                                       "tau1!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -37)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst-cp
                                                 -39
                                                 "(m2!1, m2!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -40
                                                     "MethodCall3_var!1"
                                                     "tau1!2"
                                                     "pv!1"
                                                     "pv!2"
                                                     "tau2!1"
                                                     "tau2!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -40)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (case-replace
                                                               "tau4!1 = tau4!2")
                                                              (("1"
                                                                (case-replace
                                                                 "md!1 = md!2")
                                                                (("1"
                                                                  (inst-cp
                                                                   -9
                                                                   "preset(md!2)"
                                                                   "tau4!2"
                                                                   "tau5!1"
                                                                   "tau5!2"
                                                                   "m3!1"
                                                                   "m3!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -10)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -9
                                                                           "body(md!2)"
                                                                           "tau5!2"
                                                                           "tau6!1"
                                                                           "tau6!2"
                                                                           "m4!1"
                                                                           "m4!2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -10)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -48
                                                                                   "(m5!1, m5!2)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -49
                                                                                       "res(md!2)"
                                                                                       "tau6!2"
                                                                                       "v1!1"
                                                                                       "v2!1"
                                                                                       "tau7!1"
                                                                                       "tau7!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -49)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "bottom?(ex(tau7!2))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -13
                                                                                                     "postset(md!2)"
                                                                                                     "tau7!2"
                                                                                                     "tau8!1"
                                                                                                     "tau8!2"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -14)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "tau3!1 = tau3!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -40)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -24)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -12
                                                                                                     "excset(md!2)"
                                                                                                     "tau7!2 WITH [ex := bottom]"
                                                                                                     "tau8!1 WITH [ex := bottom]"
                                                                                                     "tau8!2 WITH [ex := bottom]"
                                                                                                     "m6!1"
                                                                                                     "m6!2")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "tau8!1 = tau8!2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "tau3!1 = tau3!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -40)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -23)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply-extensionality
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("2"
                                                                                                                (case-replace
                                                                                                                 "tau8!1 = (# st := tau8!1`st, ex := tau8!1`ex #)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case-replace
                                                                                                                     "tau8!2 = (# st := tau8!2`st, ex := tau8!2`ex #)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -11
                                                                                               "s!1"
                                                                                               "sigma!2"
                                                                                               "sigma1!2"
                                                                                               "sigma2!2"
                                                                                               "m1!3"
                                                                                               "m2!3")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "up?(ex(tau1!2)) AND Null?(a!2)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split
                                                                       -28)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -12)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             -6
                                                             "s!1"
                                                             "sigma!2"
                                                             "sigma1!2"
                                                             "sigma2!2"
                                                             "m1!3"
                                                             "m2!3")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "s!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!3"
                                               "m2!3")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_expr" -2)
                      (("5" (rewrite "deriv_expr" -3)
                        (("5" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (use "well_founded?_product"
               ("ord1" "LAMBDA(i, j : nat) : i < j" "ord2"
                "LAMBDA(i, j : nat) : i < j"))
          (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   9788 4901 t shostak))
 (expr_determ_step2 0
  (expr_determ_step2-1 nil 3387107674 3388986012
   ("" (skosimp*)
    (("" (expand "deriv_expr")
      (("" (use "expr_determ_step")
        (("" (assert)
          (("" (inst?)
            (("" (assert)
              (("" (split -1)
                (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((deriv_expr const-decl "bool" Semantics nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil Semantics nil)
    (Expr type-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (expr_determ_step formula-decl nil Semantics nil))
   1259 1030 t shostak))
 (stmt_determ_step 0
  (stmt_determ_step-1 nil 3371194190 3388986013
   ("" (skosimp)
    ((""
      (lemma
       "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "s")
                  (("1" (skosimp*)
                    (("1" (hide -1 -2)
                      (("1" (rewrite "deriv_stmt" -1)
                        (("1" (rewrite "deriv_stmt" -2)
                          (("1" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "eval(IfThenElse1_var!1)(sigma!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -6
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -6
                                           "IfThenElse2_var!1"
                                           "sigma!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -5
                                       "(x!1`1 - 1, x!1`2 - 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -5
                                           "IfThenElse3_var!1"
                                           "sigma!1"
                                           "sigma1!1"
                                           "sigma2!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (hide -1 -2)
                      (("2" (rewrite "deriv_stmt" -1)
                        (("2" (rewrite "deriv_stmt" -2)
                          (("2" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -7 "(m1!1, m1!2)")
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -8
                                           "Sequence1_var!1"
                                           "sigma!1"
                                           "tau!1"
                                           "tau!2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -7
                                                 "(m2!1, m2!2)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -7
                                                     "Sequence2_var!1"
                                                     "tau!1"
                                                     "sigma1!1"
                                                     "sigma2!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (rewrite "deriv_stmt" -1)
                      (("3" (rewrite "deriv_stmt" -2)
                        (("3" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (use
                                   "expr_determ_step"
                                   ("n1" "x!1`1 - 1" "n2" "x!1`2 - 1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "v!1"
                                       "v!2"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred "m1!1")
                                              (("2"
                                                (typepred "m2!1")
                                                (("2"
                                                  (inst
                                                   -13
                                                   "(m1!1, m2!1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -13
                                                       "s!1"
                                                       "sigma!2"
                                                       "sigma1!2"
                                                       "sigma2!2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (rewrite "deriv_stmt" -1)
                      (("4" (rewrite "deriv_stmt" -2)
                        (("4" (flatten) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (rewrite "deriv_stmt" -1)
                      (("5" (rewrite "deriv_stmt" -2)
                        (("5" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (use
                                   "expr_determ_step"
                                   ("n1" "x!1`1 - 1" "n2" "x!1`2 - 1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "v!1"
                                       "v!2"
                                       "sigma1!1"
                                       "sigma2!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst -7 "(m1!1, m2!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -7
                                                   "s!1"
                                                   "sigma!2"
                                                   "sigma1!2"
                                                   "sigma2!2")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (skosimp*)
                    (("6" (rewrite "deriv_stmt" -1)
                      (("6" (rewrite "deriv_stmt" -2)
                        (("6" (case "up?(ex(sigma!1))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (skosimp*)
                    (("7" (hide -1 -2 -3)
                      (("7" (rewrite "deriv_stmt" -1)
                        (("7" (rewrite "deriv_stmt" -2)
                          (("7" (case "up?(ex(sigma!1))")
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst-cp -11 "(m1!1, m1!2)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -12
                                       "TryCatch1_var!1"
                                       "sigma!1"
                                       "tau1!1"
                                       "tau1!2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replace -12)
                                            (("2"
                                              (case "up?(ex(tau1!2))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst-cp
                                                   -12
                                                   "(m2!1, m2!2)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -13
                                                       "TryCatch2_var!1"
                                                       "tau1!2 WITH [ex := bottom]"
                                                       "tau2!1"
                                                       "tau2!2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -13)
                                                            (("1"
                                                              (inst
                                                               -12
                                                               "(m3!1, m3!2)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -12
                                                                   "TryCatch3_var!1"
                                                                   "tau2!2 WITH [ex := bottom]"
                                                                   "tau3!1"
                                                                   "tau3!2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "up?(ex(tau2!2))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "deriv_stmt"
                                                   -3)
                                                  (("2"
                                                    (rewrite
                                                     "deriv_stmt"
                                                     -8)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m3!1, m3!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "TryCatch3_var!1"
                                                               "tau2!2 WITH [ex := bottom]"
                                                               "tau3!1"
                                                               "tau3!2")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (skosimp*)
                    (("8" (hide -1)
                      (("8" (rewrite "deriv_stmt" -1)
                        (("8" (rewrite "deriv_stmt" -2)
                          (("8" (assert)
                            (("8" (case "up?(ex(sigma!1))")
                              (("1" (grind) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst -5 "(x!1`1 - 1, x!1`2 - 1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst -5 "sigma2!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (use "well_founded?_product"
             ("ord1" "LAMBDA(i, j : nat) : i < j" "ord2"
              "LAMBDA(i, j : nat) : i < j"))
        (("2" (use "wf_nat") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((wf_nat formula-decl nil naturalnumbers nil)
    (lift type-decl nil lift_adt nil) (list type-decl nil list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil))
   357 270 t shostak))
 (expr_determ 0
  (expr_determ-1 nil 3371191515 3388986015
   ("" (skosimp*)
    (("" (use "expr_determ_step")
      (("" (assert)
        (("" (expand "derives")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst -1 "n!2")
                (("" (inst?)
                  (("" (inst?)
                    (("" (assert)
                      (("" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (use "stmt_determ_step")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil))
   2735 2180 t shostak))
 (stmt_determ 0
  (stmt_determ-1 nil 3371193973 3388986018
   ("" (skosimp*)
    (("" (use "stmt_determ_step")
      (("" (expand "derives")
        (("" (skosimp*)
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((stmt_determ_step formula-decl nil Semantics nil)
    (FullState formal-type-decl nil Semantics nil)
    (FullProgram formal-type-decl nil Semantics nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (Stmt type-decl nil Stmt_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derives const-decl "bool" Semantics nil))
   2490 2130 t shostak)))
(SemanticsCommon
 (check_assertion_TCC1 0
  (check_assertion_TCC1-1 nil 3385977476 3388986018
   ("" (subtype-tcc) nil nil) proved nil 20 20 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3385977476 3388986018
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   49 40 t nil))
 (execute_CaseJML_TCC2 0
  (execute_CaseJML_TCC2-1 nil 3385977476 3388986018
   ("" (expand "execute_CaseJML_type")
    (("" (skosimp) (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (execute_CaseJML_type const-decl "bool" SemanticsTypes nil))
   174 80 t nil)))
(ProgramSemantics
 (execute_set_TCC1 0
  (execute_set_TCC1-1 nil 3385977480 3388986018
   ("" (subtype-tcc) nil nil) proved
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (execute_set_type const-decl "bool" SemanticsTypes nil))
   186 100 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3385977480 3388986018
   ("" (subtype-tcc) nil nil) proved
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (execute_CaseJML_type const-decl "bool" SemanticsTypes nil))
   193 90 nil nil))
 (on_method_x_TCC1 0
  (on_method_x_TCC1-1 nil 3385977480 3388986019
   ("" (subtype-tcc) nil nil) unfinished
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (on_method_entry_type const-decl "bool" SemanticsTypes nil))
   262 170 nil nil))
 (on_method_x_TCC2 0
  (on_method_x_TCC2-1 nil 3388983330 3388986019
   ("" (subtype-tcc) nil nil) proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (on_method_entry_type const-decl "bool" SemanticsTypes nil))
   212 100 nil nil))
 (IMP_Semantics_TCC1 0
  (IMP_Semantics_TCC1-1 nil 3385977480 3388986019
   ("" (subtype-tcc) nil nil) proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil))
   62 50 nil nil))
 (IMP_Semantics_TCC2 0
  (IMP_Semantics_TCC2-1 nil 3385977480 3388986019
   ("" (subtype-tcc) nil nil) unfinished
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (on_method_x const-decl "(on_method_entry_type)" ProgramSemantics
     nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (on_method_exit_type const-decl "bool" SemanticsTypes nil))
   447 240 nil nil)))
(AnnotatedProgramSemantics
 (update_state_AP_TCC1 0
  (update_state_AP_TCC1-1 nil 3387107674 3388918947
   ("" (subtype-tcc) nil nil) unchecked
   ((APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil))
   122 50 nil nil))
 (execute_set_AP_TCC1 0
  (execute_set_AP_TCC1-1 nil 3387107674 3388918947
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   53 50 nil nil))
 (execute_set_AP_TCC2 0
  (execute_set_AP_TCC2-1 nil 3387107674 3388986686
   ("" (expand "execute_set_type")
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (execute_set_type const-decl "bool" SemanticsTypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   16716 100 t nil))
 (on_method_entry_AP_TCC1 0
  (on_method_entry_AP_TCC1-1 nil 3387107674 3388918948
   ("" (subtype-tcc) nil nil) unfinished nil 498 410 nil nil))
 (on_method_entry_AP_TCC2 0
  (on_method_entry_AP_TCC2-1 nil 3387107674 3388918948
   ("" (subtype-tcc) nil nil) unfinished nil 327 230 nil nil))
 (on_method_entry_AP_TCC3 0
  (on_method_entry_AP_TCC3-1 nil 3387107674 3388918949
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (update_state_AP const-decl "(update_FullState_type)"
     AnnotatedProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsCommon nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   978 820 nil nil))
 (on_method_entry_AP_TCC4 0
  (on_method_entry_AP_TCC4-1 nil 3387107674 3388918950
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (update_state_AP const-decl "(update_FullState_type)"
     AnnotatedProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsCommon nil)
    (on_method_entry_type const-decl "bool" SemanticsTypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   644 490 nil nil))
 (on_method_exit_normal_AP_TCC1 0
  (on_method_exit_normal_AP_TCC1-1 nil 3387107674 3388918951
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   250 240 nil nil))
 (on_method_exit_normal_AP_TCC2 0
  (on_method_exit_normal_AP_TCC2-1 nil 3387107674 3388918951
   ("" (subtype-tcc) nil nil) unfinished nil 597 470 nil nil))
 (on_method_exit_normal_AP_TCC3 0
  (on_method_exit_normal_AP_TCC3-1 nil 3387107674 3388918952
   ("" (subtype-tcc) nil nil) unfinished nil 340 260 nil nil))
 (on_method_exit_normal_AP_TCC4 0
  (on_method_exit_normal_AP_TCC4-1 nil 3387107674 3388918953
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (update_state_AP const-decl "(update_FullState_type)"
     AnnotatedProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsCommon nil)
    (on_method_exit_type const-decl "bool" SemanticsTypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   1077 830 nil nil))
 (on_method_exit_exceptional_AP_TCC1 0
  (on_method_exit_exceptional_AP_TCC1-1 nil 3387107674 3388918954
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   191 180 nil nil))
 (on_method_exit_exceptional_AP_TCC2 0
  (on_method_exit_exceptional_AP_TCC2-1 nil 3387107674 3388918955
   ("" (subtype-tcc) nil nil) unfinished nil 495 360 nil nil))
 (on_method_exit_exceptional_AP_TCC3 0
  (on_method_exit_exceptional_AP_TCC3-1 nil 3387107674 3388918955
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (update_state_AP const-decl "(update_FullState_type)"
     AnnotatedProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsCommon nil)
    (on_method_exit_type const-decl "bool" SemanticsTypes nil))
   252 180 nil nil))
 (initial_AP_state_TCC1 0
  (initial_AP_state_TCC1-1 nil 3385977481 3388918955
   ("" (subtype-tcc) nil nil) unchecked nil 46 50 nil nil))
 (stmt_determ_step_AP 0
  (stmt_determ_step_AP-1 nil 3388913620 3388918955
   ("" (postpone) nil nil) unfinished nil 7 0 t shostak))
 (wf_update_state_AP 0
  (wf_update_state_AP-1 nil 3387169852 3388918960
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (prop)
        (("1" (expand "wf_state")
          (("1" (hide -3)
            (("1" (skolem!)
              (("1" (inst?) (("1" (inst?) (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem!)
          (("2" (inst?)
            (("2" (inst?) (("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (is_declared_as_ghost const-decl "boolean" WellFormedProgram nil)
    (is_ghost const-decl "boolean" AnnotatedProgramSemantics nil)
    (is_field const-decl "boolean" State nil)
    (is_declared_as_local const-decl "boolean" WellFormedProgram nil)
    (is_local const-decl "boolean" State nil)
    (is_declared_as_field const-decl "boolean" WellFormedProgram nil)
    (is_local const-decl "boolean" SemanticsCommon nil)
    (is_field const-decl "boolean" SemanticsCommon nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil)
    (update_state_AP const-decl "(update_FullState_type)"
     AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil AnnotatedProgramSemantics nil))
   4722 4400 t shostak)))

