(Evaluation
 (eval_TCC1 0
  (eval_TCC1-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   90 90 nil nil))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   126 100 nil nil))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   95 90 nil nil))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   130 100 nil nil))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   94 100 nil nil))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   92 90 nil nil))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   129 90 nil nil))
 (eval_TCC8 0
  (eval_TCC8-1 nil 3371189456 3391166485 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   100 100 nil nil))
 (eval_TCC9 0
  (eval_TCC9-1 nil 3371189456 3391166485 ("" (subtype-tcc) nil nil)
   proved ((/= const-decl "boolean" notequal nil)) 98 70 nil nil))
 (eval_TCC10 0
  (eval_TCC10-1 nil 3371189456 3391166486
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   94 90 nil nil))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3371189456 3391166486
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   95 90 nil nil))
 (eval_TCC12 0
  (eval_TCC12-1 nil 3371189456 3391166486
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   135 100 nil nil))
 (eval_TCC13 0
  (eval_TCC13-1 nil 3371189456 3391166486
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   95 90 nil nil))
 (eval_TCC14 0
  (eval_TCC14-1 nil 3371189456 3391166486
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   129 100 nil nil))
 (eval_TCC15 0
  (eval_TCC15-1 nil 3390732272 3391166486 ("" (subtype-tcc) nil nil)
   proved nil 52 50 nil nil)))
(SemanticsTypes)
(SemanticsJMLTypes)
(Semantics
 (update_stack_TCC1 0
  (update_stack_TCC1-1 nil 3390908871 3391167339
   ("" (skosimp*)
    (("" (typepred "lvds!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (assert) (("3" (inst 1 "l!2") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (JType type-decl nil JType_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-decl nil Val_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (defined? const-decl "boolean" ValProp nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (nonempty? const-decl "bool" sets nil))
   421015 8580 t nil))
 (deriv_expr_TCC1 0
  (deriv_expr_TCC1-1 nil 3371191509 3391166486
   ("" (skosimp) (("" (assert) nil nil)) nil) unchecked nil 85 60 t
   nil))
 (deriv_expr_TCC2 0
  (deriv_expr_TCC2-1 nil 3371191509 3391166486
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 96 90 t
   nil))
 (deriv_expr_TCC3 0
  (deriv_expr_TCC3-1 nil 3371191509 3391166486
   ("" (subtype-tcc) nil nil) unchecked nil 66 60 nil nil))
 (deriv_expr_TCC4 0
  (deriv_expr_TCC4-1 nil 3371191509 3391166486
   ("" (termination-tcc) nil nil) unchecked nil 80 80 nil nil))
 (deriv_expr_TCC5 0
  (deriv_expr_TCC5-1 nil 3371191509 3391166487
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   564 520 nil nil))
 (deriv_expr_TCC6 0
  (deriv_expr_TCC6-1 nil 3371191509 3391166487
   ("" (subtype-tcc) nil nil) unchecked nil 92 90 nil nil))
 (deriv_expr_TCC7 0
  (deriv_expr_TCC7-1 nil 3371191509 3391166488
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   798 740 nil nil))
 (deriv_expr_TCC8 0
  (deriv_expr_TCC8-1 nil 3371191509 3391166489
   ("" (skosimp*) (("" (replace -4 2) (("" (assert) nil nil)) nil))
    nil)
   unchecked nil 643 610 t nil))
 (deriv_expr_TCC9 0
  (deriv_expr_TCC9-1 nil 3371191509 3391166489
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   918 860 nil nil))
 (deriv_expr_TCC10 0
  (deriv_expr_TCC10-1 nil 3371191509 3391166490
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1026 940 nil nil))
 (deriv_expr_TCC11 0
  (deriv_expr_TCC11-1 nil 3371191509 3391166491
   ("" (subtype-tcc) nil nil) unchecked nil 354 350 nil nil))
 (deriv_expr_TCC12 0
  (deriv_expr_TCC12-1 nil 3371191509 3391166492
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1174 1050 nil nil))
 (deriv_expr_TCC13 0
  (deriv_expr_TCC13-1 nil 3371191509 3391166493
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 755 680 t
   nil))
 (deriv_expr_TCC14 0
  (deriv_expr_TCC14-1 nil 3390110778 3391166495
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   1961 1780 nil nil))
 (deriv_expr_TCC15 0
  (deriv_expr_TCC15-1 nil 3390110778 3391166497
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   2041 1850 nil nil))
 (deriv_expr_TCC16 0
  (deriv_expr_TCC16-1 nil 3390110778 3391166499
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   2133 1940 nil nil))
 (deriv_expr_TCC17 0
  (deriv_expr_TCC17-1 nil 3390110778 3391166501
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   2105 1900 nil nil))
 (deriv_stmt_TCC1 0
  (deriv_stmt_TCC1-1 nil 3371191509 3391166502
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 490 450 t
   nil))
 (deriv_stmt_TCC2 0
  (deriv_stmt_TCC2-1 nil 3371191509 3391166502
   ("" (termination-tcc) nil nil) unchecked nil 919 840 nil nil))
 (deriv_stmt_TCC3 0
  (deriv_stmt_TCC3-1 nil 3371191509 3391166505
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_expr def-decl "bool" Semantics nil))
   2078 1900 nil nil))
 (deriv_stmt_TCC4 0
  (deriv_stmt_TCC4-1 nil 3371191509 3391166506
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1324 1200 nil nil))
 (deriv_stmt_TCC5 0
  (deriv_stmt_TCC5-1 nil 3371191509 3391166507
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   984 870 nil nil))
 (deriv_stmt_TCC6 0
  (deriv_stmt_TCC6-1 nil 3371191509 3391166508
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   693 630 nil nil))
 (deriv_stmt_TCC7 0
  (deriv_stmt_TCC7-1 nil 3371191509 3391166508
   ("" (subtype-tcc) nil nil) unchecked nil 423 430 nil nil))
 (deriv_stmt_TCC8 0
  (deriv_stmt_TCC8-1 nil 3371191509 3391166509
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   997 880 nil nil))
 (deriv_stmt_TCC9 0
  (deriv_stmt_TCC9-1 nil 3371191509 3391166510
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1406 1260 nil nil))
 (deriv_stmt_TCC10 0
  (deriv_stmt_TCC10-1 nil 3371191509 3391166512
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1392 1270 nil nil))
 (deriv_stmt_TCC11 0
  (deriv_stmt_TCC11-1 nil 3371191509 3391166513
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1072 960 nil nil))
 (deriv_stmt_TCC12 0
  (deriv_stmt_TCC12-1 nil 3371191509 3391166513
   ("" (subtype-tcc) nil nil) unchecked nil 427 430 nil nil)))
(SemanticsProofs
 (expr_determ_step 0
  (expr_determ_step-2 nil 3390559431 3391166688
   ("" (skosimp)
    (("" (expand "deriv_expr")
      ((""
        (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "e")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_expr" -2)
                      (("1" (rewrite "deriv_expr" -3)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "Assign2_var!1"
                                       "v1!1"
                                       "v2!1"
                                       "sigma!1"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -8)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "up?(ex(pstate(tau!2)))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!1"
                                               "m2!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (rewrite "deriv_expr" -2)
                    (("2" (rewrite "deriv_expr" -3)
                      (("2" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (hide -1 -2 -3)
                    (("3" (rewrite "deriv_expr" -2)
                      (("3" (rewrite "deriv_expr" -3)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -10 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -11
                                     "CondExpr1_var!1"
                                     "v1!2"
                                     "v1!3"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -11)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -8)
                                                  (("1"
                                                    (split -8)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -14
                                                           "(m2!1, m2!2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -14
                                                               "CondExpr2_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -14)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -8
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m2!1, m2!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "CondExpr3_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -13)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             -3
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2"
                                             "m1!3"
                                             "m2!3")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (hide -1 -2)
                    (("4" (rewrite "deriv_expr" -2)
                      (("4" (rewrite "deriv_expr" -3)
                        (("4" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -28 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -29
                                     "MethodCall1_var!1"
                                     "a!1"
                                     "a!2"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (replace -15)
                                          (("2"
                                            (split -29)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (inst-cp
                                                       -31
                                                       "(m2!1, m2!2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -32
                                                           "MethodCall3_var!1"
                                                           "pv!1"
                                                           "pv!2"
                                                           "tau1!2"
                                                           "tau2!1"
                                                           "tau2!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -32)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (replace

                                                                       -2)
                                                                      (("1"
                                                                        (replace

                                                                         -3)
                                                                        (("1"
                                                                          (lift-if
                                                                           -11)
                                                                          (("1"
                                                                            (split
                                                                             -11)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace

                                                                                   -3
                                                                                   :dir

                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace

                                                                                     -26)
                                                                                    (("1"
                                                                                      (split
                                                                                       -14)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace

                                                                                             -2
                                                                                             :dir

                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace

                                                                                               -28)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "on_method_entry_deterministic")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p!1"
                                                                                                   "md!1"
                                                                                                   "a!2"
                                                                                                   "tau3!1"
                                                                                                   "tau4!1"
                                                                                                   "tau4!2"
                                                                                                   "m3!1"
                                                                                                   "m3!2"
                                                                                                   " LAMBDA (k: upto(m3!1))(p_1: FullProgram)
                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                   (m_1: below(k)):
                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (k_1: upto(m3!1))(p_2: FullProgram)
                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                    sigma2_2: FullState)
                                                                                   (m_2: below(k_1)):
                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                (s: Stmt[Name],
                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                (m_1: below(m_2)):
                                                                                           deriv_stmt
                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                   " LAMBDA (k: upto(m3!2))(p_1: FullProgram)
                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                   (m_1: below(k)):
                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (k_1: upto(m3!2))(p_2: FullProgram)
                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                    sigma2_2: FullState)
                                                                                   (m_2: below(k_1)):
                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                (s: Stmt[Name],
                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                (m_1: below(m_2)):
                                                                                           deriv_stmt
                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace

                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace

                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace

                                                                                                               -19
                                                                                                               :dir

                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (replace

                                                                                                                 -32)
                                                                                                                (("1"
                                                                                                                  (replace

                                                                                                                   -20
                                                                                                                   :dir

                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (replace

                                                                                                                     -33)
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -14
                                                                                                                       "body(md!1)"
                                                                                                                       "tau5!1"
                                                                                                                       "tau6!1"
                                                                                                                       "tau6!2"
                                                                                                                       "m4!1"
                                                                                                                       "m4!2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace

                                                                                                                               -15)
                                                                                                                              (("1"
                                                                                                                                (replace

                                                                                                                                 -16)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -24)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (replace

                                                                                                                                           -2
                                                                                                                                           :dir

                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (replace

                                                                                                                                             -40)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -28)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "on_method_exit_normal_deterministic")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p!1"
                                                                                                                                                       "md!1"
                                                                                                                                                       "a!2"
                                                                                                                                                       "tau7!2"
                                                                                                                                                       "tau8!1"
                                                                                                                                                       "tau8!2"
                                                                                                                                                       "m6!1"
                                                                                                                                                       "m6!2"
                                                                                                                                                       " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                       " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace

                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace

                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -32)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -49
                                                                                                                                                               "(m1!3, m2!3)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -49
                                                                                                                                                                   "c!1"
                                                                                                                                                                   "v1!2"
                                                                                                                                                                   "v2!2"
                                                                                                                                                                   "sigma!2"
                                                                                                                                                                   "sigma1!2"
                                                                                                                                                                   "sigma2!2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       -49)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -24
                                                                                                                                                                           "c!2"
                                                                                                                                                                           "sigma!3"
                                                                                                                                                                           "sigma1!3"
                                                                                                                                                                           "sigma2!3"
                                                                                                                                                                           "m1!4"
                                                                                                                                                                           "m2!4")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               -22
                                                                                                                                                               "c!1"
                                                                                                                                                               "sigma!2"
                                                                                                                                                               "sigma1!2"
                                                                                                                                                               "sigma2!2"
                                                                                                                                                               "m1!3"
                                                                                                                                                               "m2!3")
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "on_method_exit_exceptional_deterministic")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p!1"
                                                                                                                                                       "md!1"
                                                                                                                                                       "a!2"
                                                                                                                                                       "tau7!2"
                                                                                                                                                       "tau8!1"
                                                                                                                                                       "tau8!2"
                                                                                                                                                       "m6!1"
                                                                                                                                                       "m6!2"
                                                                                                                                                       " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                       " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -31)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -48
                                                                                                                                                               "(m1!3, m2!3)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -48
                                                                                                                                                                   "c!1"
                                                                                                                                                                   "v1!2"
                                                                                                                                                                   "v2!2"
                                                                                                                                                                   "sigma!2"
                                                                                                                                                                   "sigma1!2"
                                                                                                                                                                   "sigma2!2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       -48)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -23
                                                                                                                                                                           "c!2"
                                                                                                                                                                           "sigma!3"
                                                                                                                                                                           "sigma1!3"
                                                                                                                                                                           "sigma2!3"
                                                                                                                                                                           "m1!4"
                                                                                                                                                                           "m2!4")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               -21
                                                                                                                                                               "c!1"
                                                                                                                                                               "sigma!2"
                                                                                                                                                               "sigma1!2"
                                                                                                                                                               "sigma2!2"
                                                                                                                                                               "m1!3"
                                                                                                                                                               "m2!3")
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (inst-cp
                                                                                                                                         -41
                                                                                                                                         "(m5!1, m5!2)")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -42
                                                                                                                                             "res(md!1)"
                                                                                                                                             "w!1"
                                                                                                                                             "w!2"
                                                                                                                                             "tau6!2"
                                                                                                                                             "tau7!1"
                                                                                                                                             "tau7!2")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 -42)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace

                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace

                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace

                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -28)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "on_method_exit_normal_deterministic")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p!1"
                                                                                                                                                                     "md!1"
                                                                                                                                                                     "a!2"
                                                                                                                                                                     "tau7!2"
                                                                                                                                                                     "tau8!1"
                                                                                                                                                                     "tau8!2"
                                                                                                                                                                     "m6!1"
                                                                                                                                                                     "m6!2"
                                                                                                                                                                     " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                     " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -32)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -47
                                                                                                                                                                             "(m1!3, m2!3)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -47
                                                                                                                                                                                 "c!1"
                                                                                                                                                                                 "v1!2"
                                                                                                                                                                                 "v2!2"
                                                                                                                                                                                 "sigma!2"
                                                                                                                                                                                 "sigma1!2"
                                                                                                                                                                                 "sigma2!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -47)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -24
                                                                                                                                                                                         "c!2"
                                                                                                                                                                                         "sigma!3"
                                                                                                                                                                                         "sigma1!3"
                                                                                                                                                                                         "sigma2!3"
                                                                                                                                                                                         "m1!4"
                                                                                                                                                                                         "m2!4")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst
                                                                                                                                                                             -22
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2"
                                                                                                                                                                             "m1!3"
                                                                                                                                                                             "m2!3")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "on_method_exit_exceptional_deterministic")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p!1"
                                                                                                                                                                     "md!1"
                                                                                                                                                                     "a!2"
                                                                                                                                                                     "tau7!2"
                                                                                                                                                                     "tau8!1"
                                                                                                                                                                     "tau8!2"
                                                                                                                                                                     "m6!1"
                                                                                                                                                                     "m6!2"
                                                                                                                                                                     " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                     " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -31)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -46
                                                                                                                                                                             "(m1!3, m2!3)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -46
                                                                                                                                                                                 "c!1"
                                                                                                                                                                                 "v1!2"
                                                                                                                                                                                 "v2!2"
                                                                                                                                                                                 "sigma!2"
                                                                                                                                                                                 "sigma1!2"
                                                                                                                                                                                 "sigma2!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -46)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -23
                                                                                                                                                                                         "c!2"
                                                                                                                                                                                         "sigma!3"
                                                                                                                                                                                         "sigma1!3"
                                                                                                                                                                                         "sigma2!3"
                                                                                                                                                                                         "m1!4"
                                                                                                                                                                                         "m2!4")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst
                                                                                                                                                                             -21
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2"
                                                                                                                                                                             "m1!3"
                                                                                                                                                                             "m2!3")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -17
                                                                                                                                                     "c!1"
                                                                                                                                                     "sigma!2"
                                                                                                                                                     "sigma1!2"
                                                                                                                                                     "sigma2!2"
                                                                                                                                                     "m1!3"
                                                                                                                                                     "m2!3")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -39
                                                                                                           "(m1!3, m2!3)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -39
                                                                                                               "c!1"
                                                                                                               "v1!2"
                                                                                                               "v2!2"
                                                                                                               "sigma!2"
                                                                                                               "sigma1!2"
                                                                                                               "sigma2!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -39)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -16
                                                                                                                       "c!2"
                                                                                                                       "sigma!3"
                                                                                                                       "sigma1!3"
                                                                                                                       "sigma2!3"
                                                                                                                       "m1!4"
                                                                                                                       "m2!4")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -14
                                                                                                           "c!1"
                                                                                                           "sigma!2"
                                                                                                           "sigma1!2"
                                                                                                           "sigma2!2"
                                                                                                           "m1!3"
                                                                                                           "m2!3")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   -24)
                                                                                  (("2"
                                                                                    (split
                                                                                     -24)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace

                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace

                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -13)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace

                                                                                                   -2
                                                                                                   :dir

                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace

                                                                                                       -26)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "on_method_entry_deterministic")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p!1"
                                                                                                           "md!1"
                                                                                                           "a!2"
                                                                                                           "tau3!1"
                                                                                                           "tau4!1"
                                                                                                           "tau4!2"
                                                                                                           "m3!1"
                                                                                                           "m3!2"
                                                                                                           " LAMBDA (k: upto(m3!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                           "LAMBDA (k_1: upto(m3!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                           " LAMBDA (k: upto(m3!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                           "LAMBDA (k_1: upto(m3!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (replace

                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace

                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (replace

                                                                                                                       -19
                                                                                                                       :dir

                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace

                                                                                                                         -31)
                                                                                                                        (("1"
                                                                                                                          (replace

                                                                                                                           -18
                                                                                                                           :dir

                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace

                                                                                                                             -30)
                                                                                                                            (("1"
                                                                                                                              (inst-cp
                                                                                                                               -13
                                                                                                                               "body(md!1)"
                                                                                                                               "tau5!1"
                                                                                                                               "tau6!1"
                                                                                                                               "tau6!2"
                                                                                                                               "m4!1"
                                                                                                                               "m4!2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace

                                                                                                                                       -14)
                                                                                                                                      (("1"
                                                                                                                                        (replace

                                                                                                                                         -15)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -23)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (replace

                                                                                                                                                   -2
                                                                                                                                                   :dir

                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace

                                                                                                                                                     -38)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace

                                                                                                                                                       -37)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -26)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "on_method_exit_normal_deterministic")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "p!1"
                                                                                                                                                                 "md!1"
                                                                                                                                                                 "a!2"
                                                                                                                                                                 "tau7!2"
                                                                                                                                                                 "tau8!1"
                                                                                                                                                                 "tau8!2"
                                                                                                                                                                 "m6!1"
                                                                                                                                                                 "m6!2"
                                                                                                                                                                 " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                 " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -30)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -46
                                                                                                                                                                         "(m1!3, m2!3)")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -46
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "v1!2"
                                                                                                                                                                             "v2!2"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -46)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -23
                                                                                                                                                                                     "c!2"
                                                                                                                                                                                     "sigma!3"
                                                                                                                                                                                     "sigma1!3"
                                                                                                                                                                                     "sigma2!3"
                                                                                                                                                                                     "m1!4"
                                                                                                                                                                                     "m2!4")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (inst
                                                                                                                                                                         -21
                                                                                                                                                                         "c!1"
                                                                                                                                                                         "sigma!2"
                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                         "sigma2!2"
                                                                                                                                                                         "m1!3"
                                                                                                                                                                         "m2!3")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "on_method_exit_exceptional_deterministic")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "p!1"
                                                                                                                                                                 "md!1"
                                                                                                                                                                 "a!2"
                                                                                                                                                                 "tau7!2"
                                                                                                                                                                 "tau8!1"
                                                                                                                                                                 "tau8!2"
                                                                                                                                                                 "m6!1"
                                                                                                                                                                 "m6!2"
                                                                                                                                                                 " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                 " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (split
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -29)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -45
                                                                                                                                                                         "(m1!3, m2!3)")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -45
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "v1!2"
                                                                                                                                                                             "v2!2"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -45)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -22
                                                                                                                                                                                     "c!2"
                                                                                                                                                                                     "sigma!3"
                                                                                                                                                                                     "sigma1!3"
                                                                                                                                                                                     "sigma2!3"
                                                                                                                                                                                     "m1!4"
                                                                                                                                                                                     "m2!4")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (inst
                                                                                                                                                                         -20
                                                                                                                                                                         "c!1"
                                                                                                                                                                         "sigma!2"
                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                         "sigma2!2"
                                                                                                                                                                         "m1!3"
                                                                                                                                                                         "m2!3")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst-cp
                                                                                                                                                 -39
                                                                                                                                                 "(m5!1, m5!2)")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -40
                                                                                                                                                     "res(md!1)"
                                                                                                                                                     "w!1"
                                                                                                                                                     "w!2"
                                                                                                                                                     "tau6!2"
                                                                                                                                                     "tau7!1"
                                                                                                                                                     "tau7!2")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -40)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace

                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace

                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace

                                                                                                                                                                 -3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -27)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "on_method_exit_normal_deterministic")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p!1"
                                                                                                                                                                             "md!1"
                                                                                                                                                                             "a!2"
                                                                                                                                                                             "tau7!2"
                                                                                                                                                                             "tau8!1"
                                                                                                                                                                             "tau8!2"
                                                                                                                                                                             "m6!1"
                                                                                                                                                                             "m6!2"
                                                                                                                                                                             " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                             " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       -31)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -45
                                                                                                                                                                                     "(m1!3, m2!3)")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -45
                                                                                                                                                                                         "c!1"
                                                                                                                                                                                         "v1!2"
                                                                                                                                                                                         "v2!2"
                                                                                                                                                                                         "sigma!2"
                                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                                         "sigma2!2")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -45)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -23
                                                                                                                                                                                                 "c!2"
                                                                                                                                                                                                 "sigma!3"
                                                                                                                                                                                                 "sigma1!3"
                                                                                                                                                                                                 "sigma2!3"
                                                                                                                                                                                                 "m1!4"
                                                                                                                                                                                                 "m2!4")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -21
                                                                                                                                                                                     "c!1"
                                                                                                                                                                                     "sigma!2"
                                                                                                                                                                                     "sigma1!2"
                                                                                                                                                                                     "sigma2!2"
                                                                                                                                                                                     "m1!3"
                                                                                                                                                                                     "m2!3")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "on_method_exit_exceptional_deterministic")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p!1"
                                                                                                                                                                             "md!1"
                                                                                                                                                                             "a!2"
                                                                                                                                                                             "tau7!2"
                                                                                                                                                                             "tau8!1"
                                                                                                                                                                             "tau8!2"
                                                                                                                                                                             "m6!1"
                                                                                                                                                                             "m6!2"
                                                                                                                                                                             " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                             " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       -30)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -44
                                                                                                                                                                                     "(m1!3, m2!3)")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -44
                                                                                                                                                                                         "c!1"
                                                                                                                                                                                         "v1!2"
                                                                                                                                                                                         "v2!2"
                                                                                                                                                                                         "sigma!2"
                                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                                         "sigma2!2")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -44)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -22
                                                                                                                                                                                                 "c!2"
                                                                                                                                                                                                 "sigma!3"
                                                                                                                                                                                                 "sigma1!3"
                                                                                                                                                                                                 "sigma2!3"
                                                                                                                                                                                                 "m1!4"
                                                                                                                                                                                                 "m2!4")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -20
                                                                                                                                                                                     "c!1"
                                                                                                                                                                                     "sigma!2"
                                                                                                                                                                                     "sigma1!2"
                                                                                                                                                                                     "sigma2!2"
                                                                                                                                                                                     "m1!3"
                                                                                                                                                                                     "m2!3")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -16
                                                                                                                                                             "c!1"
                                                                                                                                                             "sigma!2"
                                                                                                                                                             "sigma1!2"
                                                                                                                                                             "sigma2!2"
                                                                                                                                                             "m1!3"
                                                                                                                                                             "m2!3")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -37
                                                                                                                   "(m1!3, m2!3)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -37
                                                                                                                       "c!1"
                                                                                                                       "v1!2"
                                                                                                                       "v2!2"
                                                                                                                       "sigma!2"
                                                                                                                       "sigma1!2"
                                                                                                                       "sigma2!2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -37)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -15
                                                                                                                               "c!2"
                                                                                                                               "sigma!3"
                                                                                                                               "sigma1!3"
                                                                                                                               "sigma2!3"
                                                                                                                               "m1!4"
                                                                                                                               "m2!4")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -13
                                                                                                                   "c!1"
                                                                                                                   "sigma!2"
                                                                                                                   "sigma1!2"
                                                                                                                   "sigma2!2"
                                                                                                                   "m1!3"
                                                                                                                   "m2!3")
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "c!1"
                                                                   "sigma!2"
                                                                   "sigma1!2"
                                                                   "sigma2!2"
                                                                   "m1!3"
                                                                   "m2!3")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!3"
                                                 "m2!3")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skosimp*)
                  (("5" (rewrite "deriv_expr" -2)
                    (("5" (rewrite "deriv_expr" -3)
                      (("5" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (rewrite "deriv_expr" -2)
                    (("6" (rewrite "deriv_expr" -3)
                      (("6" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "well_founded?_product")
          (("2"
            (inst -1 "LAMBDA(x, y : nat) : x < y"
             "LAMBDA(x, y : nat) : x < y")
            (("2" (assert)
              (("2" (use "wf_nat") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((deriv_expr const-decl "bool" Semantics nil)
    (well_founded?_product formula-decl nil WF nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (on_method_exit_normal_deterministic formula-decl nil
     SemanticsProofs nil)
    (on_method_exit_exceptional_deterministic formula-decl nil
     SemanticsProofs nil)
    (on_method_entry_deterministic formula-decl nil SemanticsProofs
     nil)
    (CondExpr adt-constructor-decl
     "[[Expr, Expr, Expr] -> (CondExpr?)]" Expr_adt nil)
    (CondExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BoolExpr type-decl nil BoolExpr_adt nil)
    (BExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BExpr adt-constructor-decl "[BoolExpr -> (BExpr?)]" Expr_adt nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Expr_adt
     nil)
    (Assign? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (Expr_induction formula-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil) (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Stmt type-decl nil Stmt_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   174434 164630 t nil)
  (expr_determ_step-1 nil 3390558045 nil
   ("" (skosimp)
    (("" (expand "deriv_expr")
      ((""
        (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (split -1)
          (("1" (propax) nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "e")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_expr" -2)
                      (("1" (rewrite "deriv_expr" -3)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "Assign2_var!1"
                                       "v1!1"
                                       "v2!1"
                                       "sigma!1"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -8)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "up?(ex(pstate(tau!2)))")
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (assert)
                                                  nil)))))))
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!1"
                                               "m2!1")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))
                                   ("2" (assert) nil)
                                   ("3" (assert) nil)))))))))))))))))))
                 ("2" (skosimp*)
                  (("2" (rewrite "deriv_expr" -2)
                    (("2" (rewrite "deriv_expr" -3)
                      (("2" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (assert) nil)))))))))))))
                 ("3" (skosimp*)
                  (("3" (hide -1 -2 -3)
                    (("3" (rewrite "deriv_expr" -2)
                      (("3" (rewrite "deriv_expr" -3)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -10 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -11
                                     "CondExpr1_var!1"
                                     "v1!2"
                                     "v1!3"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -11)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -8)
                                                  (("1"
                                                    (split -8)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -14
                                                           "(m2!1, m2!2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -14
                                                               "CondExpr2_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -14)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -8
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m2!1, m2!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "CondExpr3_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -13)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             -3
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2"
                                             "m1!3"
                                             "m2!3")
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))))
                 ("4" (skosimp*)
                  (("4" (hide -1 -2)
                    (("4" (rewrite "deriv_expr" -2)
                      (("4" (rewrite "deriv_expr" -3)
                        (("4" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -26 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -27
                                     "MethodCall1_var!1"
                                     "a!1"
                                     "a!2"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -27)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst-cp
                                                 -29
                                                 "(m2!1, m2!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -30
                                                     "MethodCall3_var!1"
                                                     "pv!1"
                                                     "pv!2"
                                                     "tau1!2"
                                                     "tau2!1"
                                                     "tau2!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -30)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (replace

                                                                 -2)
                                                                (("1"
                                                                  (lift-if
                                                                   -11)
                                                                  (("1"
                                                                    (split
                                                                     -11)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace

                                                                           -3
                                                                           :dir

                                                                           rl)
                                                                          (("1"
                                                                            (replace

                                                                             -25)
                                                                            (("1"
                                                                              (split
                                                                               -14)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace

                                                                                     -2
                                                                                     :dir

                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace

                                                                                       -27)
                                                                                      (("1"
                                                                                        (comment
                                                                                         "here we should use a lemma about on_method_entry")
                                                                                        (("1"
                                                                                          (case
                                                                                           "tau4!1 = tau4!2")
                                                                                          (("1"
                                                                                            (replace

                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace

                                                                                               -18
                                                                                               :dir

                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace

                                                                                                 -30)
                                                                                                (("1"
                                                                                                  (replace

                                                                                                   -19
                                                                                                   :dir

                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace

                                                                                                     -31)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -13
                                                                                                       "body(md!1)"
                                                                                                       "tau5!1"
                                                                                                       "tau6!1"
                                                                                                       "tau6!2"
                                                                                                       "m4!1"
                                                                                                       "m4!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace

                                                                                                               -13)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -22)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (replace

                                                                                                                         -2
                                                                                                                         :dir

                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (replace

                                                                                                                           -36)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -25)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (comment
                                                                                                                                   "lemma about on_method_exit_normal needed")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "tau8!1 = tau8!2")
                                                                                                                                    (("1"
                                                                                                                                      (replace

                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace

                                                                                                                                         -28
                                                                                                                                         :dir

                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (postpone)
                                                                                                                                            nil)))))))
                                                                                                                                     ("2"
                                                                                                                                      (postpone)
                                                                                                                                      nil)))))))))
                                                                                                                             ("2"
                                                                                                                              (postpone)
                                                                                                                              nil)))))))))))))
                                                                                                                 ("2"
                                                                                                                  (postpone)
                                                                                                                  nil)))))))))))))))))))))))
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (postpone)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (postpone)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (postpone)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (postpone)
                                          nil)))))))))))))))))))))))))
                 ("5" (postpone) nil) ("6" (postpone) nil)))))))))
         ("2" (postpone) nil))))))
    nil)
   unfinished nil nil nil nil nil))
 (stmt_determ_step 0
  (stmt_determ_step-1 nil 3390558061 3391166704
   ("" (skosimp)
    ((""
      (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
      (("1" (assert)
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "c")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_stmt" -1)
                      (("1" (rewrite "deriv_stmt" -2)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (lemma "execute_CaseJML_deterministic")
                                (("2"
                                  (inst
                                   -1
                                   "p!1"
                                   "CaseJML1_var!1"
                                   "sigma!1"
                                   "sigma1!1"
                                   "sigma2!1"
                                   "x!1`1"
                                   "x!1`2"
                                   " LAMBDA (k: upto(x!1`1))(p_1: FullProgram)
                                                                           (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                           (m_1: below(k)):
                                                                      deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                   " LAMBDA (k: upto(x!1`2))(p_1: FullProgram)
                                                                           (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                           (m_1: below(k)):
                                                                      deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst -7 "(m1!1, m2!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -7
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (hide -1 -2)
                    (("2" (rewrite "deriv_stmt" -1)
                      (("2" (rewrite "deriv_stmt" -2)
                        (("2" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (use
                                 "expr_determ_step"
                                 ("v1"
                                  "v!1"
                                  "v2"
                                  "v!2"
                                  "sigma1"
                                  "tau!1"
                                  "sigma2"
                                  "tau!2"))
                                (("2"
                                  (use
                                   "expr_determ_step"
                                   ("v1"
                                    "v!1"
                                    "v2"
                                    "v!2"
                                    "sigma1"
                                    "tau!1"
                                    "sigma2"
                                    "tau!2"
                                    "n1"
                                    "m1!1"
                                    "n2"
                                    "m1!2"))
                                  (("2"
                                    (expand "deriv_expr" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -12
                                                     "(m2!1, m2!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split -7)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -13
                                                                 "IfThenElse2_var!1"
                                                                 "tau!2"
                                                                 "sigma1!1"
                                                                 "sigma2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -12
                                                                 "IfThenElse3_var!1"
                                                                 "tau!2"
                                                                 "sigma1!1"
                                                                 "sigma2!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst -12 "(m1!3, m2!3)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -12
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (hide -1 -2)
                    (("3" (rewrite "deriv_stmt" -1)
                      (("3" (rewrite "deriv_stmt" -2)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -7 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -8
                                     "Sequence1_var!1"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -7 "(m2!1, m2!2)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -7
                                               "Sequence2_var!1"
                                               "tau!2"
                                               "sigma1!1"
                                               "sigma2!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (rewrite "deriv_stmt" -1)
                    (("4" (rewrite "deriv_stmt" -2)
                      (("4" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (lemma "execute_set_deterministic")
                              (("2"
                                (inst
                                 -1
                                 "p!1"
                                 "Set1_var!1"
                                 "Set2_var!1"
                                 "sigma!1"
                                 "sigma1!1"
                                 "sigma2!1"
                                 "x!1`1"
                                 "x!1`2"
                                 " LAMBDA (k: upto(x!1`1))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                 "LAMBDA (k_1: upto(x!1`1))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                 " LAMBDA (k: upto(x!1`2))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                 "LAMBDA (k_1: upto(x!1`2))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (use "expr_determ_step")
                                        (("2"
                                          (expand "deriv_expr" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -9
                                                   "(m1!2, m2!2)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -9
                                                       "c!2"
                                                       "sigma!3"
                                                       "sigma1!3"
                                                       "sigma2!3")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (inst -7 "(m1!1, m2!1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst
                                             -7
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skosimp*)
                  (("5" (rewrite "deriv_stmt" -1)
                    (("5" (rewrite "deriv_stmt" -2)
                      (("5" (flatten) (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (rewrite "deriv_stmt" -1)
                    (("6" (rewrite "deriv_stmt" -2)
                      (("6" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (use
                                 "expr_determ_step"
                                 ("v1"
                                  "v!1"
                                  "v2"
                                  "v!2"
                                  "sigma1"
                                  "sigma1!1"
                                  "sigma2"
                                  "sigma2!1"
                                  "n1"
                                  "x!1`1 - 1"
                                  "n2"
                                  "x!1`2 - 1"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deriv_expr" -1)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -7 "(m1!1, m2!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -7
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (skosimp*)
                  (("7" (rewrite "deriv_stmt" -1)
                    (("7" (rewrite "deriv_stmt" -2)
                      (("7" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (skosimp*)
                  (("8" (hide -1 -2 -3)
                    (("8" (rewrite "deriv_stmt" -1)
                      (("8" (rewrite "deriv_stmt" -2)
                        (("8" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -11 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -12
                                     "TryCatch1_var!1"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -12)
                                          (("2"
                                            (lift-if -3)
                                            (("2"
                                              (split -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst-cp
                                                     -12
                                                     "(m2!1, m2!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -13
                                                         "TryCatch2_var!1"
                                                         "update_PState(tau1!2, catch)"
                                                         "tau2!1"
                                                         "tau2!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace

                                                               -13)
                                                              (("1"
                                                                (replace

                                                                 -14)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -12
                                                                     "(m3!1, m3!2)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -12
                                                                         "TryCatch3_var!1"
                                                                         "update_PState(tau2!2, catch)"
                                                                         "tau3!1"
                                                                         "tau3!2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace

                                                                               -12)
                                                                              (("1"
                                                                                (replace

                                                                                 -13)
                                                                                (("1"
                                                                                  (replace

                                                                                   -6
                                                                                   :dir

                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "deriv_stmt"
                                                     -1)
                                                    (("2"
                                                      (rewrite
                                                       "deriv_stmt"
                                                       -8)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace

                                                             -1)
                                                            (("2"
                                                              (replace

                                                               -9)
                                                              (("2"
                                                                (inst
                                                                 -13
                                                                 "(m3!1, m3!2)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -13
                                                                     "TryCatch3_var!1"
                                                                     "update_PState(tau2!2, catch)"
                                                                     "tau3!1"
                                                                     "tau3!2")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace

                                                                           -13)
                                                                          (("2"
                                                                            (replace

                                                                             -14)
                                                                            (("2"
                                                                              (replace

                                                                               -6
                                                                               :dir

                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("9" (skosimp*)
                  (("9" (hide -1)
                    (("9" (rewrite "deriv_stmt" -1)
                      (("9" (rewrite "deriv_stmt" -2)
                        (("9" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (inst -5 "(x!1`1 - 1, x!1`2 - 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "IfThenElse(While1_var!1,
                            While(While1_var!1, While2_var!1), Skip)"
                                     "sigma!1"
                                     "sigma1!1"
                                     "sigma2!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "well_founded?_product")
        (("2"
          (inst -1 "LAMBDA(x, y : nat) : x < y"
           "LAMBDA(x, y : nat) : x < y")
          (("2" (use "wf_nat") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Stmt_adt
     nil)
    (While? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil) nil
    (TryCatch adt-constructor-decl
     "[[Stmt, Stmt, Stmt] -> (TryCatch?)]" Stmt_adt nil)
    (TryCatch? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (catch const-decl "PState" State nil)
    (Throw? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Throw adt-constructor-decl "(Throw?)" Stmt_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (Skip? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Stmt_adt nil)
    (execute_set_deterministic formula-decl nil SemanticsProofs nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Stmt_adt nil)
    (Sequence? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Stmt_adt nil)
    (IfThenElse? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expr_determ_step formula-decl nil SemanticsProofs nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (execute_CaseJML_deterministic formula-decl nil SemanticsProofs
     nil)
    (Stmt_induction formula-decl nil Stmt_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (well_founded?_product formula-decl nil WF nil))
   15988 11810 t nil))
 (expr_determ 0
  (expr_determ-1 nil 3390558082 3391166704
   ("" (skosimp*)
    (("" (use "expr_determ_step")
      (("" (assert)
        (("" (expand "derives")
          (("" (skosimp*)
            (("" (inst -1 "n!1" "n!2")
              (("" (assert)
                (("" (split -1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (use "stmt_determ_step")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((expr_determ_step formula-decl nil SemanticsProofs nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil) nil
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (stmt_determ_step formula-decl nil SemanticsProofs nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Stmt type-decl nil Stmt_adt nil))
   535 440 t nil))
 (stmt_determ 0
  (stmt_determ-1 nil 3390558094 3391166705
   ("" (skosimp*)
    (("" (use "stmt_determ_step")
      (("" (expand "derives")
        (("" (skosimp*)
          (("" (inst?) (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   unchecked
   ((stmt_determ_step formula-decl nil SemanticsProofs nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil)
   243 200 nil nil))
 (deriv_expr_bottom_iff_exception_step 0
  (deriv_expr_bottom_iff_exception_step-1 nil 3391148989 3391167709
   ("" (skosimp)
    (("" (expand "deriv_expr")
      (("" (use "wf_induction[nat, <]")
        (("1"
          (inst -1
           "LAMBDA(n : nat) : FORALL(e : Expr)(sigma1, sigma2: FullState, v: Val):
        deriv_expr(p!1)(e, sigma1, v, sigma2)(n)
                  (LAMBDA (p: FullProgram)
                          (c: Stmt[Name], sigma1, sigma2: FullState)
                          (m: below(n)):
                     deriv_stmt(p)(c, sigma1, sigma2)(m))
         IMPLIES Bottom?(v) = up?(ex(pstate(sigma2)))")
          (("1" (split -1)
            (("1" (skosimp*)
              (("1" (assert)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -1)
                        (("1" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -3)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "update_PState")
                                                  (("2"
                                                    (expand
                                                     "update_PState_type")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "sigma2!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace

                                                             -1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (hide -2)
                      (("2" (rewrite "deriv_expr" -1)
                        (("2" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2 -3)
                      (("3" (rewrite "deriv_expr" -1)
                        (("3" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -5 "m1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -6)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (hide -1 -2)
                      (("4" (rewrite "deriv_expr" -1)
                        (("4" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (typepred "update_PState")
                                  (("2"
                                    (expand "update_PState_type")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "tau8!1"
                                       "sigma2!1"
                                       "update_local(name(arg(md!1)), old_val_arg!1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (expand "update_local")
                                            (("2"
                                              (split -14)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -15)
                                                    (("2"
                                                      (split -13)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst-cp
                                                             -16
                                                             "m5!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?
                                                                 -17)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "on_method_exit_exceptional")
                                                                      (("2"
                                                                        (expand
                                                                         "on_method_event_type")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (hide -2)
                      (("5" (rewrite "deriv_expr" -1)
                        (("5" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (skosimp*)
                    (("6" (hide -2)
                      (("6" (rewrite "deriv_expr" -1)
                        (("6" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "eval")
                                (("2"
                                  (lift-if)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (eval const-decl "Val" Evaluation nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (CondExpr adt-constructor-decl
     "[[Expr, Expr, Expr] -> (CondExpr?)]" Expr_adt nil)
    (CondExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BExpr adt-constructor-decl "[BoolExpr -> (BExpr?)]" Expr_adt nil)
    (BExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BoolExpr type-decl nil BoolExpr_adt nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Expr_adt
     nil)
    (Assign? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "nat" SemanticsProofs nil)
    (update_field const-decl "PState" State nil)
    (is_field const-decl "boolean" State nil)
    (update_local const-decl "PState" State nil)
    (is_local const-decl "boolean" State nil)
    (update const-decl "PState" State nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Expr_induction formula-decl nil Expr_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Stmt type-decl nil Stmt_adt nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (deriv_expr const-decl "bool" Semantics nil))
   37488 14600 t shostak)))
(SemanticsJML
 (execute_set_TCC1 0
  (execute_set_TCC1-1 nil 3390908875 3391166715
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   102 100 nil nil))
 (execute_set_TCC2 0
  (execute_set_TCC2-1 nil 3390908875 3391166715
   ("" (subtype-tcc) nil nil) unchecked nil 38 40 nil nil))
 (execute_set_TCC3 0
  (execute_set_TCC3-1 nil 3390908875 3391166715
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil))
   287 220 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3390908875 3391166715
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   109 110 nil nil))
 (execute_CaseJML_TCC2 0
  (execute_CaseJML_TCC2-1 nil 3390908875 3391166715
   ("" (subtype-tcc) nil nil) unchecked nil 38 40 nil nil))
 (execute_CaseJML_TCC3 0
  (execute_CaseJML_TCC3-1 nil 3390908875 3391166715
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil))
   195 150 nil nil))
 (on_method_entry_TCC1 0
  (on_method_entry_TCC1-1 nil 3390908875 3391166716
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil))
   590 510 nil nil))
 (on_method_entry_TCC2 0
  (on_method_entry_TCC2-1 nil 3390908875 3391166717
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   678 600 nil nil))
 (on_method_entry_TCC3 0
  (on_method_entry_TCC3-1 nil 3390908875 3391166717
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   735 660 nil nil))
 (on_method_entry_TCC4 0
  (on_method_entry_TCC4-1 nil 3390908875 3391166718
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   428 430 nil nil))
 (on_method_entry_TCC5 0
  (on_method_entry_TCC5-1 nil 3390908875 3391166719
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   712 640 nil nil))
 (on_method_exit_normal_TCC1 0
  (on_method_exit_normal_TCC1-1 nil 3390908875 3391166719
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   415 380 nil nil))
 (on_method_exit_normal_TCC2 0
  (on_method_exit_normal_TCC2-1 nil 3390908875 3391166719
   ("" (subtype-tcc) nil nil) unchecked nil 276 270 nil nil))
 (on_method_exit_normal_TCC3 0
  (on_method_exit_normal_TCC3-1 nil 3390908875 3391166720
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   437 400 nil nil))
 (on_method_exit_normal_TCC4 0
  (on_method_exit_normal_TCC4-1 nil 3390908875 3391166720
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil))
   699 640 nil nil))
 (on_method_exit_normal_TCC5 0
  (on_method_exit_normal_TCC5-1 nil 3390908875 3391166721
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   723 650 nil nil))
 (on_method_exit_exceptional_TCC1 0
  (on_method_exit_exceptional_TCC1-1 nil 3390908875 3391166721
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   377 350 nil nil))
 (on_method_exit_exceptional_TCC2 0
  (on_method_exit_exceptional_TCC2-1 nil 3390908875 3391166722
   ("" (subtype-tcc) nil nil) unchecked nil 266 260 nil nil))
 (on_method_exit_exceptional_TCC3 0
  (on_method_exit_exceptional_TCC3-1 nil 3390908875 3391166722
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil))
   569 500 nil nil))
 (on_method_exit_exceptional_TCC4 0
  (on_method_exit_exceptional_TCC4-1 nil 3390908875 3391166723
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   633 600 nil nil)))

