(ReferenceFunctions)
(SemanticsTypes)
(SemanticsJMLTypes)
(Semantics
 (update_stack_TCC1 0
  (update_stack_TCC1-1 nil 3390908871 3403268978
   ("" (skosimp*)
    (("" (typepred "lvds!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (assert) (("3" (inst 1 "l!2") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   177 176 t shostak))
 (derive_TCC1 0
  (derive_TCC1-1 nil 3395749931 3403268978 ("" (tcc)) unchecked nil 44
   44 nil nil))
 (derive_TCC2 0
  (derive_TCC2-1 nil 3395749931 3403268979 ("" (tcc)) unchecked nil 81
   80 nil nil))
 (derive_TCC3 0
  (derive_TCC3-1 nil 3395749931 3403269964
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   14976 96 t nil))
 (derive_TCC4 0
  (derive_TCC4-1 nil 3395749931 3403268982 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   127 125 nil nil))
 (derive_TCC5 0
  (derive_TCC5-2 nil 3403269980 3403270156
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   67 67 nil nil)
  (derive_TCC5-1 nil 3395749931 3403269717
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   157 156 t nil))
 (derive_TCC6 0
  (derive_TCC6-1 nil 3395749931 3403268985 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   127 127 nil nil))
 (derive_TCC7 0
  (derive_TCC7-1 nil 3395749931 3403268986 ("" (tcc)) unchecked
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   81 81 nil nil))
 (derive_TCC8 0
  (derive_TCC8-2 nil 3403269989 3403270255
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   3963 67 t nil)
  (derive_TCC8-1 nil 3395749931 3403269718
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1) (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   155 149 t nil))
 (derive_TCC9 0
  (derive_TCC9-1 nil 3395749931 3403268988 ("" (tcc)) unchecked nil 81
   80 nil nil))
 (derive_TCC10 0
  (derive_TCC10-2 nil 3403269995 3403270157
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   86 86 nil nil)
  (derive_TCC10-1 nil 3395749931 3403269720
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   194 195 t nil))
 (derive_TCC11 0
  (derive_TCC11-1 nil 3395749931 3403268991 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   107 107 nil nil))
 (derive_TCC12 0
  (derive_TCC12-2 nil 3403269999 3403270158
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   68 68 nil nil)
  (derive_TCC12-1 nil 3395749931 3403269722
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   160 159 t nil))
 (derive_TCC13 0
  (derive_TCC13-1 nil 3395749931 3403268994 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   147 146 nil nil))
 (derive_TCC14 0
  (derive_TCC14-2 nil 3403270003 3403270159
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   106 106 nil nil)
  (derive_TCC14-1 nil 3395749931 3403269723
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   159 159 t nil))
 (derive_TCC15 0
  (derive_TCC15-1 nil 3395749931 3403268997 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   106 106 nil nil))
 (derive_TCC16 0
  (derive_TCC16-2 nil 3403270008 3403270160
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   68 67 nil nil)
  (derive_TCC16-1 nil 3395749931 3403269725
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   178 177 t nil))
 (derive_TCC17 0
  (derive_TCC17-1 nil 3395749931 3403269000 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   106 106 nil nil))
 (derive_TCC18 0
  (derive_TCC18-1 nil 3395749931 3403269000
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   46 46 t nil))
 (derive_TCC19 0
  (derive_TCC19-2 nil 3403270013 3403270305
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   4449 74 t nil)
  (derive_TCC19-1 nil 3395749931 3403269726
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (auto-rewrite "union" "member" "add")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   112 113 t nil))
 (derive_TCC20 0
  (derive_TCC20-1 nil 3395749931 3403269002 ("" (tcc)) unchecked nil 44
   44 nil nil))
 (derive_TCC21 0
  (derive_TCC21-1 nil 3395749931 3403269003 ("" (tcc)) unchecked
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   98 98 nil nil))
 (derive_TCC22 0
  (derive_TCC22-3 nil 3403270321 3403270498
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!2")
              (("2" (assert)
                (("2" (expand "subterm" 2)
                  (("2" (replace -7) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   6217 120 t nil)
  (derive_TCC22-2 nil 3403270025 3403270161
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 42 42 nil nil)
  (derive_TCC22-1 nil 3395749931 3403269728
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1) (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   151 150 t nil))
 (derive_TCC23 0
  (derive_TCC23-1 nil 3395749931 3403269005 ("" (tcc)) unchecked nil 64
   62 nil nil))
 (derive_TCC24 0
  (derive_TCC24-2 nil 3403270031 3403270162
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   85 86 nil nil)
  (derive_TCC24-1 nil 3395749931 3403269729
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   160 160 t nil))
 (derive_TCC25 0
  (derive_TCC25-1 nil 3395749931 3403269008 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   171 169 nil nil))
 (derive_TCC26 0
  (derive_TCC26-2 nil 3403270034 3403270163
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   104 105 nil nil)
  (derive_TCC26-1 nil 3395749931 3403269731
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   198 197 t nil))
 (derive_TCC27 0
  (derive_TCC27-3 nil 3403270324 3403270619
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 3)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (auto-rewrite "union" "member" "add")
                    (("1" (assert)
                      (("1" (expand "var_names" 2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -4)
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   11403 224 t nil)
  (derive_TCC27-2 nil 3403270037 3403270164
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 157 158 nil nil)
  (derive_TCC27-1 nil 3395749931 3403269733
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   161 161 t nil))
 (derive_TCC28 0
  (derive_TCC28-1 nil 3395749931 3403269013 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   130 128 nil nil))
 (derive_TCC29 0
  (derive_TCC29-2 nil 3403270040 3403270165
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   75 74 nil nil)
  (derive_TCC29-1 nil 3395749931 3403269734
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   130 129 t nil))
 (derive_TCC30 0
  (derive_TCC30-1 nil 3395749931 3403269017 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   194 192 nil nil))
 (derive_TCC31 0
  (derive_TCC31-2 nil 3403270056 3403270166
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   111 111 nil nil)
  (derive_TCC31-1 nil 3395749931 3403269735
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -3)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   128 128 t nil))
 (derive_TCC32 0
  (derive_TCC32-1 nil 3395749931 3403269020 ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   226 225 nil nil))
 (derive_TCC33 0
  (derive_TCC33-1 nil 3395749931 3403269023 ("" (tcc)) unchecked
   ((choose const-decl "(p)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   291 290 nil nil))
 (derive_TCC34 0
  (derive_TCC34-1 nil 3395749931 3403269024
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   42 42 t nil))
 (derive_TCC35 0
  (derive_TCC35-1 nil 3395749931 3403269027 ("" (tcc)) unchecked
   ((choose const-decl "(p)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   345 344 nil nil))
 (derive_TCC36 0
  (derive_TCC36-1 nil 3395749931 3403269028
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   62 61 t nil))
 (derive_TCC37 0
  (derive_TCC37-1 nil 3396354176 3403269031 ("" (tcc)) unchecked
   ((choose const-decl "(p)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   332 330 nil nil))
 (derive_TCC38 0
  (derive_TCC38-1 nil 3396354176 3403269035 ("" (tcc)) unchecked
   ((choose const-decl "(p)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   374 374 nil nil))
 (derive_TCC39 0
  (derive_TCC39-1 nil 3401446930 3403269037 ("" (subtype-tcc) nil nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   203 203 nil nil))
 (derive_TCC40 0
  (derive_TCC40-1 nil 3401446930 3403269038 ("" (subtype-tcc) nil nil)
   unchecked
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   86 86 nil nil))
 (derive_TCC41 0
  (derive_TCC41-3 nil 3403270328 3403270380
   (";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
    (skosimp*)
    ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
      (typepred "b!1")
      ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
        (expand "wf_Body")
        ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (propax) nil)))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   59 58 nil nil)
  (derive_TCC41-2 nil 3403270064 3403270166
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 46 44 nil nil)
  (derive_TCC41-1 nil 3401446930 3403269743 ("" (subtype-tcc) nil nil)
   unfinished
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   753 750 nil nil))
 (derive_TCC42 0
  (derive_TCC42-1 nil 3401446930 3403269046
   ("" (termination-tcc) nil nil) unchecked nil 45 45 nil nil))
 (derive_TCC43 0
  (derive_TCC43-1 nil 3401446930 3403269047 ("" (subtype-tcc) nil nil)
   unchecked
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   69 68 nil nil))
 (derive_TCC44 0
  (derive_TCC44-3 nil 3403270332 3403270381
   (";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
    (skosimp*)
    ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
      (typepred "b!1")
      ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
        (expand "wf_Body")
        ((";;; Proof derive_TCC8-2 for formula Semantics.derive_TCC8"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (propax) nil)))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   59 59 nil nil)
  (derive_TCC44-2 nil 3403270068 3403270167
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 63 60 nil nil)
  (derive_TCC44-1 nil 3401446930 3403269749 ("" (subtype-tcc) nil nil)
   unfinished
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   557 556 nil nil))
 (derive_TCC45 0
  (derive_TCC45-1 nil 3401446930 3403269053
   ("" (termination-tcc) nil nil) unchecked nil 82 81 nil nil))
 (derive_TCC46 0
  (derive_TCC46-3 nil 3403270335 3403271229
   (""
    (case "FORALL (l: list[[BoolExpr[Name], Stmt[Name]]], p: FullProgram, b: (wf_Body[Name](program(p))), sigma2 : FullState, v : Val, n : nat):
                v = return_of_stmt(sigma2) AND n > 0 AND b = CaseJML(l)
                 IMPLIES wf_Branches[Name](program(p))(l)")
    (("1" (skosimp*)
      (("1" (apply (repeat (inst? -1))) (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "l")
        (("1" (grind) nil nil)
         ("2" (skosimp*)
          (("2" (expand "wf_Branches")
            (("2" (expand "every" 1)
              (("2" (inst -1 "p!1" _ "sigma2!1" "v!1" "n!1")
                (("2" (assert)
                  (("2" (inst -1 "CaseJML(cons2_var!1)")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (typepred "b!1")
                          (("1" (expand "wf_Body")
                            (("1" (flatten)
                              (("1"
                                (replace -5 :hide? t)
                                (("1"
                                  (expand "var_names" -1)
                                  (("1"
                                    (expand "subterm" -2)
                                    (("1"
                                      (auto-rewrite "union" "member")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst? -4)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "some_is_exists")
                                                  (("2"
                                                    (inst? 2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3"
                                              (inst?)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skosimp*)
                                            (("4"
                                              (inst? -4)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (rewrite
                                                   "some_is_exists")
                                                  (("4"
                                                    (inst? 2)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "b!1")
                      (("2" (replace -4)
                        (("2" (hide 2)
                          (("2" (expand "wf_Body")
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" 2)
                                      (("1"
                                        (auto-rewrite
                                         "union"
                                         "member"
                                         "emptyset")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst? -4)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "subterm" (-2 2))
                                      (("2"
                                        (rewrite "some_is_exists")
                                        (("2"
                                          (rewrite "some_is_exists")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst? 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (pred type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   59756 529 t nil)
  (derive_TCC46-2 nil 3403270070 3403270169
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 160 151 nil nil)
  (derive_TCC46-1 nil 3401446930 3403269751
   (""
    (case "FORALL(p : FullProgram, b: (wf_Body[Name](program(p))), v : Val, sigma2 : FullState, n : nat, l: list[[BoolExpr[Name], Stmt[Name]]]):
                v = return_of_stmt(sigma2) AND n > 0 AND b = CaseJML(l)
                 IMPLIES wf_Branches[Name](program(p))(l)")
    (("1" (skosimp*)
      (("1" (apply (repeat (inst? -1))) (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "l")
        (("1" (grind) nil nil)
         ("2" (skosimp*)
          (("2" (inst -1 "p!1" _ "v!1" "sigma2!1" "n!1")
            (("2" (assert)
              (("2" (typepred "b!1")
                (("2" (inst -2 "CaseJML(cons2_var!1)")
                  (("1" (expand "wf_Branches")
                    (("1" (expand "every" 1)
                      (("1" (assert)
                        (("1" (hide -2)
                          (("1" (expand "wf_Body")
                            (("1" (replace -4)
                              (("1"
                                (split 1)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "var_names" 2)
                                        (("1"
                                          (auto-rewrite
                                           "union"
                                           "member")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "var_names" 2)
                                        (("2"
                                          (auto-rewrite
                                           "union"
                                           "member")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "wf_Body_CaseJML" :dir rl) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   247 247 t nil))
 (derive_TCC47 0
  (derive_TCC47-3 nil 3403270337 3403271256
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (assert)
                      (("1" (auto-rewrite "union" "member")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2289 119 t nil)
  (derive_TCC47-2 nil 3403270074 3403270170
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 92 91 nil nil)
  (derive_TCC47-1 nil 3401446930 3403269753
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   181 181 t nil))
 (derive_TCC48 0
  (derive_TCC48-1 nil 3401446930 3403269058
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   155 155 t nil))
 (derive_TCC49 0
  (derive_TCC49-3 nil 3403270340 3403271327
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   6171 82 t nil)
  (derive_TCC49-2 nil 3403270078 3403270171
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 92 93 nil nil)
  (derive_TCC49-1 nil 3401446930 3403269755
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   181 180 t nil))
 (derive_TCC50 0
  (derive_TCC50-3 nil 3403270343 3403271391
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 3)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (auto-rewrite "union" "member")
                  (("1" (assert)
                    (("1" (replace -6)
                      (("1" (expand "var_names" 2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst? -4)
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   5833 226 t nil)
  (derive_TCC50-2 nil 3403270081 3403270172
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 165 161 nil nil)
  (derive_TCC50-1 nil 3401446930 3403269756
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   164 164 t nil))
 (derive_TCC51 0
  (derive_TCC51-1 nil 3401446930 3403269064
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   158 157 t nil))
 (derive_TCC52 0
  (derive_TCC52-3 nil 3403270345 3403271403
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   591 98 t nil)
  (derive_TCC52-2 nil 3403270085 3403270173
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 90 89 nil nil)
  (derive_TCC52-1 nil 3401446930 3403269758
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   180 179 t nil))
 (derive_TCC53 0
  (derive_TCC53-1 nil 3401446930 3403269067
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   155 154 t nil))
 (derive_TCC54 0
  (derive_TCC54-3 nil 3403270347 3403271414
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   639 115 t nil)
  (derive_TCC54-2 nil 3403270087 3403270174
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 72 72 nil nil)
  (derive_TCC54-1 nil 3401446930 3403269760
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   180 180 t nil))
 (derive_TCC55 0
  (derive_TCC55-1 nil 3401446930 3403269070 ("" (subtype-tcc) nil nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   113 112 nil nil))
 (derive_TCC56 0
  (derive_TCC56-3 nil 3403270350 3403271487
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Expr")
        (("" (expand "wf_Body")
          (("" (split 2)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (replace -7)
                    (("1" (expand "var_names" 2)
                      (("1" (auto-rewrite "union" "member" "add")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst? -4)
                (("2" (assert)
                  (("2" (replace -8)
                    (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   6984 156 t nil)
  (derive_TCC56-2 nil 3403270090 3403270175
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 93 94 nil nil)
  (derive_TCC56-1 nil 3401446930 3403269761
   ("" (skosimp*)
    (("" (expand "wf_Expr")
      (("" (typepred "b!1")
        (("" (expand "wf_Body")
          (("" (skosimp*)
            (("" (inst?)
              (("" (assert)
                (("" (replace -5)
                  (("" (expand "var_names" 1)
                    (("" (auto-rewrite "union" "member" "add")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   96 96 t nil))
 (derive_TCC57 0
  (derive_TCC57-1 nil 3401446930 3403269072
   ("" (termination-tcc) nil nil) unchecked
   ((member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   118 117 nil nil))
 (derive_TCC58 0
  (derive_TCC58-3 nil 3403270352 3403271522
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "var_names" 2)
                  (("1" (replace -7) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (expand "subterm" 2)
                  (("2" (replace -8) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2946 100 t nil)
  (derive_TCC58-2 nil 3403270094 3403270176
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 106 105 nil nil)
  (derive_TCC58-1 nil 3401446930 3403269762
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -5)
                (("" (expand "var_names" 1) (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   154 153 t nil))
 (derive_TCC59 0
  (derive_TCC59-1 nil 3401446930 3403269074
   ("" (termination-tcc) nil nil) unchecked nil 45 45 nil nil))
 (derive_TCC60 0
  (derive_TCC60-3 nil 3403270355 3403271533
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   710 82 t nil)
  (derive_TCC60-2 nil 3403270097 3403270177
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 75 75 nil nil)
  (derive_TCC60-1 nil 3401446930 3403269765
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   273 272 t nil))
 (derive_TCC61 0
  (derive_TCC61-1 nil 3401446930 3403269078
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (expand "var_names")
                (("" (expand "emptyset") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   159 158 t nil))
 (derive_TCC62 0
  (derive_TCC62-3 nil 3403270358 3403271545
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   633 140 t nil)
  (derive_TCC62-2 nil 3403270099 3403270178
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 114 112 nil nil)
  (derive_TCC62-1 nil 3401446930 3403269767
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   165 164 t nil))
 (derive_TCC63 0
  (derive_TCC63-3 nil 3403270362 3403271599
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (split 3)
                (("1" (skosimp*)
                  (("1" (expand* "var_names" "member" "emptyset") nil
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "subterm") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((emptyset const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   4914 198 t nil)
  (derive_TCC63-2 nil 3403270105 3403270179
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 166 166 nil nil)
  (derive_TCC63-1 nil 3401446930 3403269767
   ("" (skosimp*)
    (("" (expand "wf_Body")
      (("" (skosimp*)
        (("" (expand "var_names")
          (("" (expand "emptyset") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished ((emptyset const-decl "set" sets nil)) 34 34 t nil))
 (derive_TCC64 0
  (derive_TCC64-1 nil 3401446930 3403269082
   ("" (termination-tcc) nil nil) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   113 112 nil nil))
 (derive_TCC65 0
  (derive_TCC65-3 nil 3403270365 3403271612
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -6)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member" "add")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -7)
                  (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   705 119 t nil)
  (derive_TCC65-2 nil 3403270107 3403270180
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 94 93 nil nil)
  (derive_TCC65-1 nil 3401446930 3403269769
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -4)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add" "emptyset")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   183 183 t nil))
 (derive_TCC66 0
  (derive_TCC66-1 nil 3401446930 3403269086
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -5)
                (("" (expand "var_names" 1)
                  (("" (expand "var_names" -6)
                    (("" (auto-rewrite "union" "member")
                      (("" (assert)
                        (("" (flatten)
                          (("" (split -6)
                            (("1" (propax) nil nil)
                             ("2" (expand "var_names")
                              (("2"
                                (expand "emptyset")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   177 175 t nil))
 (derive_TCC67 0
  (derive_TCC67-1 nil 3401446930 3403269086
   ("" (termination-tcc) nil nil) unchecked
   ((member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   99 99 nil nil))
 (derive_TCC68 0
  (derive_TCC68-3 nil 3403270368 3403271694
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "var_names" 2)
                  (("1" (auto-rewrite "union" "member" "add")
                    (("1" (assert)
                      (("1" (replace -7)
                        (("1" (assert)
                          (("1" (expand "var_names" -1)
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand*
                                   "var_names"
                                   "member"
                                   "emptyset")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (expand "subterm" 2)
                  (("2" (replace -8)
                    (("2" (assert)
                      (("2" (expand "subterm" -2)
                        (("2" (split -2)
                          (("1" (assert) nil nil)
                           ("2" (expand "subterm" -1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   7878 156 t nil)
  (derive_TCC68-2 nil 3403270111 3403270181
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 48 48 nil nil)
  (derive_TCC68-1 nil 3401600202 3403269771
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (replace -5)
                (("" (expand "var_names" 1)
                  (("" (auto-rewrite "union" "member" "add")
                    (("" (assert)
                      (("" (expand "var_names" -6)
                        (("" (assert)
                          (("" (split -6)
                            (("1" (assert) nil nil)
                             ("2" (expand "var_names")
                              (("2"
                                (expand "emptyset")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil))
   163 160 t nil))
 (derive_TCC69 0
  (derive_TCC69-1 nil 3401600202 3403269089
   ("" (termination-tcc) nil nil) unchecked nil 63 62 nil nil))
 (derive_TCC70 0
  (derive_TCC70-3 nil 3403270370 3403271753
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_BoolExpr")
        (("" (expand "wf_Body")
          (("" (split 2)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (replace -7)
                    (("1" (expand "var_names" 2)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst? -4)
                (("2" (assert)
                  (("2" (replace -8)
                    (("2" (expand "subterm" 2) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   5483 201 t nil)
  (derive_TCC70-2 nil 3403270116 3403270182
   (";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
    (skosimp*)
    ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
      (typepred "b!1")
      ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
        (expand "wf_Body")
        ((";;; Proof derive_TCC3-1 for formula Semantics.derive_TCC3"
          (split 2)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (expand "var_names" 2)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert) nil)))))))))))))
           ("2" (skosimp*)
            (("2" (inst -4 "b1!1")
              (("2" (assert)
                (("2" (replace -6)
                  (("2" (expand "subterm" 2)
                    (("2" (propax) nil))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 171 170 nil nil)
  (derive_TCC70-1 nil 3401600202 3403269772
   ("" (skosimp*)
    (("" (expand "wf_BoolExpr")
      (("" (typepred "b!1")
        (("" (expand "wf_Body")
          (("" (skosimp*)
            (("" (inst?)
              (("" (assert)
                (("" (replace -5)
                  (("" (expand "var_names" 1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   168 167 t nil))
 (run_FullProgram_TCC1 0
  (run_FullProgram_TCC1-1 nil 3401446930 3403445441
   ("" (skosimp*)
    (("" (replace -1 :hide? t)
      (("" (expand "wf_Body")
        (("" (split 1)
          (("1" (skosimp*)
            (("1" (expand "ext_declared_var_names")
              (("1"
                (auto-rewrite "var_names" "union" "member" "singleton"
                              "emptyset")
                (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (auto-rewrite "subterm") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   140880 760 t nil)))
(SemanticsProofs
 (derive_determ 0
  (derive_determ-1 nil 3395752130 3403269320
   ("" (skosimp*)
    (("" (expand "derives")
      (("" (skosimp*)
        (("" (lemma "derive_determ_step")
          (("" (inst?)
            (("" (assert)
              (("" (inst? -1 :where -3)
                (("" (assert)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   41 42 t shostak))
 (derive_bottom_iff_exception_step 0
  (derive_bottom_iff_exception_step-2 nil 3401608082 3403269339
   ("" (use "wf_induction[nat, LAMBDA(x, y : nat) : x < y]")
    (("1"
      (inst -1
       " LAMBDA(n : nat) : FORALL (p: FullProgram)(e: (wf_Body(program(p))))
                             (sigma1, sigma2: FullState, v: Val):
                        derive(p)(e, sigma1, v, sigma2)(n) IMPLIES
                         Bottom?(v) = up?(ex(pstate(sigma2)))")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -2)
              (("2" (split -2)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2"
                              (expand* "check_for_exception_final"
                               "check_for_exception")
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (split -5)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst-cp -8 "m1!1")
                                          (("2"
                                            (inst -8 "m2!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (split
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "x!1 - 1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst-cp
                                                                           -8
                                                                           "m1!1")
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "m2!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -5
                                                                                                     "x!1 - 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   13)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "update_PState")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState_type")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "sigma2!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update")
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "update_local")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "update_field")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "x!1 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst-cp
                                                                                                                       -6
                                                                                                                       "m1!1")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -6
                                                                                                                         "m2!1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (inst?
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "update_PState_type")
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1
                                                                                                                           :where
                                                                                                                           -15)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "sigma2!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "update_local")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -14)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -16
                                                                                                                                           "m5!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (inst?
                                                                                                                                               -17)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   -13)
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "on_method_exit_exceptional")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "on_method_event_type")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (typepred
                                                                                                                                                 "md!1")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "wf_Method")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -4
                                                                                                                           "x!1 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "x!1 - 1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "return_of_stmt")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   untried
   ((wf_nat formula-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (set type-eq-decl nil sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil))
   1883 1880 t nil)
  (derive_bottom_iff_exception_step-1 nil 3395752639 3401608061
   ("" (use "wf_induction[nat, LAMBDA(x, y : nat) : x < y]")
    (("1"
      (inst -1 " LAMBDA(n : nat) : FORALL (p: FullProgram)(e: Body)
                     (sigma1, sigma2: FullState, v: Val):
                derive(p)(e, sigma1, v, sigma2)(n) IMPLIES
                 Bottom?(v) = up?(ex(pstate(sigma2)))")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -2)
              (("2" (split -2)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2"
                              (expand* "check_for_exception_final"
                               "check_for_exception")
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (split -5)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst-cp -8 "m1!1")
                                          (("2"
                                            (inst -8 "m2!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (split
                                                                 -4)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "x!1 - 1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst-cp
                                                                           -8
                                                                           "m1!1")
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "m2!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -5
                                                                                                     "x!1 - 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   13)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "update_PState")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState_type")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "sigma2!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update")
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "update_local")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "update_field")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "x!1 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst-cp
                                                                                                                       -6
                                                                                                                       "m1!1")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -6
                                                                                                                         "m2!1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (inst?
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "update_PState")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "update_PState_type")
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1
                                                                                                                           :where
                                                                                                                           -15)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "sigma2!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "update_local")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -14)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -16
                                                                                                                                           "m5!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (inst?
                                                                                                                                               -17)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   -13)
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "on_method_exit_exceptional")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "on_method_event_type")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -4
                                                                                                                           "x!1 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "x!1 - 1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "return_of_stmt")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((wf_nat formula-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil))
   15150 2600 t shostak))
 (derive_boolean_expr_type_TCC1 0
  (derive_boolean_expr_type_TCC1-1 nil 3401446935 3403269340
   ("" (subtype-tcc) nil nil) unchecked
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   100 99 nil nil))
 (derive_boolean_expr_type 0
  (derive_boolean_expr_type-1 nil 3396347233 3403269347
   ("" (skosimp)
    (("" (induct "b")
      (("1" (typepred "b!1") (("1" (assert) nil nil)) nil)
       ("2" (skosimp*) (("2" (assert) nil nil)) nil)
       ("3" (skosimp*) (("3" (assert) nil nil)) nil)
       ("4" (skosimp*) (("4" (assert) nil nil)) nil)
       ("5" (skosimp*)
        (("5" (expand "derive") (("5" (assert) nil nil)) nil)) nil)
       ("6" (skosimp*)
        (("6" (expand "derive") (("6" (assert) nil nil)) nil)) nil)
       ("7" (skosimp*)
        (("7" (expand "derive") (("7" (assert) nil nil)) nil)) nil)
       ("8" (skosimp*)
        (("8" (assert)
          (("8" (expand "derive" -4)
            (("8"
              (expand* "check_for_exception_final"
               "check_for_exception")
              nil nil))
            nil))
          nil))
        nil)
       ("9" (skosimp*)
        (("9" (expand "derive" -5)
          (("9"
            (expand* "check_for_exception_final" "check_for_exception")
            (("9" (assert) nil nil)) nil))
          nil))
        nil)
       ("10" (skosimp*)
        (("10" (expand "derive" -5)
          (("10"
            (expand* "check_for_exception_final" "check_for_exception")
            (("10" (assert) nil nil)) nil))
          nil))
        nil)
       ("11" (skosimp*)
        (("11" (expand "derive" -3) (("11" (assert) nil nil)) nil))
        nil)
       ("12" (skosimp*) (("12" (assert) nil nil)) nil)
       ("13" (skosimp*) (("13" (assert) nil nil)) nil)
       ("14" (skosimp*) (("14" (assert) nil nil)) nil)
       ("15" (skosimp*) (("15" (assert) nil nil)) nil)
       ("16" (skosimp*) (("16" (assert) nil nil)) nil)
       ("17" (skosimp*) (("17" (assert) nil nil)) nil)
       ("18" (skosimp*) (("18" (assert) nil nil)) nil)
       ("19" (skosimp*) (("19" (assert) nil nil)) nil)
       ("20" (skosimp*) (("20" (assert) nil nil)) nil)
       ("21" (skosimp*) (("21" (assert) nil nil)) nil)
       ("22" (skosimp*) (("22" (assert) nil nil)) nil)
       ("23" (skosimp*) (("23" (assert) nil nil)) nil)
       ("24" (skosimp*) (("24" (assert) nil nil)) nil)
       ("25" (skosimp*) (("25" (assert) nil nil)) nil)
       ("26" (skosimp*) (("26" (assert) nil nil)) nil)
       ("27" (skosimp*) (("27" (assert) nil nil)) nil)
       ("28" (skosimp*) (("28" (assert) nil nil)) nil)
       ("29" (skosimp*) (("29" (assert) nil nil)) nil)
       ("30" (skosimp*)
        (("30" (expand "wf_BoolExpr") (("30" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   untried
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   735 732 t nil)))
(SemanticsJML
 (wf_initial_ghost_state_TCC1 0
  (wf_initial_ghost_state_TCC1-1 nil 3392370163 3403269348 ("" (tcc))
   unchecked
   ((choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   49 49 nil nil))
 (wf_initial_ghost_state 0
  (wf_initial_ghost_state-1 nil 3392370167 3403269349
   ("" (skosimp*)
    (("" (expand "wf_ghoststate")
      (("" (skosimp*)
        (("" (expand "is_ghost")
          (("" (replace -1 :hide? t)
            (("" (assert)
              (("" (expand "var_names")
                (("" (expand "get_GhostDecl")
                  (("" (lift-if)
                    (("" (assert)
                      (("" (split 1)
                        (("1" (skosimp*)
                          (("1"
                            (typepred "choose({g: FieldDecl[Name] |
                                getGhostDecls(program(p!1))(g) AND
                                 name(g) = vn!1})`init_val")
                            (("1" (expand "defined?")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "nonempty_exists")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (rewrite "nonempty_exists")
                            (("2" (expand "defined?")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((nonempty_exists formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_finite const-decl "bool" finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   93 93 t shostak))
 (execute_set_TCC1 0
  (execute_set_TCC1-1 nil 3390908875 3403438573 ("" (tcc)) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   2346 2060 nil nil))
 (execute_set_TCC2 0
  (execute_set_TCC2-1 nil 3390908875 3403438574
   ("" (skosimp*)
    (("" (typepred "e!1")
      (("" (expand "wf_Expr") (("" (propax) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   995 990 t nil))
 (execute_set_TCC3 0
  (execute_set_TCC3-1 nil 3390908875 3403438576 ("" (tcc)) unchecked
   nil 1988 1860 nil nil))
 (execute_set_TCC4 0
  (execute_set_TCC4-1 nil 3401446938 3403438578
   ("" (subtype-tcc) nil nil) unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   2088 1950 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3390908875 3403446729 ("" (tcc) nil nil)
   proved
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   4641 1250 t nil))
 (execute_CaseJML_TCC2 0
  (execute_CaseJML_TCC2-2 "no proof, because old one suddenly broken"
   3401701533 3403447323
   ("" (skosimp*)
    (("" (typepred "branches!1")
      (("" (expand "wf_Branches")
        (("" (use "every_is_forall")
          (("" (rewrite -1)
            (("" (inst?)
              (("" (rewrite -3)
                (("" (expand "member")
                  (("" (flatten) (("" (postpone) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 523341 700 t shostak)
  (execute_CaseJML_TCC2-1 nil 3390908875 3401701497
   ("" (induct "xs")
    (("1" (skosimp*)
      (("1" (typepred "branches!1")
        (("1" (expand "wf_Branches")
          (("1" (replace -3)
            (("1" (expand "every")
              (("1" (expand "every")
                (("1" (flatten)
                  (("1" (expand "wf_Body")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "var_names" -4)
                              (("1"
                                (auto-rewrite "union" "member")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -3)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (typepred "branches!1")
        (("2"
          (inst -2 "p!1" "cdr(branches!1)" "s1!1" "s2!1" "n!1"
           "cons1_var!1")
          (("1" (assert)
            (("1" (replace -4)
              (("1" (assert)
                (("1" (inst -2 "CaseJML(cons2_var!1)")
                  (("1" (expand "wf_Branches")
                    (("1" (expand "every")
                      (("1" (flatten)
                        (("1" (expand "every")
                          (("1" (flatten)
                            (("1" (expand "wf_Body")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "var_names" -6)
                                            (("1"
                                              (auto-rewrite
                                               "union"
                                               "member")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (expand
                                                     "var_names"
                                                     -6)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "var_names"
                                                             5)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "wf_Branches")
            (("2" (expand "every" -1)
              (("2" (assert) (("2" (flatten) nil nil)) nil)) nil))
            nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil))
   5099 135 t nil))
 (execute_CaseJML_TCC3 0
  (execute_CaseJML_TCC3-1 nil 3390908875 3403446647 ("" (tcc) nil nil)
   proved nil 4049 660 t shostak))
 (execute_CaseJML_TCC4 0
  (execute_CaseJML_TCC4-1 nil 3395749089 3403446630 ("" (tcc) nil nil)
   proved
   ((execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (extend const-decl "R" extend nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   4299 1220 t shostak))
 (check_assertion_TCC1 0
  (check_assertion_TCC1-1 nil 3395749089 3403438551
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   522 520 t shostak))
 (check_assertion_TCC2 0
  (check_assertion_TCC2-1 nil 3401446938 3403438553
   ("" (skosimp*)
    (("" (typepred "e!1")
      (("" (expand "wf_BoolExpr") (("" (propax) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1128 1000 t nil))
 (execute_assert_TCC1 0
  (execute_assert_TCC1-1 nil 3397383993 3403438566
   ("" (subtype-tcc) nil nil) unchecked nil 1767 1630 nil nil))
 (execute_assert_TCC2 0
  (execute_assert_TCC2-1 nil 3397383993 3403438571
   ("" (subtype-tcc) nil nil) unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (This const-decl "Name" Program nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   4768 4610 nil nil))
 (on_method_entry_TCC1 0
  (on_method_entry_TCC1-1 nil 3390908875 3403438583 ("" (tcc))
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   4309 3860 nil nil))
 (on_method_entry_TCC2 0
  (on_method_entry_TCC2-2 "" 3395751614 3403438587 ("" (tcc)) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   4468 3990 t shostak)
  (on_method_entry_TCC2-1 nil 3390908875 3395751480
   ("" (subtype-tcc) nil nil) unfinished
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   143 143 nil nil))
 (on_method_entry_TCC3 0
  (on_method_entry_TCC3-1 nil 3390908875 3403438589
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (expand "wf_BoolExpr") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1383 1250 t shostak))
 (on_method_entry_TCC4 0
  (on_method_entry_TCC4-1 nil 3390908875 3403438593 ("" (tcc))
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (choose const-decl "(p)" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   4553 4100 t shostak))
 (on_method_entry_TCC5 0
  (on_method_entry_TCC5-1 nil 3390908875 3403438595
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   1386 1260 t nil))
 (on_method_entry_TCC6 0
  (on_method_entry_TCC6-1 nil 3401446938 3403438604
   ("" (subtype-tcc) nil nil) unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (This const-decl "Name" Program nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   8928 8280 nil nil))
 (on_method_exit_normal_TCC1 0
  (on_method_exit_normal_TCC1-1 nil 3390908875 3403438686
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   842 720 t shostak))
 (on_method_exit_normal_TCC2 0
  (on_method_exit_normal_TCC2-1 nil 3390908875 3403438687
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   1353 1220 t nil))
 (on_method_exit_normal_TCC3 0
  (on_method_exit_normal_TCC3-1 nil 3390908875 3403438688
   ("" (skosimp*)
    (("" (typepred "post(md!1)")
      (("" (assert) (("" (postpone) nil nil)) nil)) nil))
    nil)
   unchecked
   ((BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   745 750 t shostak))
 (on_method_exit_normal_TCC4 0
  (on_method_exit_normal_TCC4-1 nil 3390908875 3403438690
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (assert)
          (("" (expand "wf_BoolExpr") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   1360 1250 t shostak))
 (on_method_exit_normal_TCC5 0
  (on_method_exit_normal_TCC5-1 nil 3390908875 3403438691
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (expand "wf_BoolExpr") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1490 1310 t nil))
 (on_method_exit_normal_TCC6 0
  (on_method_exit_normal_TCC6-1 nil 3401446938 3403438700
   ("" (subtype-tcc) nil nil) unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    nil nil nil nil
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (This const-decl "Name" Program nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   9017 8360 nil nil))
 (on_method_exit_exceptional_TCC1 0
  (on_method_exit_exceptional_TCC1-1 nil 3390908875 3403438679
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   871 710 t shostak))
 (on_method_exit_exceptional_TCC2 0
  (on_method_exit_exceptional_TCC2-1 nil 3390908875 3403438681
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   1363 1200 t nil))
 (on_method_exit_exceptional_TCC3 0
  (on_method_exit_exceptional_TCC3-1 nil 3390908875 3403438683
   ("" (tcc)) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1939 1940 nil nil))
 (on_method_exit_exceptional_TCC4 0
  (on_method_exit_exceptional_TCC4-1 nil 3397385085 3403438684
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (lift-if)
                (("1" (split -6)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (typepred "update_PState")
                      (("2" (expand "update_PState_type")
                        (("2" (inst?)
                          (("2" (inst -1 "s2!1")
                            (("2" (assert)
                              (("2"
                                (replace -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   859 720 t nil))
 (on_method_exit_exceptional_TCC5 0
  (on_method_exit_exceptional_TCC5-1 nil 3401446938 3403438685
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (replace -6)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (propax) nil nil)
                       ("2" (skosimp*)
                        (("2" (typepred "update_PState")
                          (("2" (expand "update_PState_type")
                            (("2" (inst?)
                              (("2"
                                (inst
                                 -1
                                 "update_PState(tau2!1, raise[Name](down[Excpt](ex(pstate(s1!1)))))")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (expand "raise")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((update_PState formal-const-decl "(update_PState_type)"
     SemanticsJML nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (raise const-decl "PState" State nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   1531 1400 t nil)))

