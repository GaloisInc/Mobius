(Evaluation
 (eval_TCC1 0
  (eval_TCC1-1 nil 3371189456 3392364493 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   99 100 nil nil))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3371189456 3392364493 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   136 90 nil nil))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3371189456 3392364493 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   136 90 nil nil))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3371189456 3392364493 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   98 100 nil nil))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3371189456 3392364494 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   298 100 nil nil))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3371189456 3392364494 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   130 90 nil nil))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3371189456 3392364494 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   98 90 nil nil))
 (eval_TCC8 0
  (eval_TCC8-1 nil 3371189456 3392364494 ("" (termination-tcc) nil nil)
   unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   137 100 nil nil))
 (eval_TCC9 0
  (eval_TCC9-1 nil 3371189456 3392364494 ("" (subtype-tcc) nil nil)
   unchecked ((/= const-decl "boolean" notequal nil)) 70 70 nil nil))
 (eval_TCC10 0
  (eval_TCC10-1 nil 3371189456 3392364494
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   137 110 nil nil))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3371189456 3392364494
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   110 110 nil nil))
 (eval_TCC12 0
  (eval_TCC12-1 nil 3371189456 3392364494
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   145 110 nil nil))
 (eval_TCC13 0
  (eval_TCC13-1 nil 3371189456 3392364495
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   140 110 nil nil))
 (eval_TCC14 0
  (eval_TCC14-1 nil 3371189456 3392364495
   ("" (termination-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   116 110 nil nil))
 (eval_TCC15 0
  (eval_TCC15-1 nil 3390732272 3392364495 ("" (subtype-tcc) nil nil)
   unchecked nil 78 50 nil nil)))
(SemanticsTypes)
(SemanticsJMLTypes)
(Semantics
 (update_stack_TCC1 0
  (update_stack_TCC1-1 nil 3390908871 3392364495
   ("" (skosimp*)
    (("" (typepred "lvds!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: LocalVarDecl[Name]):
                       lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] | lvds!1(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (assert) (("3" (inst 1 "l!2") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (JType type-decl nil JType_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-decl nil Val_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (defined? const-decl "boolean" ValProp nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (nonempty? const-decl "bool" sets nil))
   422 320 t nil))
 (deriv_expr_TCC1 0
  (deriv_expr_TCC1-1 nil 3371191509 3392364495
   ("" (skosimp) (("" (assert) nil nil)) nil) unchecked nil 49 40 t
   nil))
 (deriv_expr_TCC2 0
  (deriv_expr_TCC2-1 nil 3371191509 3392364495
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 122 80 t
   nil))
 (deriv_expr_TCC3 0
  (deriv_expr_TCC3-1 nil 3371191509 3392364495
   ("" (subtype-tcc) nil nil) unchecked nil 59 60 nil nil))
 (deriv_expr_TCC4 0
  (deriv_expr_TCC4-1 nil 3371191509 3392364496
   ("" (termination-tcc) nil nil) unchecked nil 73 70 nil nil))
 (deriv_expr_TCC5 0
  (deriv_expr_TCC5-1 nil 3371191509 3392364496
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   679 480 nil nil))
 (deriv_expr_TCC6 0
  (deriv_expr_TCC6-1 nil 3371191509 3392364496
   ("" (subtype-tcc) nil nil) unchecked nil 83 80 nil nil))
 (deriv_expr_TCC7 0
  (deriv_expr_TCC7-1 nil 3371191509 3392364497
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   806 720 nil nil))
 (deriv_expr_TCC8 0
  (deriv_expr_TCC8-1 nil 3371191509 3392364498
   ("" (skosimp*) (("" (replace -4 2) (("" (assert) nil nil)) nil))
    nil)
   unchecked nil 603 570 t nil))
 (deriv_expr_TCC9 0
  (deriv_expr_TCC9-1 nil 3371191509 3392364499
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   923 850 nil nil))
 (deriv_expr_TCC10 0
  (deriv_expr_TCC10-1 nil 3371191509 3392364500
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1183 920 nil nil))
 (deriv_expr_TCC11 0
  (deriv_expr_TCC11-1 nil 3371191509 3392364500
   ("" (subtype-tcc) nil nil) unchecked nil 343 340 nil nil))
 (deriv_expr_TCC12 0
  (deriv_expr_TCC12-1 nil 3371191509 3392364501
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1186 1030 nil nil))
 (deriv_expr_TCC13 0
  (deriv_expr_TCC13-1 nil 3371191509 3392364502
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 804 710 t
   nil))
 (deriv_expr_TCC14 0
  (deriv_expr_TCC14-1 nil 3390110778 3392364504
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (defined? const-decl "boolean" ValProp nil))
   2189 1820 nil nil))
 (deriv_expr_TCC15 0
  (deriv_expr_TCC15-1 nil 3390110778 3392364507
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (defined? const-decl "boolean" ValProp nil))
   2191 1860 nil nil))
 (deriv_expr_TCC16 0
  (deriv_expr_TCC16-1 nil 3390110778 3392364509
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (defined? const-decl "boolean" ValProp nil))
   2310 1940 nil nil))
 (deriv_expr_TCC17 0
  (deriv_expr_TCC17-1 nil 3390110778 3392364511
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (lookup_local const-decl "Val" State nil)
    (defined? const-decl "boolean" ValProp nil))
   2263 1880 nil nil))
 (deriv_stmt_TCC1 0
  (deriv_stmt_TCC1-1 nil 3371191509 3392364512
   ("" (skosimp*) (("" (assert) nil nil)) nil) unchecked nil 512 450 t
   nil))
 (deriv_stmt_TCC2 0
  (deriv_stmt_TCC2-1 nil 3371191509 3392364513
   ("" (termination-tcc) nil nil) unchecked nil 886 800 nil nil))
 (deriv_stmt_TCC3 0
  (deriv_stmt_TCC3-1 nil 3371191509 3392364515
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_expr def-decl "bool" Semantics nil))
   2300 1880 nil nil))
 (deriv_stmt_TCC4 0
  (deriv_stmt_TCC4-1 nil 3371191509 3392364516
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1413 1200 nil nil))
 (deriv_stmt_TCC5 0
  (deriv_stmt_TCC5-1 nil 3371191509 3392364517
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1023 840 nil nil))
 (deriv_stmt_TCC6 0
  (deriv_stmt_TCC6-1 nil 3371191509 3392364518
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   686 600 nil nil))
 (deriv_stmt_TCC7 0
  (deriv_stmt_TCC7-1 nil 3371191509 3392364519
   ("" (subtype-tcc) nil nil) unchecked nil 495 440 nil nil))
 (deriv_stmt_TCC8 0
  (deriv_stmt_TCC8-1 nil 3371191509 3392364520
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1029 880 nil nil))
 (deriv_stmt_TCC9 0
  (deriv_stmt_TCC9-1 nil 3371191509 3392364524
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   4191 1210 nil nil))
 (deriv_stmt_TCC10 0
  (deriv_stmt_TCC10-1 nil 3371191509 3392364525
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1453 1260 nil nil))
 (deriv_stmt_TCC11 0
  (deriv_stmt_TCC11-1 nil 3371191509 3392364526
   ("" (termination-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1113 950 nil nil))
 (deriv_stmt_TCC12 0
  (deriv_stmt_TCC12-1 nil 3371191509 3392364527
   ("" (subtype-tcc) nil nil) unchecked nil 456 410 nil nil)))
(SemanticsProofs
 (expr_determ_step 0
  (expr_determ_step-2 nil 3390559431 3392543238
   ("" (skosimp)
    (("" (expand "deriv_expr")
      ((""
        (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "e")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_expr" -2)
                      (("1" (rewrite "deriv_expr" -3)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "Assign2_var!1"
                                       "v1!1"
                                       "v2!1"
                                       "sigma!1"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -8)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "up?(ex(pstate(tau!2)))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!1"
                                               "m2!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (rewrite "deriv_expr" -2)
                    (("2" (rewrite "deriv_expr" -3)
                      (("2" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (hide -1 -2 -3)
                    (("3" (rewrite "deriv_expr" -2)
                      (("3" (rewrite "deriv_expr" -3)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -10 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -11
                                     "CondExpr1_var!1"
                                     "v1!2"
                                     "v1!3"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -11)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -8)
                                                  (("1"
                                                    (split -8)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -14
                                                           "(m2!1, m2!2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -14
                                                               "CondExpr2_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -14)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -8
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m2!1, m2!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "CondExpr3_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -13)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             -3
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2"
                                             "m1!3"
                                             "m2!3")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (hide -1 -2)
                    (("4" (rewrite "deriv_expr" -2)
                      (("4" (rewrite "deriv_expr" -3)
                        (("4" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -28 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -29
                                     "MethodCall1_var!1"
                                     "a!1"
                                     "a!2"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (replace -15)
                                          (("2"
                                            (split -29)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (inst-cp
                                                       -31
                                                       "(m2!1, m2!2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -32
                                                           "MethodCall3_var!1"
                                                           "pv!1"
                                                           "pv!2"
                                                           "tau1!2"
                                                           "tau2!1"
                                                           "tau2!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -32)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (lift-if
                                                                           -11)
                                                                          (("1"
                                                                            (split
                                                                             -11)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -26)
                                                                                    (("1"
                                                                                      (split
                                                                                       -14)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -28)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "on_method_entry_deterministic")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p!1"
                                                                                                   "md!1"
                                                                                                   "a!2"
                                                                                                   "tau3!1"
                                                                                                   "tau4!1"
                                                                                                   "tau4!2"
                                                                                                   "m3!1"
                                                                                                   "m3!2"
                                                                                                   " LAMBDA (k: upto(m3!1))(p_1: FullProgram)
                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                   (m_1: below(k)):
                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (k_1: upto(m3!1))(p_2: FullProgram)
                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                    sigma2_2: FullState)
                                                                                   (m_2: below(k_1)):
                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                (s: Stmt[Name],
                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                (m_1: below(m_2)):
                                                                                           deriv_stmt
                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                   " LAMBDA (k: upto(m3!2))(p_1: FullProgram)
                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                   (m_1: below(k)):
                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (k_1: upto(m3!2))(p_2: FullProgram)
                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                    sigma2_2: FullState)
                                                                                   (m_2: below(k_1)):
                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                (s: Stmt[Name],
                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                (m_1: below(m_2)):
                                                                                           deriv_stmt
                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -19
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -32)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -20
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -33)
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -14
                                                                                                                       "body(md!1)"
                                                                                                                       "tau5!1"
                                                                                                                       "tau6!1"
                                                                                                                       "tau6!2"
                                                                                                                       "m4!1"
                                                                                                                       "m4!2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -15)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -16)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -24)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -40)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -28)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "on_method_exit_normal_deterministic")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p!1"
                                                                                                                                                       "md!1"
                                                                                                                                                       "a!2"
                                                                                                                                                       "tau7!2"
                                                                                                                                                       "tau8!1"
                                                                                                                                                       "tau8!2"
                                                                                                                                                       "m6!1"
                                                                                                                                                       "m6!2"
                                                                                                                                                       " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                       " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -32)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -49
                                                                                                                                                               "(m1!3, m2!3)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -49
                                                                                                                                                                   "c!1"
                                                                                                                                                                   "v1!2"
                                                                                                                                                                   "v2!2"
                                                                                                                                                                   "sigma!2"
                                                                                                                                                                   "sigma1!2"
                                                                                                                                                                   "sigma2!2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       -49)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -24
                                                                                                                                                                           "c!2"
                                                                                                                                                                           "sigma!3"
                                                                                                                                                                           "sigma1!3"
                                                                                                                                                                           "sigma2!3"
                                                                                                                                                                           "m1!4"
                                                                                                                                                                           "m2!4")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               -22
                                                                                                                                                               "c!1"
                                                                                                                                                               "sigma!2"
                                                                                                                                                               "sigma1!2"
                                                                                                                                                               "sigma2!2"
                                                                                                                                                               "m1!3"
                                                                                                                                                               "m2!3")
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "on_method_exit_exceptional_deterministic")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p!1"
                                                                                                                                                       "md!1"
                                                                                                                                                       "a!2"
                                                                                                                                                       "tau7!2"
                                                                                                                                                       "tau8!1"
                                                                                                                                                       "tau8!2"
                                                                                                                                                       "m6!1"
                                                                                                                                                       "m6!2"
                                                                                                                                                       " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                       " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -31)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -48
                                                                                                                                                               "(m1!3, m2!3)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -48
                                                                                                                                                                   "c!1"
                                                                                                                                                                   "v1!2"
                                                                                                                                                                   "v2!2"
                                                                                                                                                                   "sigma!2"
                                                                                                                                                                   "sigma1!2"
                                                                                                                                                                   "sigma2!2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       -48)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -23
                                                                                                                                                                           "c!2"
                                                                                                                                                                           "sigma!3"
                                                                                                                                                                           "sigma1!3"
                                                                                                                                                                           "sigma2!3"
                                                                                                                                                                           "m1!4"
                                                                                                                                                                           "m2!4")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               -21
                                                                                                                                                               "c!1"
                                                                                                                                                               "sigma!2"
                                                                                                                                                               "sigma1!2"
                                                                                                                                                               "sigma2!2"
                                                                                                                                                               "m1!3"
                                                                                                                                                               "m2!3")
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (inst-cp
                                                                                                                                         -41
                                                                                                                                         "(m5!1, m5!2)")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -42
                                                                                                                                             "res(md!1)"
                                                                                                                                             "w!1"
                                                                                                                                             "w!2"
                                                                                                                                             "tau6!2"
                                                                                                                                             "tau7!1"
                                                                                                                                             "tau7!2")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 -42)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -28)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "on_method_exit_normal_deterministic")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p!1"
                                                                                                                                                                     "md!1"
                                                                                                                                                                     "a!2"
                                                                                                                                                                     "tau7!2"
                                                                                                                                                                     "tau8!1"
                                                                                                                                                                     "tau8!2"
                                                                                                                                                                     "m6!1"
                                                                                                                                                                     "m6!2"
                                                                                                                                                                     " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                     " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -32)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -47
                                                                                                                                                                             "(m1!3, m2!3)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -47
                                                                                                                                                                                 "c!1"
                                                                                                                                                                                 "v1!2"
                                                                                                                                                                                 "v2!2"
                                                                                                                                                                                 "sigma!2"
                                                                                                                                                                                 "sigma1!2"
                                                                                                                                                                                 "sigma2!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -47)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -24
                                                                                                                                                                                         "c!2"
                                                                                                                                                                                         "sigma!3"
                                                                                                                                                                                         "sigma1!3"
                                                                                                                                                                                         "sigma2!3"
                                                                                                                                                                                         "m1!4"
                                                                                                                                                                                         "m2!4")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst
                                                                                                                                                                             -22
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2"
                                                                                                                                                                             "m1!3"
                                                                                                                                                                             "m2!3")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "on_method_exit_exceptional_deterministic")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p!1"
                                                                                                                                                                     "md!1"
                                                                                                                                                                     "a!2"
                                                                                                                                                                     "tau7!2"
                                                                                                                                                                     "tau8!1"
                                                                                                                                                                     "tau8!2"
                                                                                                                                                                     "m6!1"
                                                                                                                                                                     "m6!2"
                                                                                                                                                                     " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                     " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -31)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -46
                                                                                                                                                                             "(m1!3, m2!3)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -46
                                                                                                                                                                                 "c!1"
                                                                                                                                                                                 "v1!2"
                                                                                                                                                                                 "v2!2"
                                                                                                                                                                                 "sigma!2"
                                                                                                                                                                                 "sigma1!2"
                                                                                                                                                                                 "sigma2!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -46)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -23
                                                                                                                                                                                         "c!2"
                                                                                                                                                                                         "sigma!3"
                                                                                                                                                                                         "sigma1!3"
                                                                                                                                                                                         "sigma2!3"
                                                                                                                                                                                         "m1!4"
                                                                                                                                                                                         "m2!4")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst
                                                                                                                                                                             -21
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2"
                                                                                                                                                                             "m1!3"
                                                                                                                                                                             "m2!3")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -17
                                                                                                                                                     "c!1"
                                                                                                                                                     "sigma!2"
                                                                                                                                                     "sigma1!2"
                                                                                                                                                     "sigma2!2"
                                                                                                                                                     "m1!3"
                                                                                                                                                     "m2!3")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -39
                                                                                                           "(m1!3, m2!3)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -39
                                                                                                               "c!1"
                                                                                                               "v1!2"
                                                                                                               "v2!2"
                                                                                                               "sigma!2"
                                                                                                               "sigma1!2"
                                                                                                               "sigma2!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -39)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -16
                                                                                                                       "c!2"
                                                                                                                       "sigma!3"
                                                                                                                       "sigma1!3"
                                                                                                                       "sigma2!3"
                                                                                                                       "m1!4"
                                                                                                                       "m2!4")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -14
                                                                                                           "c!1"
                                                                                                           "sigma!2"
                                                                                                           "sigma1!2"
                                                                                                           "sigma2!2"
                                                                                                           "m1!3"
                                                                                                           "m2!3")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   -24)
                                                                                  (("2"
                                                                                    (split
                                                                                     -24)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -13)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -26)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "on_method_entry_deterministic")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p!1"
                                                                                                           "md!1"
                                                                                                           "a!2"
                                                                                                           "tau3!1"
                                                                                                           "tau4!1"
                                                                                                           "tau4!2"
                                                                                                           "m3!1"
                                                                                                           "m3!2"
                                                                                                           " LAMBDA (k: upto(m3!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                           "LAMBDA (k_1: upto(m3!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                           " LAMBDA (k: upto(m3!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                           "LAMBDA (k_1: upto(m3!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -19
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -31)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -18
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -30)
                                                                                                                            (("1"
                                                                                                                              (inst-cp
                                                                                                                               -13
                                                                                                                               "body(md!1)"
                                                                                                                               "tau5!1"
                                                                                                                               "tau6!1"
                                                                                                                               "tau6!2"
                                                                                                                               "m4!1"
                                                                                                                               "m4!2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -14)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -15)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -23)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -38)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -37)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -26)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "on_method_exit_normal_deterministic")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "p!1"
                                                                                                                                                                 "md!1"
                                                                                                                                                                 "a!2"
                                                                                                                                                                 "tau7!2"
                                                                                                                                                                 "tau8!1"
                                                                                                                                                                 "tau8!2"
                                                                                                                                                                 "m6!1"
                                                                                                                                                                 "m6!2"
                                                                                                                                                                 " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                 " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -30)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -46
                                                                                                                                                                         "(m1!3, m2!3)")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -46
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "v1!2"
                                                                                                                                                                             "v2!2"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -46)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -23
                                                                                                                                                                                     "c!2"
                                                                                                                                                                                     "sigma!3"
                                                                                                                                                                                     "sigma1!3"
                                                                                                                                                                                     "sigma2!3"
                                                                                                                                                                                     "m1!4"
                                                                                                                                                                                     "m2!4")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (inst
                                                                                                                                                                         -21
                                                                                                                                                                         "c!1"
                                                                                                                                                                         "sigma!2"
                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                         "sigma2!2"
                                                                                                                                                                         "m1!3"
                                                                                                                                                                         "m2!3")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "on_method_exit_exceptional_deterministic")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "p!1"
                                                                                                                                                                 "md!1"
                                                                                                                                                                 "a!2"
                                                                                                                                                                 "tau7!2"
                                                                                                                                                                 "tau8!1"
                                                                                                                                                                 "tau8!2"
                                                                                                                                                                 "m6!1"
                                                                                                                                                                 "m6!2"
                                                                                                                                                                 " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                 " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                               (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                               (m_1: below(k)):
                                                                                                                          deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                 "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                               (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                sigma2_2: FullState)
                                                                                                                               (m_2: below(k_1)):
                                                                                                                          deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                    (LAMBDA (p_1: FullProgram)
                                                                                                                                            (s: Stmt[Name],
                                                                                                                                             sigma1_1, sigma2_1: FullState)
                                                                                                                                            (m_1: below(m_2)):
                                                                                                                                       deriv_stmt
                                                                                                                                       (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (split
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -29)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -45
                                                                                                                                                                         "(m1!3, m2!3)")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -45
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "v1!2"
                                                                                                                                                                             "v2!2"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -45)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -22
                                                                                                                                                                                     "c!2"
                                                                                                                                                                                     "sigma!3"
                                                                                                                                                                                     "sigma1!3"
                                                                                                                                                                                     "sigma2!3"
                                                                                                                                                                                     "m1!4"
                                                                                                                                                                                     "m2!4")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (inst
                                                                                                                                                                         -20
                                                                                                                                                                         "c!1"
                                                                                                                                                                         "sigma!2"
                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                         "sigma2!2"
                                                                                                                                                                         "m1!3"
                                                                                                                                                                         "m2!3")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst-cp
                                                                                                                                                 -39
                                                                                                                                                 "(m5!1, m5!2)")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -40
                                                                                                                                                     "res(md!1)"
                                                                                                                                                     "w!1"
                                                                                                                                                     "w!2"
                                                                                                                                                     "tau6!2"
                                                                                                                                                     "tau7!1"
                                                                                                                                                     "tau7!2")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -40)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -27)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "on_method_exit_normal_deterministic")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p!1"
                                                                                                                                                                             "md!1"
                                                                                                                                                                             "a!2"
                                                                                                                                                                             "tau7!2"
                                                                                                                                                                             "tau8!1"
                                                                                                                                                                             "tau8!2"
                                                                                                                                                                             "m6!1"
                                                                                                                                                                             "m6!2"
                                                                                                                                                                             " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                             " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       -31)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -45
                                                                                                                                                                                     "(m1!3, m2!3)")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -45
                                                                                                                                                                                         "c!1"
                                                                                                                                                                                         "v1!2"
                                                                                                                                                                                         "v2!2"
                                                                                                                                                                                         "sigma!2"
                                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                                         "sigma2!2")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -45)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -23
                                                                                                                                                                                                 "c!2"
                                                                                                                                                                                                 "sigma!3"
                                                                                                                                                                                                 "sigma1!3"
                                                                                                                                                                                                 "sigma2!3"
                                                                                                                                                                                                 "m1!4"
                                                                                                                                                                                                 "m2!4")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -21
                                                                                                                                                                                     "c!1"
                                                                                                                                                                                     "sigma!2"
                                                                                                                                                                                     "sigma1!2"
                                                                                                                                                                                     "sigma2!2"
                                                                                                                                                                                     "m1!3"
                                                                                                                                                                                     "m2!3")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "on_method_exit_exceptional_deterministic")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p!1"
                                                                                                                                                                             "md!1"
                                                                                                                                                                             "a!2"
                                                                                                                                                                             "tau7!2"
                                                                                                                                                                             "tau8!1"
                                                                                                                                                                             "tau8!2"
                                                                                                                                                                             "m6!1"
                                                                                                                                                                             "m6!2"
                                                                                                                                                                             " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                             " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                                                   (m_1: below(k)):
                                                                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                                                    sigma2_2: FullState)
                                                                                                                                   (m_2: below(k_1)):
                                                                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                                                                (s: Stmt[Name],
                                                                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                                                                (m_1: below(m_2)):
                                                                                                                                           deriv_stmt
                                                                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       -30)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -44
                                                                                                                                                                                     "(m1!3, m2!3)")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -44
                                                                                                                                                                                         "c!1"
                                                                                                                                                                                         "v1!2"
                                                                                                                                                                                         "v2!2"
                                                                                                                                                                                         "sigma!2"
                                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                                         "sigma2!2")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -44)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -22
                                                                                                                                                                                                 "c!2"
                                                                                                                                                                                                 "sigma!3"
                                                                                                                                                                                                 "sigma1!3"
                                                                                                                                                                                                 "sigma2!3"
                                                                                                                                                                                                 "m1!4"
                                                                                                                                                                                                 "m2!4")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -20
                                                                                                                                                                                     "c!1"
                                                                                                                                                                                     "sigma!2"
                                                                                                                                                                                     "sigma1!2"
                                                                                                                                                                                     "sigma2!2"
                                                                                                                                                                                     "m1!3"
                                                                                                                                                                                     "m2!3")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -16
                                                                                                                                                             "c!1"
                                                                                                                                                             "sigma!2"
                                                                                                                                                             "sigma1!2"
                                                                                                                                                             "sigma2!2"
                                                                                                                                                             "m1!3"
                                                                                                                                                             "m2!3")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -37
                                                                                                                   "(m1!3, m2!3)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -37
                                                                                                                       "c!1"
                                                                                                                       "v1!2"
                                                                                                                       "v2!2"
                                                                                                                       "sigma!2"
                                                                                                                       "sigma1!2"
                                                                                                                       "sigma2!2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -37)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -15
                                                                                                                               "c!2"
                                                                                                                               "sigma!3"
                                                                                                                               "sigma1!3"
                                                                                                                               "sigma2!3"
                                                                                                                               "m1!4"
                                                                                                                               "m2!4")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -13
                                                                                                                   "c!1"
                                                                                                                   "sigma!2"
                                                                                                                   "sigma1!2"
                                                                                                                   "sigma2!2"
                                                                                                                   "m1!3"
                                                                                                                   "m2!3")
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "c!1"
                                                                   "sigma!2"
                                                                   "sigma1!2"
                                                                   "sigma2!2"
                                                                   "m1!3"
                                                                   "m2!3")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!3"
                                                 "m2!3")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skosimp*)
                  (("5" (rewrite "deriv_expr" -2)
                    (("5" (rewrite "deriv_expr" -3)
                      (("5" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (rewrite "deriv_expr" -2)
                    (("6" (rewrite "deriv_expr" -3)
                      (("6" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "well_founded?_product")
          (("2"
            (inst -1 "LAMBDA(x, y : nat) : x < y"
             "LAMBDA(x, y : nat) : x < y")
            (("2" (assert)
              (("2" (use "wf_nat") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((deriv_expr const-decl "bool" Semantics nil)
    (well_founded?_product formula-decl nil WF nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (on_method_exit_normal_deterministic formula-decl nil
     SemanticsProofs nil)
    (on_method_exit_exceptional_deterministic formula-decl nil
     SemanticsProofs nil)
    (on_method_entry_deterministic formula-decl nil SemanticsProofs
     nil)
    (CondExpr adt-constructor-decl
     "[[Expr, Expr, Expr] -> (CondExpr?)]" Expr_adt nil)
    (CondExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BoolExpr type-decl nil BoolExpr_adt nil)
    (BExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BExpr adt-constructor-decl "[BoolExpr -> (BExpr?)]" Expr_adt nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Expr_adt
     nil)
    (Assign? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Expr_induction formula-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil) (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Stmt type-decl nil Stmt_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   186947 178300 t nil)
  (expr_determ_step-1 nil 3390558045 nil
   ("" (skosimp)
    (("" (expand "deriv_expr")
      ((""
        (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (split -1)
          (("1" (propax) nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "e")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_expr" -2)
                      (("1" (rewrite "deriv_expr" -3)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "Assign2_var!1"
                                       "v1!1"
                                       "v2!1"
                                       "sigma!1"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -8)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "up?(ex(pstate(tau!2)))")
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (assert)
                                                  nil)))))))
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!1"
                                               "m2!1")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))
                                   ("2" (assert) nil)
                                   ("3" (assert) nil)))))))))))))))))))
                 ("2" (skosimp*)
                  (("2" (rewrite "deriv_expr" -2)
                    (("2" (rewrite "deriv_expr" -3)
                      (("2" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (assert) nil)))))))))))))
                 ("3" (skosimp*)
                  (("3" (hide -1 -2 -3)
                    (("3" (rewrite "deriv_expr" -2)
                      (("3" (rewrite "deriv_expr" -3)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -10 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -11
                                     "CondExpr1_var!1"
                                     "v1!2"
                                     "v1!3"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -11)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -8)
                                                  (("1"
                                                    (split -8)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -14
                                                           "(m2!1, m2!2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -14
                                                               "CondExpr2_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -14)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -8
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m2!1, m2!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "CondExpr3_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -13)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             -3
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2"
                                             "m1!3"
                                             "m2!3")
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))))
                 ("4" (skosimp*)
                  (("4" (hide -1 -2)
                    (("4" (rewrite "deriv_expr" -2)
                      (("4" (rewrite "deriv_expr" -3)
                        (("4" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -26 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -27
                                     "MethodCall1_var!1"
                                     "a!1"
                                     "a!2"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -27)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst-cp
                                                 -29
                                                 "(m2!1, m2!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -30
                                                     "MethodCall3_var!1"
                                                     "pv!1"
                                                     "pv!2"
                                                     "tau1!2"
                                                     "tau2!1"
                                                     "tau2!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -30)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (lift-if
                                                                   -11)
                                                                  (("1"
                                                                    (split
                                                                     -11)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -25)
                                                                            (("1"
                                                                              (split
                                                                               -14)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -27)
                                                                                      (("1"
                                                                                        (comment
                                                                                         "here we should use a lemma about on_method_entry")
                                                                                        (("1"
                                                                                          (case
                                                                                           "tau4!1 = tau4!2")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -18
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -30)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -19
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -31)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -13
                                                                                                       "body(md!1)"
                                                                                                       "tau5!1"
                                                                                                       "tau6!1"
                                                                                                       "tau6!2"
                                                                                                       "m4!1"
                                                                                                       "m4!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -13)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -22)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -36)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -25)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (comment
                                                                                                                                   "lemma about on_method_exit_normal needed")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "tau8!1 = tau8!2")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -28
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (postpone)
                                                                                                                                            nil)))))))
                                                                                                                                     ("2"
                                                                                                                                      (postpone)
                                                                                                                                      nil)))))))))
                                                                                                                             ("2"
                                                                                                                              (postpone)
                                                                                                                              nil)))))))))))))
                                                                                                                 ("2"
                                                                                                                  (postpone)
                                                                                                                  nil)))))))))))))))))))))))
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (postpone)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (postpone)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (postpone)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (postpone)
                                          nil)))))))))))))))))))))))))
                 ("5" (postpone) nil) ("6" (postpone) nil)))))))))
         ("2" (postpone) nil))))))
    nil)
   unfinished nil nil nil nil nil))
 (stmt_determ_step 0
  (stmt_determ_step-1 nil 3390558061 3392543255
   ("" (skosimp)
    ((""
      (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
      (("1" (assert)
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "c")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_stmt" -1)
                      (("1" (rewrite "deriv_stmt" -2)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (lemma "execute_CaseJML_deterministic")
                                (("2"
                                  (inst
                                   -1
                                   "p!1"
                                   "CaseJML1_var!1"
                                   "sigma!1"
                                   "sigma1!1"
                                   "sigma2!1"
                                   "x!1`1"
                                   "x!1`2"
                                   " LAMBDA (k: upto(x!1`1))(p_1: FullProgram)
                                                                           (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                           (m_1: below(k)):
                                                                      deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                   " LAMBDA (k: upto(x!1`2))(p_1: FullProgram)
                                                                           (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                           (m_1: below(k)):
                                                                      deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst -7 "(m1!1, m2!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -7
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (hide -1 -2)
                    (("2" (rewrite "deriv_stmt" -1)
                      (("2" (rewrite "deriv_stmt" -2)
                        (("2" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (use
                                 "expr_determ_step"
                                 ("v1"
                                  "v!1"
                                  "v2"
                                  "v!2"
                                  "sigma1"
                                  "tau!1"
                                  "sigma2"
                                  "tau!2"))
                                (("2"
                                  (use
                                   "expr_determ_step"
                                   ("v1"
                                    "v!1"
                                    "v2"
                                    "v!2"
                                    "sigma1"
                                    "tau!1"
                                    "sigma2"
                                    "tau!2"
                                    "n1"
                                    "m1!1"
                                    "n2"
                                    "m1!2"))
                                  (("2"
                                    (expand "deriv_expr" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -12
                                                     "(m2!1, m2!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split -7)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -13
                                                                 "IfThenElse2_var!1"
                                                                 "tau!2"
                                                                 "sigma1!1"
                                                                 "sigma2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -12
                                                                 "IfThenElse3_var!1"
                                                                 "tau!2"
                                                                 "sigma1!1"
                                                                 "sigma2!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst -12 "(m1!3, m2!3)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -12
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (hide -1 -2)
                    (("3" (rewrite "deriv_stmt" -1)
                      (("3" (rewrite "deriv_stmt" -2)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -7 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -8
                                     "Sequence1_var!1"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -7 "(m2!1, m2!2)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -7
                                               "Sequence2_var!1"
                                               "tau!2"
                                               "sigma1!1"
                                               "sigma2!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (rewrite "deriv_stmt" -1)
                    (("4" (rewrite "deriv_stmt" -2)
                      (("4" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (lemma "execute_set_deterministic")
                              (("2"
                                (inst
                                 -1
                                 "p!1"
                                 "Set1_var!1"
                                 "Set2_var!1"
                                 "sigma!1"
                                 "sigma1!1"
                                 "sigma2!1"
                                 "x!1`1"
                                 "x!1`2"
                                 " LAMBDA (k: upto(x!1`1))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                 "LAMBDA (k_1: upto(x!1`1))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                 " LAMBDA (k: upto(x!1`2))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                 "LAMBDA (k_1: upto(x!1`2))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (use "expr_determ_step")
                                        (("2"
                                          (expand "deriv_expr" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -9
                                                   "(m1!2, m2!2)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -9
                                                       "c!2"
                                                       "sigma!3"
                                                       "sigma1!3"
                                                       "sigma2!3")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (inst -7 "(m1!1, m2!1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst
                                             -7
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skosimp*)
                  (("5" (rewrite "deriv_stmt" -1)
                    (("5" (rewrite "deriv_stmt" -2)
                      (("5" (flatten) (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (rewrite "deriv_stmt" -1)
                    (("6" (rewrite "deriv_stmt" -2)
                      (("6" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (use
                                 "expr_determ_step"
                                 ("v1"
                                  "v!1"
                                  "v2"
                                  "v!2"
                                  "sigma1"
                                  "sigma1!1"
                                  "sigma2"
                                  "sigma2!1"
                                  "n1"
                                  "x!1`1 - 1"
                                  "n2"
                                  "x!1`2 - 1"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deriv_expr" -1)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -7 "(m1!1, m2!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -7
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (skosimp*)
                  (("7" (rewrite "deriv_stmt" -1)
                    (("7" (rewrite "deriv_stmt" -2)
                      (("7" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (skosimp*)
                  (("8" (hide -1 -2 -3)
                    (("8" (rewrite "deriv_stmt" -1)
                      (("8" (rewrite "deriv_stmt" -2)
                        (("8" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -11 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -12
                                     "TryCatch1_var!1"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -12)
                                          (("2"
                                            (lift-if -3)
                                            (("2"
                                              (split -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst-cp
                                                     -12
                                                     "(m2!1, m2!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -13
                                                         "TryCatch2_var!1"
                                                         "update_PState(tau1!2, catch)"
                                                         "tau2!1"
                                                         "tau2!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -13)
                                                              (("1"
                                                                (replace
                                                                 -14)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -12
                                                                     "(m3!1, m3!2)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -12
                                                                         "TryCatch3_var!1"
                                                                         "update_PState(tau2!2, catch)"
                                                                         "tau3!1"
                                                                         "tau3!2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -12)
                                                                              (("1"
                                                                                (replace
                                                                                 -13)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "deriv_stmt"
                                                     -1)
                                                    (("2"
                                                      (rewrite
                                                       "deriv_stmt"
                                                       -8)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -9)
                                                              (("2"
                                                                (inst
                                                                 -13
                                                                 "(m3!1, m3!2)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -13
                                                                     "TryCatch3_var!1"
                                                                     "update_PState(tau2!2, catch)"
                                                                     "tau3!1"
                                                                     "tau3!2")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -13)
                                                                          (("2"
                                                                            (replace
                                                                             -14)
                                                                            (("2"
                                                                              (replace
                                                                               -6
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("9" (skosimp*)
                  (("9" (hide -1)
                    (("9" (rewrite "deriv_stmt" -1)
                      (("9" (rewrite "deriv_stmt" -2)
                        (("9" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (inst -5 "(x!1`1 - 1, x!1`2 - 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "IfThenElse(While1_var!1,
                            While(While1_var!1, While2_var!1), Skip)"
                                     "sigma!1"
                                     "sigma1!1"
                                     "sigma2!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "well_founded?_product")
        (("2"
          (inst -1 "LAMBDA(x, y : nat) : x < y"
           "LAMBDA(x, y : nat) : x < y")
          (("2" (use "wf_nat") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Stmt_adt
     nil)
    (While? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (TryCatch adt-constructor-decl
     "[[Stmt, Stmt, Stmt] -> (TryCatch?)]" Stmt_adt nil)
    (TryCatch? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (catch const-decl "PState" State nil)
    (Throw? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Throw adt-constructor-decl "(Throw?)" Stmt_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (Skip? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Stmt_adt nil)
    (execute_set_deterministic formula-decl nil SemanticsProofs nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Stmt_adt nil)
    (Sequence? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Stmt_adt nil)
    (IfThenElse? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expr_determ_step formula-decl nil SemanticsProofs nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (execute_CaseJML_deterministic formula-decl nil SemanticsProofs
     nil)
    (Stmt_induction formula-decl nil Stmt_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (well_founded?_product formula-decl nil WF nil))
   17052 15380 t nil))
 (expr_determ 0
  (expr_determ-1 nil 3390558082 3392543256
   ("" (skosimp*)
    (("" (use "expr_determ_step")
      (("" (assert)
        (("" (expand "derives")
          (("" (skosimp*)
            (("" (inst -1 "n!1" "n!2")
              (("" (assert)
                (("" (split -1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (use "stmt_determ_step")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((expr_determ_step formula-decl nil SemanticsProofs nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (stmt_determ_step formula-decl nil SemanticsProofs nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Stmt type-decl nil Stmt_adt nil))
   534 390 t nil))
 (stmt_determ 0
  (stmt_determ-1 nil 3390558094 3392543258
   ("" (skosimp*)
    (("" (use "stmt_determ_step")
      (("" (expand "derives")
        (("" (skosimp*)
          (("" (inst?) (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   unfinished
   ((stmt_determ_step formula-decl nil SemanticsProofs nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   1688 190 nil nil))
 (deriv_expr_bottom_iff_exception_step 0
  (deriv_expr_bottom_iff_exception_step-1 nil 3391148989 3393308828
   ("" (skosimp)
    (("" (expand "deriv_expr")
      (("" (use "wf_induction[nat, <]")
        (("1"
          (inst -1
           "LAMBDA(n : nat) : FORALL(e : Expr)(sigma1, sigma2: FullState, v: Val):
        deriv_expr(p!1)(e, sigma1, v, sigma2)(n)
                  (LAMBDA (p: FullProgram)
                          (c: Stmt[Name], sigma1, sigma2: FullState)
                          (m: below(n)):
                     deriv_stmt(p)(c, sigma1, sigma2)(m))
         IMPLIES Bottom?(v) = up?(ex(pstate(sigma2)))")
          (("1" (split -1)
            (("1" (skosimp*)
              (("1" (assert)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (induct "e")
                  (("1" (skosimp*)
                    (("1" (hide -1)
                      (("1" (rewrite "deriv_expr" -1)
                        (("1" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -3)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "update_PState")
                                                  (("2"
                                                    (expand
                                                     "update_PState_type")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "sigma2!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (hide -2)
                      (("2" (rewrite "deriv_expr" -1)
                        (("2" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (hide -1 -2 -3)
                      (("3" (rewrite "deriv_expr" -1)
                        (("3" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -5 "m1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -6)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (hide -1 -2)
                      (("4" (rewrite "deriv_expr" -1)
                        (("4" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (typepred "update_PState")
                                  (("2"
                                    (expand "update_PState_type")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "tau8!1"
                                       "sigma2!1"
                                       "update_local(name(arg(md!1)), old_val_arg!1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (expand "update_local")
                                            (("2"
                                              (split -14)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -15)
                                                    (("2"
                                                      (split -13)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst-cp
                                                             -16
                                                             "m5!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?
                                                                 -17)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "on_method_exit_exceptional")
                                                                      (("2"
                                                                        (expand
                                                                         "on_method_event_type")
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*)
                    (("5" (hide -2)
                      (("5" (rewrite "deriv_expr" -1)
                        (("5" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (skosimp*)
                    (("6" (hide -2)
                      (("6" (rewrite "deriv_expr" -1)
                        (("6" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "eval")
                                (("2"
                                  (lift-if)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "wf_nat") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((deriv_expr const-decl "bool" Semantics nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (Val type-decl nil Val_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Expr_induction formula-decl nil Expr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (update const-decl "PState" State nil)
    (is_local const-decl "boolean" State nil)
    (update_local const-decl "PState" State nil)
    (is_field const-decl "boolean" State nil)
    (update_field const-decl "PState" State nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Assign? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Expr_adt
     nil)
    (BoolExpr type-decl nil BoolExpr_adt nil)
    (BExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BExpr adt-constructor-decl "[BoolExpr -> (BExpr?)]" Expr_adt nil)
    (CondExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (CondExpr adt-constructor-decl
     "[[Expr, Expr, Expr] -> (CondExpr?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (eval const-decl "Val" Evaluation nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   519155 6880 t shostak))
 (deriv_boolean_expr_type 0
  (deriv_boolean_expr_type-1 nil 3393308856 3393310808
   ("" (skolem!)
    (("" (induct "e")
      (("1" (skosimp*) nil nil)
       ("2" (skosimp*)
        (("2" (expand "deriv_expr")
          (("2" (expand "deriv_expr") (("2" (ground) nil nil)) nil))
          nil))
        nil)
       ("3" (skosimp*) nil nil) ("4" (skosimp*) nil nil)
       ("5" (skosimp*) nil nil) ("6" (skosimp*) nil nil))
      nil))
    nil)
   proved
   ((Expr type-decl nil Expr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (Val type-decl nil Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (program formal-const-decl "[FullProgram -> Program]"
     SemanticsProofs nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsProofs
     nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsProofs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (BExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Expr_induction formula-decl nil Expr_adt nil)
    (deriv_expr def-decl "bool" Semantics nil))
   135401 1120 t shostak)))
(SemanticsJML
 (wf_initial_ghost_state_TCC1 0
  (wf_initial_ghost_state_TCC1-1 nil 3392370163 3392543271
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   215 180 nil nil))
 (wf_initial_ghost_state 0
  (wf_initial_ghost_state-1 nil 3392370167 3392543271
   ("" (skosimp*)
    (("" (expand "wf_ghoststate")
      (("" (skosimp*)
        (("" (expand "is_ghost")
          (("" (replace -1 :hide? t)
            (("" (assert)
              (("" (expand "var_names")
                (("" (expand "get_GhostDecl")
                  (("" (lift-if)
                    (("" (assert)
                      (("" (split 1)
                        (("1" (skosimp*)
                          (("1"
                            (typepred "choose({g: FieldDecl[Name] |
                            getGhostDecls(program(p!1))(g) AND
                             name(g) = vn!1})`init_val")
                            (("1" (expand "defined?")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "nonempty_exists")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (rewrite "nonempty_exists")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    nil nil nil (nonempty_exists formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsJML nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil)
   334 250 t shostak))
 (execute_set_TCC1 0
  (execute_set_TCC1-1 nil 3390908875 3392543271
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   117 80 nil nil))
 (execute_set_TCC2 0
  (execute_set_TCC2-1 nil 3390908875 3392543271
   ("" (subtype-tcc) nil nil) unfinished nil 19 20 nil nil))
 (execute_set_TCC3 0
  (execute_set_TCC3-1 nil 3390908875 3392543271
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil))
   270 190 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3390908875 3392543271
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   121 90 nil nil))
 (execute_CaseJML_TCC2 0
  (execute_CaseJML_TCC2-1 nil 3390908875 3392543272
   ("" (subtype-tcc) nil nil) unfinished nil 21 30 nil nil))
 (execute_CaseJML_TCC3 0
  (execute_CaseJML_TCC3-1 nil 3390908875 3392543272
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil))
   181 140 nil nil))
 (on_method_entry_TCC1 0
  (on_method_entry_TCC1-1 nil 3390908875 3392543272
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil))
   563 500 nil nil))
 (on_method_entry_TCC2 0
  (on_method_entry_TCC2-1 nil 3390908875 3392543273
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   698 600 nil nil))
 (on_method_entry_TCC3 0
  (on_method_entry_TCC3-1 nil 3390908875 3392543274
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   766 640 nil nil))
 (on_method_entry_TCC4 0
  (on_method_entry_TCC4-1 nil 3390908875 3392543274
   ("" (subtype-tcc) nil nil) unfinished
   ((Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil))
   455 430 nil nil))
 (on_method_entry_TCC5 0
  (on_method_entry_TCC5-1 nil 3390908875 3392543275
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   826 740 nil nil))
 (on_method_exit_normal_TCC1 0
  (on_method_exit_normal_TCC1-1 nil 3390908875 3392543275
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   419 350 nil nil))
 (on_method_exit_normal_TCC2 0
  (on_method_exit_normal_TCC2-1 nil 3390908875 3392543276
   ("" (subtype-tcc) nil nil) unfinished nil 280 280 nil nil))
 (on_method_exit_normal_TCC3 0
  (on_method_exit_normal_TCC3-1 nil 3390908875 3392543276
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   436 370 nil nil))
 (on_method_exit_normal_TCC4 0
  (on_method_exit_normal_TCC4-1 nil 3390908875 3392543277
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil))
   694 610 nil nil))
 (on_method_exit_normal_TCC5 0
  (on_method_exit_normal_TCC5-1 nil 3390908875 3392543278
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   861 760 nil nil))
 (on_method_exit_exceptional_TCC1 0
  (on_method_exit_exceptional_TCC1-1 nil 3390908875 3392543278
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   374 310 nil nil))
 (on_method_exit_exceptional_TCC2 0
  (on_method_exit_exceptional_TCC2-1 nil 3390908875 3392543278
   ("" (subtype-tcc) nil nil) unfinished nil 241 240 nil nil))
 (on_method_exit_exceptional_TCC3 0
  (on_method_exit_exceptional_TCC3-1 nil 3390908875 3392543279
   ("" (subtype-tcc) nil nil) unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil))
   592 520 nil nil))
 (on_method_exit_exceptional_TCC4 0
  (on_method_exit_exceptional_TCC4-1 nil 3390908875 3392545389
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (lift-if)
                (("1" (assert)
                  (("1" (split -6)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (typepred "update_PState")
                        (("2" (expand "update_PState_type")
                          (("2" (inst?)
                            (("2" (inst -1 "s2!1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   unfinished
   ((down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (raise const-decl "PState" State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FullState formal-type-decl nil SemanticsJML nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsJML nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (FullProgram formal-type-decl nil SemanticsJML nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsJML nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState formal-const-decl "(update_PState_type)"
     SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   58874 9140 t nil)))

