(Evaluation
 (eval_TCC1 0
  (eval_TCC1-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   121 80 nil nil))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   82 80 nil nil))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   116 90 nil nil))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   118 70 nil nil))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   106 90 nil nil))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   82 80 nil nil))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   105 90 nil nil))
 (eval_TCC8 0
  (eval_TCC8-1 nil 3371189456 3390732283 ("" (termination-tcc) nil nil)
   proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[NumExpr])" NumExpr_adt nil))
   114 90 nil nil))
 (eval_TCC9 0
  (eval_TCC9-1 nil 3371189456 3390732283 ("" (subtype-tcc) nil nil)
   proved ((/= const-decl "boolean" notequal nil)) 54 60 nil nil))
 (eval_TCC10 0
  (eval_TCC10-1 nil 3371189456 3390732284
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   114 90 nil nil))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3371189456 3390732284
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   123 100 nil nil))
 (eval_TCC12 0
  (eval_TCC12-1 nil 3371189456 3390732284
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   95 90 nil nil))
 (eval_TCC13 0
  (eval_TCC13-1 nil 3371189456 3390732284
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   114 90 nil nil))
 (eval_TCC14 0
  (eval_TCC14-1 nil 3371189456 3390732284
   ("" (termination-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil Evaluation nil)
    (<< adt-def-decl "(well_founded?[BoolExpr])" BoolExpr_adt nil))
   117 90 nil nil))
 (eval_TCC15 0
  (eval_TCC15-1 nil 3390732272 3390732284 ("" (subtype-tcc) nil nil)
   proved nil 40 40 nil nil)))
(SemanticsTypes)
(Semantics
 (deriv_expr_TCC1 0
  (deriv_expr_TCC1-1 nil 3371191509 3390734855
   ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 29 30 t nil))
 (deriv_expr_TCC2 0
  (deriv_expr_TCC2-1 nil 3371191509 3390734855
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 100 70 t
   nil))
 (deriv_expr_TCC3 0
  (deriv_expr_TCC3-1 nil 3371191509 3390734855
   ("" (subtype-tcc) nil nil) proved nil 38 40 nil nil))
 (deriv_expr_TCC4 0
  (deriv_expr_TCC4-1 nil 3371191509 3390734855
   ("" (termination-tcc) nil nil) proved nil 53 50 nil nil))
 (deriv_expr_TCC5 0
  (deriv_expr_TCC5-1 nil 3371191509 3390734856
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   556 470 nil nil))
 (deriv_expr_TCC6 0
  (deriv_expr_TCC6-1 nil 3371191509 3390734856
   ("" (subtype-tcc) nil nil) proved nil 66 60 nil nil))
 (deriv_expr_TCC7 0
  (deriv_expr_TCC7-1 nil 3371191509 3390734857
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   773 690 nil nil))
 (deriv_expr_TCC8 0
  (deriv_expr_TCC8-1 nil 3371191509 3390734857
   ("" (skosimp*) (("" (replace -4 2) (("" (assert) nil nil)) nil))
    nil)
   proved nil 607 550 t nil))
 (deriv_expr_TCC9 0
  (deriv_expr_TCC9-1 nil 3371191509 3390734858
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   910 800 nil nil))
 (deriv_expr_TCC10 0
  (deriv_expr_TCC10-1 nil 3371191509 3390734859
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1058 880 nil nil))
 (deriv_expr_TCC11 0
  (deriv_expr_TCC11-1 nil 3371191509 3390734860
   ("" (subtype-tcc) nil nil) proved nil 324 330 nil nil))
 (deriv_expr_TCC12 0
  (deriv_expr_TCC12-1 nil 3371191509 3390734861
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1150 1010 nil nil))
 (deriv_expr_TCC13 0
  (deriv_expr_TCC13-1 nil 3371191509 3390734862
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 778 660 t
   nil))
 (deriv_expr_TCC14 0
  (deriv_expr_TCC14-1 nil 3390110778 3390734863
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   1790 1570 nil nil))
 (deriv_expr_TCC15 0
  (deriv_expr_TCC15-1 nil 3390110778 3390734865
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   1897 1620 nil nil))
 (deriv_expr_TCC16 0
  (deriv_expr_TCC16-1 nil 3390110778 3390734867
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   1945 1720 nil nil))
 (deriv_expr_TCC17 0
  (deriv_expr_TCC17-1 nil 3390110778 3390734871
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil Semantics nil)
    (lookup_local const-decl "Val" State nil)
    (update_stack const-decl "FullState" Semantics nil))
   3416 1750 nil nil))
 (deriv_stmt_TCC1 0
  (deriv_stmt_TCC1-1 nil 3371191509 3390734871
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 483 420 t
   nil))
 (deriv_stmt_TCC2 0
  (deriv_stmt_TCC2-1 nil 3371191509 3390734872
   ("" (termination-tcc) nil nil) proved nil 726 660 nil nil))
 (deriv_stmt_TCC3 0
  (deriv_stmt_TCC3-1 nil 3371191509 3390734874
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_expr def-decl "bool" Semantics nil))
   2016 1760 nil nil))
 (deriv_stmt_TCC4 0
  (deriv_stmt_TCC4-1 nil 3371191509 3390734875
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1226 1030 nil nil))
 (deriv_stmt_TCC5 0
  (deriv_stmt_TCC5-1 nil 3371191509 3390734876
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   782 690 nil nil))
 (deriv_stmt_TCC6 0
  (deriv_stmt_TCC6-1 nil 3371191509 3390734876
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   533 430 nil nil))
 (deriv_stmt_TCC7 0
  (deriv_stmt_TCC7-1 nil 3371191509 3390734877
   ("" (subtype-tcc) nil nil) proved nil 282 250 nil nil))
 (deriv_stmt_TCC8 0
  (deriv_stmt_TCC8-1 nil 3371191509 3390734878
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   865 710 nil nil))
 (deriv_stmt_TCC9 0
  (deriv_stmt_TCC9-1 nil 3371191509 3390734879
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1267 1080 nil nil))
 (deriv_stmt_TCC10 0
  (deriv_stmt_TCC10-1 nil 3371191509 3390734880
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   1275 1070 nil nil))
 (deriv_stmt_TCC11 0
  (deriv_stmt_TCC11-1 nil 3371191509 3390734881
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   935 810 nil nil))
 (deriv_stmt_TCC12 0
  (deriv_stmt_TCC12-1 nil 3371191509 3390734881
   ("" (subtype-tcc) nil nil) proved nil 289 260 nil nil)))
(SemanticsProofs
 (on_method_entry_deterministic_TCC1 0
  (on_method_entry_deterministic_TCC1-1 nil 3390558040 3390734881
   ("" (subtype-tcc) nil nil) proved nil 17 10 nil nil))
 (on_method_entry_deterministic_TCC2 0
  (on_method_entry_deterministic_TCC2-1 nil 3390558040 3390734881
   ("" (subtype-tcc) nil nil) proved nil 17 20 nil nil))
 (on_method_entry_deterministic_TCC3 0
  (on_method_entry_deterministic_TCC3-1 nil 3390559422 3390734881
   ("" (subtype-tcc) nil nil) proved nil 30 30 nil nil))
 (expr_determ_step 0
  (expr_determ_step-2 nil 3390559431 3390735039
   ("" (skosimp)
    (("" (expand "deriv_expr")
      ((""
        (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "e")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_expr" -2)
                      (("1" (rewrite "deriv_expr" -3)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "Assign2_var!1"
                                       "v1!1"
                                       "v2!1"
                                       "sigma!1"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -8)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "up?(ex(pstate(tau!2)))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!1"
                                               "m2!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (rewrite "deriv_expr" -2)
                    (("2" (rewrite "deriv_expr" -3)
                      (("2" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (hide -1 -2 -3)
                    (("3" (rewrite "deriv_expr" -2)
                      (("3" (rewrite "deriv_expr" -3)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -10 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -11
                                     "CondExpr1_var!1"
                                     "v1!2"
                                     "v1!3"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -11)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -8)
                                                  (("1"
                                                    (split -8)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -14
                                                           "(m2!1, m2!2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -14
                                                               "CondExpr2_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -14)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -8
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m2!1, m2!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "CondExpr3_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -13)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             -3
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2"
                                             "m1!3"
                                             "m2!3")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (hide -1 -2)
                    (("4" (rewrite "deriv_expr" -2)
                      (("4" (rewrite "deriv_expr" -3)
                        (("4" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -26 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -27
                                     "MethodCall1_var!1"
                                     "a!1"
                                     "a!2"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (replace -14)
                                          (("2"
                                            (split -27)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (inst-cp
                                                       -29
                                                       "(m2!1, m2!2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -30
                                                           "MethodCall3_var!1"
                                                           "pv!1"
                                                           "pv!2"
                                                           "tau1!2"
                                                           "tau2!1"
                                                           "tau2!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -30)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (replace

                                                                       -2)
                                                                      (("1"
                                                                        (replace

                                                                         -3)
                                                                        (("1"
                                                                          (lift-if
                                                                           -11)
                                                                          (("1"
                                                                            (split
                                                                             -11)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace

                                                                                   -3
                                                                                   :dir

                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace

                                                                                     -25)
                                                                                    (("1"
                                                                                      (split
                                                                                       -14)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace

                                                                                             -2
                                                                                             :dir

                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace

                                                                                               -27)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "on_method_entry_deterministic")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p!1"
                                                                                                   "md!1"
                                                                                                   "a!2"
                                                                                                   "tau3!1"
                                                                                                   "tau4!1"
                                                                                                   "tau4!2"
                                                                                                   "m3!1"
                                                                                                   "m3!2"
                                                                                                   " LAMBDA (k: upto(m3!1))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (k_1: upto(m3!1))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                   " LAMBDA (k: upto(m3!2))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (k_1: upto(m3!2))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace

                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace

                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace

                                                                                                               -19
                                                                                                               :dir

                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (replace

                                                                                                                 -31)
                                                                                                                (("1"
                                                                                                                  (replace

                                                                                                                   -20
                                                                                                                   :dir

                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (replace

                                                                                                                     -32)
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -14
                                                                                                                       "body(md!1)"
                                                                                                                       "tau5!1"
                                                                                                                       "tau6!1"
                                                                                                                       "tau6!2"
                                                                                                                       "m4!1"
                                                                                                                       "m4!2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace

                                                                                                                               -15)
                                                                                                                              (("1"
                                                                                                                                (replace

                                                                                                                                 -16)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -24)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (replace

                                                                                                                                           -2
                                                                                                                                           :dir

                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (replace

                                                                                                                                             -38)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -27)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "on_method_exit_normal_deterministic")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p!1"
                                                                                                                                                       "md!1"
                                                                                                                                                       "a!2"
                                                                                                                                                       "tau7!2"
                                                                                                                                                       "tau8!1"
                                                                                                                                                       "tau8!2"
                                                                                                                                                       "m6!1"
                                                                                                                                                       "m6!2"
                                                                                                                                                       " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                       " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace

                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace

                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -46
                                                                                                                                                               "(m1!3, m2!3)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -46
                                                                                                                                                                   "c!1"
                                                                                                                                                                   "v1!2"
                                                                                                                                                                   "v2!2"
                                                                                                                                                                   "sigma!2"
                                                                                                                                                                   "sigma1!2"
                                                                                                                                                                   "sigma2!2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       -46)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -24
                                                                                                                                                                           "c!2"
                                                                                                                                                                           "sigma!3"
                                                                                                                                                                           "sigma1!3"
                                                                                                                                                                           "sigma2!3"
                                                                                                                                                                           "m1!4"
                                                                                                                                                                           "m2!4")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               -22
                                                                                                                                                               "c!1"
                                                                                                                                                               "sigma!2"
                                                                                                                                                               "sigma1!2"
                                                                                                                                                               "sigma2!2"
                                                                                                                                                               "m1!3"
                                                                                                                                                               "m2!3")
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "on_method_exit_exceptional_deterministic")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "p!1"
                                                                                                                                                       "md!1"
                                                                                                                                                       "a!2"
                                                                                                                                                       "tau7!2"
                                                                                                                                                       "tau8!1"
                                                                                                                                                       "tau8!2"
                                                                                                                                                       "m6!1"
                                                                                                                                                       "m6!2"
                                                                                                                                                       " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                       " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                       "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -45
                                                                                                                                                               "(m1!3, m2!3)")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -45
                                                                                                                                                                   "c!1"
                                                                                                                                                                   "v1!2"
                                                                                                                                                                   "v2!2"
                                                                                                                                                                   "sigma!2"
                                                                                                                                                                   "sigma1!2"
                                                                                                                                                                   "sigma2!2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       -45)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -23
                                                                                                                                                                           "c!2"
                                                                                                                                                                           "sigma!3"
                                                                                                                                                                           "sigma1!3"
                                                                                                                                                                           "sigma2!3"
                                                                                                                                                                           "m1!4"
                                                                                                                                                                           "m2!4")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               -21
                                                                                                                                                               "c!1"
                                                                                                                                                               "sigma!2"
                                                                                                                                                               "sigma1!2"
                                                                                                                                                               "sigma2!2"
                                                                                                                                                               "m1!3"
                                                                                                                                                               "m2!3")
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (inst-cp
                                                                                                                                         -39
                                                                                                                                         "(m5!1, m5!2)")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -40
                                                                                                                                             "res(md!1)"
                                                                                                                                             "v1!1"
                                                                                                                                             "v2!1"
                                                                                                                                             "tau6!2"
                                                                                                                                             "tau7!1"
                                                                                                                                             "tau7!2")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 -40)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace

                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace

                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace

                                                                                                                                                         -3)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -28)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "on_method_exit_normal_deterministic")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p!1"
                                                                                                                                                                     "md!1"
                                                                                                                                                                     "a!2"
                                                                                                                                                                     "tau7!2"
                                                                                                                                                                     "tau8!1"
                                                                                                                                                                     "tau8!2"
                                                                                                                                                                     "m6!1"
                                                                                                                                                                     "m6!2"
                                                                                                                                                                     " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                     " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -45
                                                                                                                                                                             "(m1!3, m2!3)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -45
                                                                                                                                                                                 "c!1"
                                                                                                                                                                                 "v1!2"
                                                                                                                                                                                 "v2!2"
                                                                                                                                                                                 "sigma!2"
                                                                                                                                                                                 "sigma1!2"
                                                                                                                                                                                 "sigma2!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -45)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -24
                                                                                                                                                                                         "c!2"
                                                                                                                                                                                         "sigma!3"
                                                                                                                                                                                         "sigma1!3"
                                                                                                                                                                                         "sigma2!3"
                                                                                                                                                                                         "m1!4"
                                                                                                                                                                                         "m2!4")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst
                                                                                                                                                                             -22
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2"
                                                                                                                                                                             "m1!3"
                                                                                                                                                                             "m2!3")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "on_method_exit_exceptional_deterministic")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "p!1"
                                                                                                                                                                     "md!1"
                                                                                                                                                                     "a!2"
                                                                                                                                                                     "tau7!2"
                                                                                                                                                                     "tau8!1"
                                                                                                                                                                     "tau8!2"
                                                                                                                                                                     "m6!1"
                                                                                                                                                                     "m6!2"
                                                                                                                                                                     " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                     " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                             (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                             (m_1: below(k)):
                                                                        deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                     "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                             (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                              sigma2_2: FullState)
                                                                             (m_2: below(k_1)):
                                                                        deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                  (LAMBDA (p_1: FullProgram)
                                                                                          (s: Stmt[Name],
                                                                                           sigma1_1, sigma2_1: FullState)
                                                                                          (m_1: below(m_2)):
                                                                                     deriv_stmt
                                                                                     (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -44
                                                                                                                                                                             "(m1!3, m2!3)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -44
                                                                                                                                                                                 "c!1"
                                                                                                                                                                                 "v1!2"
                                                                                                                                                                                 "v2!2"
                                                                                                                                                                                 "sigma!2"
                                                                                                                                                                                 "sigma1!2"
                                                                                                                                                                                 "sigma2!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -44)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -23
                                                                                                                                                                                         "c!2"
                                                                                                                                                                                         "sigma!3"
                                                                                                                                                                                         "sigma1!3"
                                                                                                                                                                                         "sigma2!3"
                                                                                                                                                                                         "m1!4"
                                                                                                                                                                                         "m2!4")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst
                                                                                                                                                                             -21
                                                                                                                                                                             "c!1"
                                                                                                                                                                             "sigma!2"
                                                                                                                                                                             "sigma1!2"
                                                                                                                                                                             "sigma2!2"
                                                                                                                                                                             "m1!3"
                                                                                                                                                                             "m2!3")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -17
                                                                                                                                                     "c!1"
                                                                                                                                                     "sigma!2"
                                                                                                                                                     "sigma1!2"
                                                                                                                                                     "sigma2!2"
                                                                                                                                                     "m1!3"
                                                                                                                                                     "m2!3")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -37
                                                                                                           "(m1!3, m2!3)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -37
                                                                                                               "c!1"
                                                                                                               "v1!2"
                                                                                                               "v2!2"
                                                                                                               "sigma!2"
                                                                                                               "sigma1!2"
                                                                                                               "sigma2!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -37)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -16
                                                                                                                       "c!2"
                                                                                                                       "sigma!3"
                                                                                                                       "sigma1!3"
                                                                                                                       "sigma2!3"
                                                                                                                       "m1!4"
                                                                                                                       "m2!4")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -14
                                                                                                           "c!1"
                                                                                                           "sigma!2"
                                                                                                           "sigma1!2"
                                                                                                           "sigma2!2"
                                                                                                           "m1!3"
                                                                                                           "m2!3")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   -23)
                                                                                  (("2"
                                                                                    (split
                                                                                     -23)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace

                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace

                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -13)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace

                                                                                                   -2
                                                                                                   :dir

                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace

                                                                                                       -25)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "on_method_entry_deterministic")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p!1"
                                                                                                           "md!1"
                                                                                                           "a!2"
                                                                                                           "tau3!1"
                                                                                                           "tau4!1"
                                                                                                           "tau4!2"
                                                                                                           "m3!1"
                                                                                                           "m3!2"
                                                                                                           " LAMBDA (k: upto(m3!1))(p_1: FullProgram)
                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                   (m_1: below(k)):
                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                           "LAMBDA (k_1: upto(m3!1))(p_2: FullProgram)
                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                    sigma2_2: FullState)
                                                                                   (m_2: below(k_1)):
                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                (s: Stmt[Name],
                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                (m_1: below(m_2)):
                                                                                           deriv_stmt
                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                           " LAMBDA (k: upto(m3!2))(p_1: FullProgram)
                                                                                   (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                   (m_1: below(k)):
                                                                              deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                           "LAMBDA (k_1: upto(m3!2))(p_2: FullProgram)
                                                                                   (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                    sigma2_2: FullState)
                                                                                   (m_2: below(k_1)):
                                                                              deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                        (LAMBDA (p_1: FullProgram)
                                                                                                (s: Stmt[Name],
                                                                                                 sigma1_1, sigma2_1: FullState)
                                                                                                (m_1: below(m_2)):
                                                                                           deriv_stmt
                                                                                           (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (replace

                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace

                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (replace

                                                                                                                       -19
                                                                                                                       :dir

                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace

                                                                                                                         -30)
                                                                                                                        (("1"
                                                                                                                          (replace

                                                                                                                           -18
                                                                                                                           :dir

                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace

                                                                                                                             -29)
                                                                                                                            (("1"
                                                                                                                              (inst-cp
                                                                                                                               -13
                                                                                                                               "body(md!1)"
                                                                                                                               "tau5!1"
                                                                                                                               "tau6!1"
                                                                                                                               "tau6!2"
                                                                                                                               "m4!1"
                                                                                                                               "m4!2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace

                                                                                                                                       -14)
                                                                                                                                      (("1"
                                                                                                                                        (replace

                                                                                                                                         -15)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -23)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (replace

                                                                                                                                                   -2
                                                                                                                                                   :dir

                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace

                                                                                                                                                     -37)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -27)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "on_method_exit_normal_deterministic")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "p!1"
                                                                                                                                                               "md!1"
                                                                                                                                                               "a!2"
                                                                                                                                                               "tau7!2"
                                                                                                                                                               "tau8!1"
                                                                                                                                                               "tau8!2"
                                                                                                                                                               "m6!1"
                                                                                                                                                               "m6!2"
                                                                                                                                                               " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                               "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                               " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                               "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -45
                                                                                                                                                                       "(m1!3, m2!3)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -45
                                                                                                                                                                           "c!1"
                                                                                                                                                                           "v1!2"
                                                                                                                                                                           "v2!2"
                                                                                                                                                                           "sigma!2"
                                                                                                                                                                           "sigma1!2"
                                                                                                                                                                           "sigma2!2")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (split
                                                                                                                                                                               -45)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -23
                                                                                                                                                                                   "c!2"
                                                                                                                                                                                   "sigma!3"
                                                                                                                                                                                   "sigma1!3"
                                                                                                                                                                                   "sigma2!3"
                                                                                                                                                                                   "m1!4"
                                                                                                                                                                                   "m2!4")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -21
                                                                                                                                                                       "c!1"
                                                                                                                                                                       "sigma!2"
                                                                                                                                                                       "sigma1!2"
                                                                                                                                                                       "sigma2!2"
                                                                                                                                                                       "m1!3"
                                                                                                                                                                       "m2!3")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "on_method_exit_exceptional_deterministic")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "p!1"
                                                                                                                                                               "md!1"
                                                                                                                                                               "a!2"
                                                                                                                                                               "tau7!2"
                                                                                                                                                               "tau8!1"
                                                                                                                                                               "tau8!2"
                                                                                                                                                               "m6!1"
                                                                                                                                                               "m6!2"
                                                                                                                                                               " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                               "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                               " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                     (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                     (m_1: below(k)):
                                                                                                deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                               "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                     (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                      sigma2_2: FullState)
                                                                                                     (m_2: below(k_1)):
                                                                                                deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                          (LAMBDA (p_1: FullProgram)
                                                                                                                  (s: Stmt[Name],
                                                                                                                   sigma1_1, sigma2_1: FullState)
                                                                                                                  (m_1: below(m_2)):
                                                                                                             deriv_stmt
                                                                                                             (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -44
                                                                                                                                                                       "(m1!3, m2!3)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -44
                                                                                                                                                                           "c!1"
                                                                                                                                                                           "v1!2"
                                                                                                                                                                           "v2!2"
                                                                                                                                                                           "sigma!2"
                                                                                                                                                                           "sigma1!2"
                                                                                                                                                                           "sigma2!2")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (split
                                                                                                                                                                               -44)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -22
                                                                                                                                                                                   "c!2"
                                                                                                                                                                                   "sigma!3"
                                                                                                                                                                                   "sigma1!3"
                                                                                                                                                                                   "sigma2!3"
                                                                                                                                                                                   "m1!4"
                                                                                                                                                                                   "m2!4")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       -20
                                                                                                                                                                       "c!1"
                                                                                                                                                                       "sigma!2"
                                                                                                                                                                       "sigma1!2"
                                                                                                                                                                       "sigma2!2"
                                                                                                                                                                       "m1!3"
                                                                                                                                                                       "m2!3")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst-cp
                                                                                                                                                 -37
                                                                                                                                                 "(m5!1, m5!2)")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -38
                                                                                                                                                     "res(md!1)"
                                                                                                                                                     "v1!1"
                                                                                                                                                     "v2!1"
                                                                                                                                                     "tau6!2"
                                                                                                                                                     "tau7!1"
                                                                                                                                                     "tau7!2")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -38)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace

                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace

                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace

                                                                                                                                                                 -3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -27)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "on_method_exit_normal_deterministic")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p!1"
                                                                                                                                                                             "md!1"
                                                                                                                                                                             "a!2"
                                                                                                                                                                             "tau7!2"
                                                                                                                                                                             "tau8!1"
                                                                                                                                                                             "tau8!2"
                                                                                                                                                                             "m6!1"
                                                                                                                                                                             "m6!2"
                                                                                                                                                                             " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                             " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -43
                                                                                                                                                                                     "(m1!3, m2!3)")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -43
                                                                                                                                                                                         "c!1"
                                                                                                                                                                                         "v1!2"
                                                                                                                                                                                         "v2!2"
                                                                                                                                                                                         "sigma!2"
                                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                                         "sigma2!2")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -43)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -23
                                                                                                                                                                                                 "c!2"
                                                                                                                                                                                                 "sigma!3"
                                                                                                                                                                                                 "sigma1!3"
                                                                                                                                                                                                 "sigma2!3"
                                                                                                                                                                                                 "m1!4"
                                                                                                                                                                                                 "m2!4")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -21
                                                                                                                                                                                     "c!1"
                                                                                                                                                                                     "sigma!2"
                                                                                                                                                                                     "sigma1!2"
                                                                                                                                                                                     "sigma2!2"
                                                                                                                                                                                     "m1!3"
                                                                                                                                                                                     "m2!3")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "on_method_exit_exceptional_deterministic")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "p!1"
                                                                                                                                                                             "md!1"
                                                                                                                                                                             "a!2"
                                                                                                                                                                             "tau7!2"
                                                                                                                                                                             "tau8!1"
                                                                                                                                                                             "tau8!2"
                                                                                                                                                                             "m6!1"
                                                                                                                                                                             "m6!2"
                                                                                                                                                                             " LAMBDA (k: upto(m6!1))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!1))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                                                                                             " LAMBDA (k: upto(m6!2))(p_1: FullProgram)
                                                                                                       (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                                                       (m_1: below(k)):
                                                                                                  deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                                                                                             "LAMBDA (k_1: upto(m6!2))(p_2: FullProgram)
                                                                                                       (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                                                        sigma2_2: FullState)
                                                                                                       (m_2: below(k_1)):
                                                                                                  deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                                                            (LAMBDA (p_1: FullProgram)
                                                                                                                    (s: Stmt[Name],
                                                                                                                     sigma1_1, sigma2_1: FullState)
                                                                                                                    (m_1: below(m_2)):
                                                                                                               deriv_stmt
                                                                                                               (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -42
                                                                                                                                                                                     "(m1!3, m2!3)")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -42
                                                                                                                                                                                         "c!1"
                                                                                                                                                                                         "v1!2"
                                                                                                                                                                                         "v2!2"
                                                                                                                                                                                         "sigma!2"
                                                                                                                                                                                         "sigma1!2"
                                                                                                                                                                                         "sigma2!2")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -42)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -22
                                                                                                                                                                                                 "c!2"
                                                                                                                                                                                                 "sigma!3"
                                                                                                                                                                                                 "sigma1!3"
                                                                                                                                                                                                 "sigma2!3"
                                                                                                                                                                                                 "m1!4"
                                                                                                                                                                                                 "m2!4")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -20
                                                                                                                                                                                     "c!1"
                                                                                                                                                                                     "sigma!2"
                                                                                                                                                                                     "sigma1!2"
                                                                                                                                                                                     "sigma2!2"
                                                                                                                                                                                     "m1!3"
                                                                                                                                                                                     "m2!3")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -16
                                                                                                                                                             "c!1"
                                                                                                                                                             "sigma!2"
                                                                                                                                                             "sigma1!2"
                                                                                                                                                             "sigma2!2"
                                                                                                                                                             "m1!3"
                                                                                                                                                             "m2!3")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -35
                                                                                                                   "(m1!3, m2!3)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -35
                                                                                                                       "c!1"
                                                                                                                       "v1!2"
                                                                                                                       "v2!2"
                                                                                                                       "sigma!2"
                                                                                                                       "sigma1!2"
                                                                                                                       "sigma2!2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -35)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -15
                                                                                                                               "c!2"
                                                                                                                               "sigma!3"
                                                                                                                               "sigma1!3"
                                                                                                                               "sigma2!3"
                                                                                                                               "m1!4"
                                                                                                                               "m2!4")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -13
                                                                                                                   "c!1"
                                                                                                                   "sigma!2"
                                                                                                                   "sigma1!2"
                                                                                                                   "sigma2!2"
                                                                                                                   "m1!3"
                                                                                                                   "m2!3")
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "c!1"
                                                                   "sigma!2"
                                                                   "sigma1!2"
                                                                   "sigma2!2"
                                                                   "m1!3"
                                                                   "m2!3")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst
                                                 -3
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2"
                                                 "m1!3"
                                                 "m2!3")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skosimp*)
                  (("5" (rewrite "deriv_expr" -2)
                    (("5" (rewrite "deriv_expr" -3)
                      (("5" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (rewrite "deriv_expr" -2)
                    (("6" (rewrite "deriv_expr" -3)
                      (("6" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -7)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "well_founded?_product")
          (("2"
            (inst -1 "LAMBDA(x, y : nat) : x < y"
             "LAMBDA(x, y : nat) : x < y")
            (("2" (assert)
              (("2" (use "wf_nat") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((deriv_expr const-decl "bool" Semantics nil)
    (well_founded?_product formula-decl nil WF nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (RefExpr type-decl nil RefExpr_adt nil)
    (RExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Expr_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Expr_adt nil)
    (MethodCall? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (on_method_exit_normal_deterministic formula-decl nil
     SemanticsProofs nil)
    (on_method_exit_exceptional_deterministic formula-decl nil
     SemanticsProofs nil)
    (on_method_entry_deterministic formula-decl nil SemanticsProofs
     nil)
    (CondExpr adt-constructor-decl
     "[[Expr, Expr, Expr] -> (CondExpr?)]" Expr_adt nil)
    (CondExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BoolExpr type-decl nil BoolExpr_adt nil)
    (BExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (BExpr adt-constructor-decl "[BoolExpr -> (BExpr?)]" Expr_adt nil)
    (Assign adt-constructor-decl "[[Name, Expr] -> (Assign?)]" Expr_adt
     nil)
    (Assign? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "[nat, nat]" SemanticsProofs nil)
    (Expr_induction formula-decl nil Expr_adt nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil) (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Stmt type-decl nil Stmt_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsProofs nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState[Name]]"
     SemanticsProofs nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (update_FullState_type const-decl "boolean" SemanticsTypes nil)
    (update_FullState formal-const-decl "(update_FullState_type)"
     SemanticsProofs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   158046 148770 t nil)
  (expr_determ_step-1 nil 3390558045 nil
   ("" (skosimp)
    (("" (expand "deriv_expr")
      ((""
        (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
        (("1" (split -1)
          (("1" (propax) nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "e")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_expr" -2)
                      (("1" (rewrite "deriv_expr" -3)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -8 "(x!1`1 - 1, x!1`2 - 1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "Assign2_var!1"
                                       "v1!1"
                                       "v2!1"
                                       "sigma!1"
                                       "tau!1"
                                       "tau!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -8)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (case
                                                 "up?(ex(pstate(tau!2)))")
                                                (("1" (assert) nil)
                                                 ("2"
                                                  (assert)
                                                  nil)))))))
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst
                                               -3
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2"
                                               "m1!1"
                                               "m2!1")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))
                                   ("2" (assert) nil)
                                   ("3" (assert) nil)))))))))))))))))))
                 ("2" (skosimp*)
                  (("2" (rewrite "deriv_expr" -2)
                    (("2" (rewrite "deriv_expr" -3)
                      (("2" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (assert) nil)))))))))))))
                 ("3" (skosimp*)
                  (("3" (hide -1 -2 -3)
                    (("3" (rewrite "deriv_expr" -2)
                      (("3" (rewrite "deriv_expr" -3)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -10 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -11
                                     "CondExpr1_var!1"
                                     "v1!2"
                                     "v1!3"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -11)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -8)
                                                  (("1"
                                                    (split -8)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -14
                                                           "(m2!1, m2!2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -14
                                                               "CondExpr2_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -14)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -8
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -13
                                                           "(m2!1, m2!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -13
                                                               "CondExpr3_var!1"
                                                               "v1!1"
                                                               "v2!1"
                                                               "tau!2"
                                                               "sigma1!1"
                                                               "sigma2!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -13)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -7
                                                                       "c!1"
                                                                       "sigma!2"
                                                                       "sigma1!2"
                                                                       "sigma2!2"
                                                                       "m1!3"
                                                                       "m2!3")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst
                                             -3
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2"
                                             "m1!3"
                                             "m2!3")
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))))
                 ("4" (skosimp*)
                  (("4" (hide -1 -2)
                    (("4" (rewrite "deriv_expr" -2)
                      (("4" (rewrite "deriv_expr" -3)
                        (("4" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -26 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -27
                                     "MethodCall1_var!1"
                                     "a!1"
                                     "a!2"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -27)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst-cp
                                                 -29
                                                 "(m2!1, m2!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -30
                                                     "MethodCall3_var!1"
                                                     "pv!1"
                                                     "pv!2"
                                                     "tau1!2"
                                                     "tau2!1"
                                                     "tau2!2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -30)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace

                                                               -1)
                                                              (("1"
                                                                (replace

                                                                 -2)
                                                                (("1"
                                                                  (lift-if
                                                                   -11)
                                                                  (("1"
                                                                    (split
                                                                     -11)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace

                                                                           -3
                                                                           :dir

                                                                           rl)
                                                                          (("1"
                                                                            (replace

                                                                             -25)
                                                                            (("1"
                                                                              (split
                                                                               -14)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace

                                                                                     -2
                                                                                     :dir

                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace

                                                                                       -27)
                                                                                      (("1"
                                                                                        (comment
                                                                                         "here we should use a lemma about on_method_entry")
                                                                                        (("1"
                                                                                          (case
                                                                                           "tau4!1 = tau4!2")
                                                                                          (("1"
                                                                                            (replace

                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace

                                                                                               -18
                                                                                               :dir

                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace

                                                                                                 -30)
                                                                                                (("1"
                                                                                                  (replace

                                                                                                   -19
                                                                                                   :dir

                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace

                                                                                                     -31)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -13
                                                                                                       "body(md!1)"
                                                                                                       "tau5!1"
                                                                                                       "tau6!1"
                                                                                                       "tau6!2"
                                                                                                       "m4!1"
                                                                                                       "m4!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace

                                                                                                               -13)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -22)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (replace

                                                                                                                         -2
                                                                                                                         :dir

                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (replace

                                                                                                                           -36)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -25)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (comment
                                                                                                                                   "lemma about on_method_exit_normal needed")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "tau8!1 = tau8!2")
                                                                                                                                    (("1"
                                                                                                                                      (replace

                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace

                                                                                                                                         -28
                                                                                                                                         :dir

                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (postpone)
                                                                                                                                            nil)))))))
                                                                                                                                     ("2"
                                                                                                                                      (postpone)
                                                                                                                                      nil)))))))))
                                                                                                                             ("2"
                                                                                                                              (postpone)
                                                                                                                              nil)))))))))))))
                                                                                                                 ("2"
                                                                                                                  (postpone)
                                                                                                                  nil)))))))))))))))))))))))
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil)))))))))))))
                                                                               ("2"
                                                                                (postpone)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (postpone)
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (postpone)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (postpone)
                                          nil)))))))))))))))))))))))))
                 ("5" (postpone) nil) ("6" (postpone) nil)))))))))
         ("2" (postpone) nil))))))
    nil)
   unfinished nil nil nil nil nil))
 (stmt_determ_step 0
  (stmt_determ_step-1 nil 3390558061 3390734848
   ("" (skosimp)
    ((""
      (use "wf_induction[[nat, nat], LAMBDA(n1, n2 : [nat, nat]) : proj_1(n1) < proj_1(n2) AND proj_2(n1) < proj_2(n2)]")
      (("1" (assert)
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (induct "c")
                (("1" (skosimp*)
                  (("1" (hide -1)
                    (("1" (rewrite "deriv_stmt" -1)
                      (("1" (rewrite "deriv_stmt" -2)
                        (("1" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (lemma "execute_CaseJML_deterministic")
                                (("2"
                                  (inst
                                   -1
                                   "p!1"
                                   "CaseJML1_var!1"
                                   "sigma!1"
                                   "sigma1!1"
                                   "sigma2!1"
                                   "x!1`1"
                                   "x!1`2"
                                   " LAMBDA (k: upto(x!1`1))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                   "LAMBDA (k_1: upto(x!1`1))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                   " LAMBDA (k: upto(x!1`2))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                   "LAMBDA (k_1: upto(x!1`2))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (use "expr_determ_step")
                                          (("2"
                                            (expand "deriv_expr" -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst
                                                     -9
                                                     "(m1!2, m2!2)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -9
                                                         "c!2"
                                                         "sigma!3"
                                                         "sigma1!3"
                                                         "sigma2!3")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skosimp*)
                                        (("3"
                                          (inst -7 "(m1!1, m2!1)")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst
                                               -7
                                               "c!1"
                                               "sigma!2"
                                               "sigma1!2"
                                               "sigma2!2")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (hide -1 -2)
                    (("2" (rewrite "deriv_stmt" -1)
                      (("2" (rewrite "deriv_stmt" -2)
                        (("2" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (use
                                 "expr_determ_step"
                                 ("v1"
                                  "v!1"
                                  "v2"
                                  "v!2"
                                  "sigma1"
                                  "tau!1"
                                  "sigma2"
                                  "tau!2"))
                                (("2"
                                  (use
                                   "expr_determ_step"
                                   ("v1"
                                    "v!1"
                                    "v2"
                                    "v!2"
                                    "sigma1"
                                    "tau!1"
                                    "sigma2"
                                    "tau!2"
                                    "n1"
                                    "m1!1"
                                    "n2"
                                    "m1!2"))
                                  (("2"
                                    (expand "deriv_expr" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -12
                                                     "(m2!1, m2!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split -7)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -13
                                                                 "IfThenElse2_var!1"
                                                                 "tau!2"
                                                                 "sigma1!1"
                                                                 "sigma2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -12
                                                                 "IfThenElse3_var!1"
                                                                 "tau!2"
                                                                 "sigma1!1"
                                                                 "sigma2!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst -12 "(m1!3, m2!3)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -12
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (hide -1 -2)
                    (("3" (rewrite "deriv_stmt" -1)
                      (("3" (rewrite "deriv_stmt" -2)
                        (("3" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -7 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -8
                                     "Sequence1_var!1"
                                     "sigma!1"
                                     "tau!1"
                                     "tau!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -7 "(m2!1, m2!2)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -7
                                               "Sequence2_var!1"
                                               "tau!2"
                                               "sigma1!1"
                                               "sigma2!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (rewrite "deriv_stmt" -1)
                    (("4" (rewrite "deriv_stmt" -2)
                      (("4" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (lemma "execute_set_deterministic")
                              (("2"
                                (inst
                                 -1
                                 "p!1"
                                 "Set1_var!1"
                                 "Set2_var!1"
                                 "sigma!1"
                                 "sigma1!1"
                                 "sigma2!1"
                                 "x!1`1"
                                 "x!1`2"
                                 " LAMBDA (k: upto(x!1`1))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                 "LAMBDA (k_1: upto(x!1`1))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                 " LAMBDA (k: upto(x!1`2))(p_1: FullProgram)
                                                                 (s: Stmt[Name], sigma1_1, sigma2_1: FullState)
                                                                 (m_1: below(k)):
                                                            deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                 "LAMBDA (k_1: upto(x!1`2))(p_2: FullProgram)
                                                                 (c_1: Expr[Name], sigma1_2: FullState, v: Val,
                                                                  sigma2_2: FullState)
                                                                 (m_2: below(k_1)):
                                                            deriv_expr(p_2)(c_1, sigma1_2, v, sigma2_2)(m_2)
                                                                      (LAMBDA (p_1: FullProgram)
                                                                              (s: Stmt[Name],
                                                                               sigma1_1, sigma2_1: FullState)
                                                                              (m_1: below(m_2)):
                                                                         deriv_stmt
                                                                         (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (use "expr_determ_step")
                                        (("2"
                                          (expand "deriv_expr" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst
                                                   -9
                                                   "(m1!2, m2!2)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -9
                                                       "c!2"
                                                       "sigma!3"
                                                       "sigma1!3"
                                                       "sigma2!3")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (inst -7 "(m1!1, m2!1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst
                                             -7
                                             "c!1"
                                             "sigma!2"
                                             "sigma1!2"
                                             "sigma2!2")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skosimp*)
                  (("5" (rewrite "deriv_stmt" -1)
                    (("5" (rewrite "deriv_stmt" -2)
                      (("5" (flatten) (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (rewrite "deriv_stmt" -1)
                    (("6" (rewrite "deriv_stmt" -2)
                      (("6" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2"
                                (use
                                 "expr_determ_step"
                                 ("v1"
                                  "v!1"
                                  "v2"
                                  "v!2"
                                  "sigma1"
                                  "sigma1!1"
                                  "sigma2"
                                  "sigma2!1"
                                  "n1"
                                  "x!1`1 - 1"
                                  "n2"
                                  "x!1`2 - 1"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deriv_expr" -1)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -7 "(m1!1, m2!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -7
                                                 "c!1"
                                                 "sigma!2"
                                                 "sigma1!2"
                                                 "sigma2!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (skosimp*)
                  (("7" (rewrite "deriv_stmt" -1)
                    (("7" (rewrite "deriv_stmt" -2)
                      (("7" (case "up?(ex(pstate(sigma!1)))")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (skosimp*)
                  (("8" (hide -1 -2 -3)
                    (("8" (rewrite "deriv_stmt" -1)
                      (("8" (rewrite "deriv_stmt" -2)
                        (("8" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (inst-cp -11 "(m1!1, m1!2)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -12
                                     "TryCatch1_var!1"
                                     "sigma!1"
                                     "tau1!1"
                                     "tau1!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -12)
                                          (("2"
                                            (lift-if -3)
                                            (("2"
                                              (split -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst-cp
                                                     -12
                                                     "(m2!1, m2!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -13
                                                         "TryCatch2_var!1"
                                                         "update_FullState(LAMBDA(s : PState[Name]) : s WITH [ex := bottom], tau1!2)"
                                                         "tau2!1"
                                                         "tau2!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace

                                                               -13)
                                                              (("1"
                                                                (inst
                                                                 -12
                                                                 "(m3!1, m3!2)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -12
                                                                     "TryCatch3_var!1"
                                                                     "update_FullState(LAMBDA (s : PState[Name]) : s WITH [ex := bottom], tau2!2)"
                                                                     "tau3!1"
                                                                     "tau3!2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace

                                                                           -12)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "deriv_stmt"
                                                     -1)
                                                    (("2"
                                                      (rewrite
                                                       "deriv_stmt"
                                                       -8)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace

                                                             -1)
                                                            (("2"
                                                              (replace

                                                               -9)
                                                              (("2"
                                                                (inst
                                                                 -13
                                                                 "(m3!1, m3!2)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -13
                                                                     "TryCatch3_var!1"
                                                                     "update_FullState(LAMBDA (s : PState[Name]) : s WITH [ex := bottom], tau2!2)"
                                                                     "tau3!1"
                                                                     "tau3!2")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace

                                                                           -13)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("9" (skosimp*)
                  (("9" (hide -1)
                    (("9" (rewrite "deriv_stmt" -1)
                      (("9" (rewrite "deriv_stmt" -2)
                        (("9" (case "up?(ex(pstate(sigma!1)))")
                          (("1" (grind) nil nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (inst -5 "(x!1`1 - 1, x!1`2 - 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "IfThenElse(While1_var!1,
                            While(While1_var!1, While2_var!1), Skip)"
                                     "sigma!1"
                                     "sigma1!1"
                                     "sigma2!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "well_founded?_product")
        (("2"
          (inst -1 "LAMBDA(x, y : nat) : x < y"
           "LAMBDA(x, y : nat) : x < y")
          (("2" (use "wf_nat") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((well_founded?_product formula-decl nil WF nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (Stmt_induction formula-decl nil Stmt_adt nil)
    (execute_CaseJML_deterministic formula-decl nil SemanticsProofs
     nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (expr_determ_step formula-decl nil SemanticsProofs nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (CaseJML? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Stmt_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IfThenElse? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (IfThenElse adt-constructor-decl
     "[[Expr, Stmt, Stmt] -> (IfThenElse?)]" Stmt_adt nil)
    (Sequence? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Stmt_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (execute_set_deterministic formula-decl nil SemanticsProofs nil)
    (Skip adt-constructor-decl "(Skip?)" Stmt_adt nil)
    (Skip? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Stmt_adt
     nil)
    (StmtExpr? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Throw adt-constructor-decl "(Throw?)" Stmt_adt nil)
    (Throw? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (TryCatch? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (TryCatch adt-constructor-decl
     "[[Stmt, Stmt, Stmt] -> (TryCatch?)]" Stmt_adt nil)
    (x!1 skolem-const-decl "[nat, nat]" SemanticsProofs nil)
    (While? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Stmt_adt
     nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (program formal-const-decl "[FullProgram -> Program[Name]]"
     SemanticsProofs nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (pstate formal-const-decl "[FullState -> PState[Name]]"
     SemanticsProofs nil)
    (lookup formal-const-decl "[Name, FullState -> Val]"
            SemanticsProofs nil)
    (update_FullState_type const-decl "boolean" SemanticsTypes nil)
    (update_FullState formal-const-decl "(update_FullState_type)"
     SemanticsProofs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set formal-const-decl "(execute_set_type)" SemanticsProofs
     nil)
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML formal-const-decl "(execute_CaseJML_type)"
     SemanticsProofs nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_normal formal-const-decl "(on_method_event_type)"
     SemanticsProofs nil)
    (on_method_exit_exceptional formal-const-decl
     "(on_method_event_type)" SemanticsProofs nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   1554485 28250 t nil))
 (expr_determ 0
  (expr_determ-1 nil 3390558082 3390735271
   ("" (skosimp*)
    (("" (use "expr_determ_step")
      (("" (assert)
        (("" (expand "derives")
          (("" (skosimp*)
            (("" (inst -1 "n!1" "n!2")
              (("" (assert)
                (("" (split -1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (use "stmt_determ_step")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((expr_determ_step formula-decl nil SemanticsProofs nil)
    (Val type-decl nil Val_adt nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Expr type-decl nil Expr_adt nil)
    (derives const-decl "bool" Semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (stmt_determ_step formula-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   73051 3840 t nil))
 (stmt_determ 0
  (stmt_determ-1 nil 3390558094 3390735040
   ("" (skosimp*)
    (("" (use "stmt_determ_step")
      (("" (expand "derives")
        (("" (skosimp*)
          (("" (inst?) (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   proved
   ((stmt_determ_step formula-decl nil SemanticsProofs nil)
    (FullState formal-type-decl nil SemanticsProofs nil)
    (FullProgram formal-type-decl nil SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil SemanticsProofs nil)
    (Stmt type-decl nil Stmt_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derives const-decl "bool" Semantics nil))
   214 170 nil nil)))
(SemanticsCommon
 (check_assertion_TCC1 0
  (check_assertion_TCC1-1 nil 3385977476 3390732509
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   108 90 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3385977476 3390732509
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 64 60 t nil))
 (execute_CaseJML_TCC2 0
  (execute_CaseJML_TCC2-1 nil 3385977476 3390732509
   ("" (expand "execute_CaseJML_type")
    (("" (skosimp) (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   proved nil 59 30 t nil))
 (execute_CaseJML_TCC3 0
  (execute_CaseJML_TCC3-1 nil 3390110778 3390732509
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pstate formal-const-decl "[FullState -> PState]" SemanticsCommon
     nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (FullState formal-type-decl nil SemanticsCommon nil)
    (FullProgram formal-type-decl nil SemanticsCommon nil)
    (Name formal-nonempty-type-decl nil SemanticsCommon nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil))
   189 170 nil nil)))

