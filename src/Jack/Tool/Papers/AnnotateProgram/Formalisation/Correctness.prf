(AnnEventPreservesMPModeled
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3404214803 3410852536
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil AnnEventPreservesMPModeled
     nil))
   583 580 t nil))
 (IMP_RelatedStatesProperties_TCC1 0
  (IMP_RelatedStatesProperties_TCC1-1 nil 3404214803 3410852537
   ("" (use "CP_is_enumerable") nil nil) proved
   ((CP_is_enumerable formula-decl nil AnnEventPreservesMPModeled nil))
   584 590 t nil))
 (IMP_RelatedStatesProperties_TCC2 0
  (IMP_RelatedStatesProperties_TCC2-1 nil 3404214803 3410852537
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil AnnEventPreservesMPModeled nil))
   622 590 t nil))
 (ann_action_preserves_MP_modeled_TCC1 0
  (ann_action_preserves_MP_modeled_TCC1-1 nil 3404214803 3410852538
   ("" (skosimp)
    (("" (expand "id")
      (("" (use "ann_action_yields_wf_Body") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Expr type-eq-decl nil Body_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (ann_action_yields_wf_Body formula-decl nil
     AnnotateProgramProperties nil))
   895 860 t nil))
 (ann_action_preserves_MP_modeled 0
  (ann_action_preserves_MP_modeled-1 nil 3404215011 3410852549
   ("" (induct "a")
    (("1" (skosimp*)
      (("1" (expand* "ann_action" "execute_action" "derive")
        (("1" (prop)
          (("1" (rewrite -1)
            (("1" (expand "MP_modeled?")
              (("1" (prop)
                (("1"
                  (expand* "MVA_modeled?" "MVA_cp_modeled?"
                   "MVA_cps_modeled?" "MVA_vars_modeled?")
                  (("1" (ground)
                    (("1" (replace -14)
                      (("1" (beta) (("1" (propax) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2"
                  (expand* "Program_modeled?" "Program_gvs_modeled?")
                  (("2" (replace -12) (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_action" -11)
        (("2" (expand "ann_action" -10)
          (("2" (expand "derive" -10)
            (("2" (assert)
              (("2" (skosimp*)
                (("2"
                  (name "stA2"
                        "update(stA(astate(sMP1!1)))(target(cons1_var!1))(eval(source(cons1_var!1))(stA(astate(sMP1!1)), st(pstate(sMP1!1))))")
                  (("2" (replace -1)
                    (("2"
                      (inst - "mp!1" "t!1 WITH [action := cons2_var!1]"
                       "m2!1"
                       "sMP1!1 WITH [astate := astate(sMP1!1) WITH [stA := stA2]]"
                       "sMP2!1" "tau!1" "sAP2!1")
                      (("2"
                        (case "defined?(eval(source(cons1_var!1))(stA(astate(sMP1!1)), st(pstate(sMP1!1)))) AND
                                                                                      MP_modeled?(mp!1)(sMP1!1 WITH [astate := astate(sMP1!1) WITH [stA := stA2]], tau!1)")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (hide-all-but (-1 -15 1))
                              (("1"
                                (expand* "derive" "execute_set")
                                (("1"
                                  (skosimp*)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 1 "t1!1")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -8 :dir rl :hide? t)
                                  (("2"
                                    (hide-all-but (-10 1))
                                    (("2"
                                      (expand "suffix")
                                      (("2"
                                        (skolem!)
                                        (("2"
                                          (inst
                                           1
                                           "append(l3!1, (: cons1_var!1 :))")
                                          (("2"
                                            (use
                                             "append_assoc[OneAction]")
                                            (("2"
                                              (rewrite -1)
                                              (("2"
                                                (expand "append" 1 2)
                                                (("2"
                                                  (expand "append" 1 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but (-9 1))
                              (("3"
                                (expand "wf_Action")
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (expand "member" -2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (use "derive_yields_wf_state_AP")
                              (("1" (assert) nil nil)
                               ("2"
                                (use "one_action_translation_wf_Body")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide-all-but (-1 -3 -5 -9 1))
                              (("5"
                                (replace -2 1 :dir rl :hide? t)
                                (("5"
                                  (expand "wf_state")
                                  (("5"
                                    (prop)
                                    (("1"
                                      (expand "wf_AState")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "wf_Store")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "update")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "wf_Action")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "wf_ghoststate")
                                      (("2"
                                        (skolem!)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "is_ghost")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 -9 -11 -12 -14 -15 3)
                          (("2" (expand* "derive" "execute_set")
                            (("2" (skosimp*)
                              (("2"
                                (expand*
                                 "well_behaved_MVA"
                                 "actions_have_no_side_effects")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst - "t1!1" "cons1_var!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace
                                               -1
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("1"
                                                (expand
                                                 "eval_action_behavior")
                                                (("1"
                                                  (inst?
                                                   -
                                                   ("sMVA"
                                                    "astate(sMP1!1)"))
                                                  (("1"
                                                    (split -)
                                                    (("1"
                                                      (case
                                                       "eval(source(cons1_var!1))(stA(astate(sMP1!1)), st(pstate(sAP1!1))) = v!1")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (case
                                                           "st(pstate(sAP1!1)) = st(pstate(sMP1!1))")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (lemma
                                                                 "derive_bottom_iff_exception_step_AP")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "defined?")
                                                                      (("1"
                                                                        (expand*
                                                                         "update_GhostVars"
                                                                         "update_store")
                                                                        (("1"
                                                                          (replace
                                                                           -13
                                                                           2
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (expand*
                                                                             "wf_Action"
                                                                             "var_names")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     2
                                                                                     :dir
                                                                                     rl
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-2
                                                                                        -4
                                                                                        -6
                                                                                        -7
                                                                                        2))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "MP_modeled?")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "MVA_modeled?")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "MVA_cp_modeled?")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "wf_new_vars")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "MVA_cps_modeled?")
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (lift-if)
                                                                                                          (("2"
                                                                                                            (prop)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "wf_new_vars")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "q!1"
                                                                                                                   "f!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "MVA_vars_modeled?")
                                                                                                (("3"
                                                                                                  (skosimp)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "update")
                                                                                                    (("3"
                                                                                                      (lift-if)
                                                                                                      (("3"
                                                                                                        (prop)
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand*
                                                                                             "Program_modeled?"
                                                                                             "Program_gvs_modeled?")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             "wf_state"
                                                                                                             "wf_ghoststate")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (expand*
                                                                                                                   "is_ghost"
                                                                                                                   "var_names")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "getGhostDecls")
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "wf_new_vars")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -4)
                                                                                                                                (("2"
                                                                                                                                  (expand*
                                                                                                                                   "disjoint?"
                                                                                                                                   "empty?"
                                                                                                                                   "intersection"
                                                                                                                                   "member"
                                                                                                                                   "declared_var_names")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "name(f!1)")
                                                                                                                                    (("2"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "new_vars_derived_from_mp")
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -3
                                                                                                                                             "f!1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         1
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (expand*
                                                                                                                                           "var_names"
                                                                                                                                           "getGhostDecls")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             1
                                                                                                                                             "f!2")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "one_action_source_wf_Body")
                                                                    (("2"
                                                                      (expand
                                                                       "member"
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand*
                                                             "MP_modeled?"
                                                             "Program_modeled?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite -1)
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "MP_modeled?")
                                                      (("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (expand
                                                       "wf_state"
                                                       -3)
                                                      (("4"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("6"
                                                      (expand
                                                       "wf_Action")
                                                      (("6"
                                                        (inst?)
                                                        (("6"
                                                          (expand
                                                           "member")
                                                          (("6"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace
                                           -7
                                           -9
                                           :dir
                                           rl
                                           :hide?
                                           t)
                                          (("2"
                                            (expand "suffix")
                                            (("2"
                                              (skolem!)
                                              (("2"
                                                (replace
                                                 -8
                                                 1
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (use
                                                   "append_member[OneAction]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp)
        (("3" (expand "id")
          (("3" (skosimp)
            (("3" (use "ann_action_yields_wf_Body")
              (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ann_action_yields_wf_Body formula-decl nil
     AnnotateProgramProperties nil)
    (update const-decl "Store" MVASemantics nil)
    (eval const-decl "Val" MVASemantics nil)
    (append_member formula-decl nil listfuncs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (injective? const-decl "bool" functions nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (update_store const-decl "Store" State nil)
    (one_action_source_wf_Body formula-decl nil
     AnnotateProgramProperties nil)
    (derive_bottom_iff_exception_step_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (actions_have_no_side_effects const-decl "boolean" Equivalence nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (cons1_var!1 skolem-const-decl "OneAction[CP, Name]"
     AnnEventPreservesMPModeled nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (mp!1 skolem-const-decl "(wf_MP)" AnnEventPreservesMPModeled nil)
    (one_action_translation_wf_Body formula-decl nil
     AnnotateProgramProperties nil)
    (member def-decl "bool" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (OneAction type-eq-decl nil MVA nil)
    (execute_action def-decl "Store" MVASemantics nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (suffix const-decl "boolean" listfuncs nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil))
   11245 10500 t shostak))
 (update_vars_preserves_MP_modeled_TCC1 0
  (update_vars_preserves_MP_modeled_TCC1-1 nil 3404227298 3410852550
   ("" (skosimp)
    (("" (expand "id")
      (("" (use "update_vars_wf_Stmt")
        (("" (assert)
          (("" (expand "wf_Stmt") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (update_vars_wf_Stmt formula-decl nil AnnotateProgramProperties
     nil))
   960 890 t nil))
 (update_vars_preserves_MP_modeled 0
  (update_vars_preserves_MP_modeled-1 nil 3404227375 3410852564
   ("" (skosimp*)
    (("" (expand* "update_vars" "derive")
      (("" (assert)
        (("" (skosimp*)
          (("" (case "cps(mva(mp!1))(tcp(t!1))")
            (("1" (case "wf_state(ann_program(mp!1))(tau!1)")
              (("1" (expand "derive" -9)
                (("1" (expand "execute_set")
                  (("1" (skosimp*)
                    (("1" (expand "derive" -12)
                      (("1" (expand "derive" -12)
                        (("1" (ground)
                          (("1"
                            (expand* "update_GhostVars" "update_store")
                            (("1" (replace -13 :dir rl :hide? t)
                              (("1"
                                (lemma
                                 "ann_action_preserves_MP_modeled")
                                (("1"
                                  (inst
                                   -
                                   "mp!1"
                                   "t!1"
                                   "action(t!1)"
                                   "m2!1"
                                   "sMP1!1 WITH [astate := astate(sMP1!1) WITH [cp := tcp(t!1)]]"
                                   "sMP2!1"
                                   "tau!1"
                                   "sAP2!1")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (inst 1 "t!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use
                                           "suffix_reflexive[OneAction]")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "mp!1")
                                      (("2"
                                        (expand*
                                         "wf_MP"
                                         "wf_MVA"
                                         "wf_Trans")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "related_states")
                                      (("3"
                                        (hide-all-but
                                         (-2 -4 -14 -15 1))
                                        (("3"
                                          (prop)
                                          (("3"
                                            (rewrite -6)
                                            (("3"
                                              (expand "MP_modeled?")
                                              (("3"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "MVA_modeled?")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "MVA_cp_modeled?")
                                                      (("1"
                                                        (rewrite -8)
                                                        (("1"
                                                          (expand
                                                           "MVA_cps_modeled?")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 -2)
                                                                (("1"
                                                                  (use
                                                                   "wf_state_ghost_not_local_or_field"
                                                                   ("p"
                                                                    "ann_program(mp!1)"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "lookup")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (expand
                                                                             "val2int")
                                                                            (("1"
                                                                              (apply-extensionality
                                                                               3)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "new_vars_ghost_in_ann_program")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "new_vars_derived_from_mp")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "MVA_cps_modeled?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               -3)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (use
                                                                     "wf_new_vars")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "MVA_vars_modeled?")
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (rewrite
                                                               -4)
                                                              (("3"
                                                                (lift-if)
                                                                (("3"
                                                                  (prop)
                                                                  (("3"
                                                                    (expand*
                                                                     "wf_state"
                                                                     "wf_AState"
                                                                     "wf_Store")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "var_names")
                                                                            (("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (use
                                                                                 "wf_new_vars")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -2
                                                                                     "f!1")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand*
                                                   "Program_modeled?"
                                                   "Program_gvs_modeled?")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (comment
                                                                 "now expand wf_state(mp!1)(sMP1!1)")
                                                                (("2"
                                                                  (hide
                                                                   -8)
                                                                  (("2"
                                                                    (expand*
                                                                     "wf_state"
                                                                     "wf_ghoststate")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (expand*
                                                                           "is_ghost"
                                                                           "var_names")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (use
                                                                               "wf_new_vars")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "disjoint?"
                                                                                     "empty?"
                                                                                     "intersection"
                                                                                     "member"
                                                                                     "var_names"
                                                                                     "declared_var_names")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "new_cp_gvd(mp!1)")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "new_cp_gvd"
                                                                                             1
                                                                                             2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 "new_gvds"
                                                                                                 "add"
                                                                                                 "member")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           1
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "var_names")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  ";;; now expand wf_state(mp!1)(sMP1!1)"))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "related_states")
                                      (("4"
                                        (flatten)
                                        (("4"
                                          (hide -5 -1)
                                          (("4"
                                            (expand "wf_state")
                                            (("4"
                                              (prop)
                                              (("1"
                                                (expand*
                                                 "wf_AState"
                                                 "wf_Store")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "wf_ghoststate")
                                                (("2"
                                                  (expand "is_ghost")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "related_states")
                (("2" (flatten)
                  (("2" (use "derive_yields_wf_state_AP")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (expand "wf_Body")
                        (("2" (split)
                          (("1" (skosimp)
                            (("1" (apply (repeat (expand "var_names")))
                              (("1"
                                (expand* "add" "member" "singleton")
                                (("1"
                                  (expand*
                                   "ext_declared_var_names"
                                   "union"
                                   "member")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 1 2)
                                      (("1"
                                        (expand*
                                         "var_names"
                                         "getGhostDecls")
                                        (("1"
                                          (split)
                                          (("1"
                                            (use
                                             "ann_program_defines_MVA_vars")
                                            (("1"
                                              (use "cp_new_ghostvar")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use
                                             "ann_program_defines_MVA_vars")
                                            (("2"
                                              (use
                                               "new_vars_derived_from_mp")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst? 1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (apply (repeat (expand "subterm")))
                              (("2"
                                (ground)
                                (("2"
                                  (rewrite -1)
                                  (("2"
                                    (beta)
                                    (("2"
                                      (expand*
                                       "var_names"
                                       "getGhostDecls")
                                      (("2"
                                        (use
                                         "ann_program_defines_MVA_vars")
                                        (("2"
                                          (use "cp_new_ghostvar")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "mp!1")
              (("2" (expand* "wf_MP" "wf_MVA" "wf_Trans")
                (("2" (flatten)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((derive def-decl "bool" Semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVASemantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (related_states const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil)
    (i adt-accessor-decl "[(Int?) -> int]" Val_adt nil)
    (Val_Int_extensionality formula-decl nil Val_adt nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil)
    (new_vars_ghost_in_ann_program formula-decl nil
     AnnotateProgramProperties nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (val2int const-decl "int" State nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (suffix_reflexive formula-decl nil listfuncs nil)
    (ann_action_preserves_MP_modeled formula-decl nil
     AnnEventPreservesMPModeled nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (ann_program_defines_MVA_vars formula-decl nil
     AnnotateProgramProperties nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     AnnEventPreservesMPModeled nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (mp!1 skolem-const-decl "(wf_MP)" AnnEventPreservesMPModeled nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil))
   13875 9640 t shostak))
 (ann_event_preserves_MP_modeled_TCC1 0
  (ann_event_preserves_MP_modeled_TCC1-1 nil 3404229116 3410852565
   ("" (skosimp)
    (("" (typepred "mp!1")
      (("" (expand "wf_MP") (("" (propax) nil nil)) nil)) nil))
    nil)
   proved
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   592 590 t nil))
 (ann_event_preserves_MP_modeled_TCC2 0
  (ann_event_preserves_MP_modeled_TCC2-1 nil 3404229116 3410852566
   ("" (skosimp)
    (("" (expand "id")
      (("" (use "ann_event_wf_Body")
        (("" (assert)
          (("" (expand* "subset?" "member" "filter_event")
            (("" (skosimp*) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (ann_event_wf_Body formula-decl nil AnnotateProgramProperties nil))
   1004 920 t nil))
 (ann_event_preserves_MP_modeled 0
  (ann_event_preserves_MP_modeled-1 nil 3404229201 3410852589
   ("" (skosimp*)
    ((""
      (expand* "ann_event" "derive" "execute_CaseJML" "on_method_MVA")
      (("" (expand* "extend" "id")
        (("" (ground)
          (("" (lift-if)
            (("" (prop)
              (("1" (expand "set2list" -4)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split -4)
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (typepred "mva(mp!1)")
                            (("1" (expand "complete")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "total")
                                  (("1"
                                    (inst? -5)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -5
                                         "cp(astate(sMP1!1))"
                                         _
                                         _
                                         _)
                                        (("1"
                                          (inst
                                           -5
                                           "stA(astate(sMP1!1))"
                                           "st(pstate(sMP1!1))"
                                           "v!1")
                                          (("1"
                                            (split -5)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst
                                                 -9
                                                 "ann_trans_cp(mp!1)(cp(astate(sMP1!1)), {t : Transition |filter_event(mva(mp!1))(et!1)(name(m!1))(t) AND scp(t) = cp(astate(sMP1!1))})(v!1)")
                                                (("1"
                                                  (expand
                                                   "ann_event_set")
                                                  (("1"
                                                    (inst
                                                     1
                                                     "cp(astate(sMP1!1))")
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (expand
                                                         "wf_MVA")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst? -9)
                                                            (("1"
                                                              (expand
                                                               "wf_Trans")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "nonempty_exists")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (expand
                                                             "filter_event")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "filter_event_cp_is_finite")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "wf_MVA")
                                              (("2"
                                                (expand
                                                 "related_states")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "wf_state")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "wf_AState")
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "related_states") (("2" (flatten) nil nil))
                nil)
               ("3" (case-replace "sMP2!1 = sMP1!1")
                (("1" (expand "related_states")
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (apply-extensionality :hide? t) nil nil))
                nil)
               ("4" (expand* "step" "derive")
                (("4" (skosimp*)
                  (("4"
                    (name-replace "t1"
                     "choose(LAMBDA (t: Transition): ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                                                                                                                        event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                                                                                                        guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1)), (v!1)))")
                    (("1" (typepred "t1")
                      (("1" (case "cps(mva(mp!1))(scp(t1))")
                        (("1"
                          (name-replace "ts"
                           "filter_event(mva(mp!1))(et!1)(name(m!1))"
                           :hide? nil)
                          (("1" (case "ts(t1)")
                            (("1"
                              (case "is_finite({t: Transition | ts(t) AND scp(t) = scp(t1)})")
                              (("1"
                                (name
                                 "brT"
                                 "ann_trans_cp(mp!1)(scp(t1), {t: Transition | ts(t) AND scp(t) = scp(t1)})(v!1)")
                                (("1"
                                  (lemma
                                   "CaseJML_exclusive_branches_semantics[Name]")
                                  (("1"
                                    (inst
                                     -1
                                     "ann_program(mp!1)"
                                     "set2list(ann_event_set(mp!1)(ts)(v!1))"
                                     "sAP1!1"
                                     "sAP2!1"
                                     "Unit"
                                     "n!1"
                                     "brT")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (skolem!)
                                          (("1"
                                            (replace
                                             -2
                                             -1
                                             :dir
                                             rl
                                             :hide?
                                             t)
                                            (("1"
                                              (hide
                                               -13
                                               -14
                                               -15
                                               -16
                                               -17
                                               -18
                                               -19
                                               -20
                                               1
                                               3)
                                              (("1"
                                                (expand*
                                                 "derive"
                                                 "execute_CaseJML"
                                                 "ann_trans_cp"
                                                 "ann_guard_actions")
                                                (("1"
                                                  (expand*
                                                   "extend"
                                                   "id")
                                                  (("1"
                                                    (name
                                                     "bT"
                                                     "(guard_to_expression(mva(mp!1))(guard(t1))(v!1), update_vars(mp!1)(t1))")
                                                    (("1"
                                                      (case
                                                       "ann_guard_actions_set(mp!1)({t:Transition | ts(t) AND scp(t) = scp(t1)})(v!1)(bT)")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (lemma
                                                           "CaseJML_exclusive_branches_semantics[Name]")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "ann_program(mp!1)"
                                                             "set2list(ann_guard_actions_set(mp!1)({t:Transition | ts(t) AND scp(t) = scp(t1)})(v!1))"
                                                             "sAP1!1"
                                                             "sAP2!1"
                                                             "Unit"
                                                             "n1!1"
                                                             "bT")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (skolem!)
                                                                (("1"
                                                                  (lemma
                                                                   "update_vars_preserves_MP_modeled")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "mp!1"
                                                                     "t1"
                                                                     "n1!2"
                                                                     "sMP1!1"
                                                                     "sMP2!1"
                                                                     "sAP1!1"
                                                                     "sAP2!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "derive"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "execute_CaseJML")
                                                                  (("2"
                                                                    (expand*
                                                                     "extend"
                                                                     "id")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (use
                                                                   "before_distinct[[BoolExpr, Stmt]]")
                                                                  (("3"
                                                                    (use
                                                                     "before_member[[BoolExpr, Stmt]]")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (use
                                                                         "set2list_same_elements[[BoolExpr, Stmt]]")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "member"
                                                                             -1)
                                                                            (("3"
                                                                              (expand
                                                                               "ann_guard_actions_set"
                                                                               -1)
                                                                              (("3"
                                                                                (skosimp)
                                                                                (("3"
                                                                                  (replace
                                                                                   -3
                                                                                   :hide?
                                                                                   t)
                                                                                  (("3"
                                                                                    (replace
                                                                                     -12
                                                                                     :dir
                                                                                     rl
                                                                                     :hide?
                                                                                     t)
                                                                                    (("3"
                                                                                      (case
                                                                                       "NOT t!1 = t1")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3
                                                                                         -4
                                                                                         -6
                                                                                         -7
                                                                                         -8
                                                                                         -9
                                                                                         -10
                                                                                         -11
                                                                                         -12
                                                                                         -17
                                                                                         2
                                                                                         4
                                                                                         5)
                                                                                        (("1"
                                                                                          (expand*
                                                                                           "well_behaved_MVA"
                                                                                           "guard_to_expression_behavior")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "t!1"
                                                                                               "sAP1!1"
                                                                                               "astate(sMP1!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "mva(mp!1)")
                                                                                                      (("1"
                                                                                                        (expand*
                                                                                                         "complete"
                                                                                                         "deterministic")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "t1"
                                                                                                             "t!1"
                                                                                                             "stA(astate(sMP1!1))"
                                                                                                             "st(pstate(sAP1!1))"
                                                                                                             "v!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "filter_event")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "NOT v!3 = Bool(TRUE)")
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "determ_step_AP")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -7
                                                                                                                             "v!1")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -6)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "ann_program(mp!1)"
                                                                                                                                 "n!2"
                                                                                                                                 "m2!2"
                                                                                                                                 "e!1(v!1)"
                                                                                                                                 "v!3"
                                                                                                                                 "v!2"
                                                                                                                                 "sAP1!1"
                                                                                                                                 "sAP1!1"
                                                                                                                                 "tau!2")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (ground)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (use
                                                                                                                                                 "derive_boolean_expr_type"
                                                                                                                                                 ("p"
                                                                                                                                                  "ann_program(mp!1)"))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (-1
                                                                                                                                                      1
                                                                                                                                                      4))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply-extensionality
                                                                                                                                                       :hide?
                                                                                                                                                       t)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply-extensionality
                                                                                                                                                         2
                                                                                                                                                         :hide?
                                                                                                                                                         t)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "id")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "wf_BoolExpr")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand*
                                                                                                                         "related_states"
                                                                                                                         "MP_modeled?"
                                                                                                                         "Program_modeled?")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (decompose-equality
                                                                                                                         1)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "filter_event")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand*
                                                                                                     "related_states"
                                                                                                     "MP_modeled?")
                                                                                                    (("3"
                                                                                                      (prop)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (comment
                                                                                                     "expanding related_states does not show wf_state(mp!1)(sMP1!1), thus we introduce it with a case")
                                                                                                    (("4"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(sMP1!1)")
                                                                                                      (("1"
                                                                                                        (expand*
                                                                                                         "wf_state"
                                                                                                         "wf_state")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      ";;; expanding related_states does not show wf_state(mp!1)(sMP1!1), thus we introduce it with a case"))
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (expand
                                                                                                     "related_states")
                                                                                                    (("5"
                                                                                                      (flatten)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp)
                                                                (("4"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   2
                                                                   3)
                                                                  (("4"
                                                                    (expand*
                                                                     "well_behaved_MVA"
                                                                     "guard_to_expression_behavior")
                                                                    (("4"
                                                                      (flatten)
                                                                      (("4"
                                                                        (inst
                                                                         -
                                                                         "t1"
                                                                         "sAP1!1"
                                                                         "astate(sMP1!1)")
                                                                        (("4"
                                                                          (expand
                                                                           "related_states")
                                                                          (("4"
                                                                            (flatten)
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (split
                                                                                 -16)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "MP_modeled?")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Program_modeled?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "determ_step_AP")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "ann_program(mp!1)"
                                                                                                           "n!2"
                                                                                                           "m1!2"
                                                                                                           "e!1(v!1)"
                                                                                                           "v!3"
                                                                                                           "v!2"
                                                                                                           "sAP1!1"
                                                                                                           "sAP1!1"
                                                                                                           "tau!2")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "wf_BoolExpr")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (comment
                                                                                                     "Expanding related_states did not give wf_state(mp!1)(sMP1!1)")
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(sMP1!1)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "wf_state"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      ";;; Expanding related_states did not give wf_state(mp!1)(sMP1!1)"))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (use
                                                                 "set2list_same_elements[[BoolExpr, Stmt]]")
                                                                (("5"
                                                                  (assert)
                                                                  (("5"
                                                                    (expand
                                                                     "member"
                                                                     1)
                                                                    (("5"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "update_vars_wf_Stmt")
                                                              (("2"
                                                                (use
                                                                 "guard_to_expression_wf_BoolExpr")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -1
                                                         1
                                                         :dir
                                                         rl
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (expand
                                                           "ann_guard_actions_set")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "derive" 1)
                                          (("2"
                                            (expand "execute_CaseJML")
                                            (("2"
                                              (expand* "extend" "id")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "derive" 1)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst 1 "m2!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp)
                                          (("3"
                                            (use
                                             "before_member[[BoolExpr, Stmt]]")
                                            (("3"
                                              (use
                                               "before_distinct[[BoolExpr, Stmt]]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (use
                                                   "set2list_same_elements[[BoolExpr, Stmt]]")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "member"
                                                       -1)
                                                      (("3"
                                                        (expand
                                                         "ann_event_set"
                                                         -1)
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (replace
                                                             -3
                                                             :hide?
                                                             t)
                                                            (("3"
                                                              (replace
                                                               -6
                                                               :dir
                                                               rl
                                                               :hide?
                                                               t)
                                                              (("3"
                                                                (case
                                                                 "NOT q!1 = scp(t1)")
                                                                (("1"
                                                                  (expand
                                                                   "related_states")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -5
                                                                        -9
                                                                        -11
                                                                        -26
                                                                        -27
                                                                        1
                                                                        3))
                                                                      (("1"
                                                                        (split
                                                                         -6)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand*
                                                                           "ann_trans_cp"
                                                                           "derive"
                                                                           "derive"
                                                                           "derive")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand*
                                                                               "check_for_exception_final"
                                                                               "check_for_exception")
                                                                              (("2"
                                                                                (ground)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       -6)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         -12)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -10
                                                                                           :dir
                                                                                           rl
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "MP_modeled_lookup_correspondence")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "mp!1"
                                                                                               "scp(t1)"
                                                                                               "q!1"
                                                                                               "sMP1!1"
                                                                                               "sAP1!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skosimp)
                                          (("4"
                                            (replace
                                             -2
                                             -1
                                             :dir
                                             rl
                                             :hide?
                                             t)
                                            (("4"
                                              (expand "related_states")
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (hide-all-but
                                                   (-1
                                                    -5
                                                    -7
                                                    -22
                                                    -23
                                                    1
                                                    3))
                                                  (("4"
                                                    (split -)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       "ann_trans_cp"
                                                       "derive"
                                                       "derive"
                                                       "derive")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand*
                                                             "check_for_exception_final"
                                                             "check_for_exception")
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (rewrite
                                                                 -1)
                                                                (("2"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("2"
                                                                    (rewrite
                                                                     -4)
                                                                    (("2"
                                                                      (rewrite
                                                                       -8)
                                                                      (("2"
                                                                        (lemma
                                                                         "MP_modeled_lookup_correspondence")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "mp!1"
                                                                           "scp(t1)"
                                                                           "scp(t1)"
                                                                           "sMP1!1"
                                                                           "sAP1!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (case
                                           "ann_event_set(mp!1)(ts)(v!1)(brT)")
                                          (("1"
                                            (use
                                             "set2list_same_elements[[BoolExpr, Stmt]]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "member" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace
                                             -1
                                             1
                                             :dir
                                             rl
                                             :hide?
                                             t)
                                            (("2"
                                              (expand
                                               "ann_event_set"
                                               1)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "nonempty_exists")
                                                    (("2"
                                                      (inst 1 "t1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1 1 :dir rl)
                                      (("2"
                                        (use "ann_trans_cp_wf")
                                        (("2"
                                          (beta)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (prop) nil nil)
                                               ("2"
                                                (lemma
                                                 "subset_transitive[Transition]")
                                                (("2"
                                                  (inst
                                                   -
                                                   "{t: Transition | ts(t) AND scp(t) = scp(t1)}"
                                                   "ts"
                                                   "ts(mva(mp!1))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "filter_event_subset")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand*
                                                             "subset?"
                                                             "member")
                                                            (("2"
                                                              (skosimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (hide-all-but (-2 1))
                                (("2"
                                  (lemma "finite_subset[Transition]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -
                                       "ts(mva(mp!1))"
                                       "{t: Transition | ts(t) AND scp(t) = scp(t1)}")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand* "subset?" "member")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace
                                               -3
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("2"
                                                (expand "filter_event")
                                                (("2"
                                                  (flatten)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1 1 :dir rl)
                              (("2"
                                (expand "filter_event")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (typepred "mp!1")
                            (("2" (expand* "wf_MP" "wf_MVA" "wf_Trans")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -12 1))
                      (("2" (expand* "nonempty?" "empty?" "member")
                        (("2" (typepred "mva(mp!1)")
                          (("2" (expand* "complete" "total")
                            (("2" (flatten)
                              (("2"
                                (inst
                                 -
                                 "cp(astate(sMP1!1))"
                                 "(# etype := et!1, mname := name(m!1) #)"
                                 "stA(astate(sMP1!1))"
                                 "st(pstate(sMP1!1))"
                                 "v!1")
                                (("2"
                                  (expand* "wf_state" "wf_AState")
                                  (("2"
                                    (ground)
                                    (("1"
                                      (skolem!)
                                      (("1" (inst?) nil nil))
                                      nil)
                                     ("2"
                                      (reveal -2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (expand "related_states") (("5" (flatten) nil nil))
                nil)
               ("6" (expand "set2list")
                (("6" (lift-if)
                  (("6" (ground)
                    (("6" (hide-all-but (1 5))
                      (("6"
                        (expand* "empty?" "member" "ann_event_set"
                         "filter_event")
                        (("6" (skosimp*)
                          (("6" (rewrite "nonempty_exists")
                            (("6" (skolem - "t")
                              (("6"
                                (typepred "t")
                                (("6"
                                  (typepred "mp!1")
                                  (("6"
                                    (expand*
                                     "wf_MP"
                                     "wf_MVA"
                                     "wf_Trans")
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (inst?)
                                        (("6"
                                          (prop)
                                          (("6"
                                            (case
                                             "event(t) = (# etype := et!1, mname := name(m!1) #)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((derive def-decl "bool" Semantics nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (member const-decl "bool" sets nil)
    (total const-decl "boolean" MVASemantics nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (related_states const-decl "boolean" Equivalence nil)
    (filter_event_cp_is_finite formula-decl nil AnnotateMethod nil)
    (ann_event_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     AnnEventPreservesMPModeled nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateEvent nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (sMP1!1 skolem-const-decl "MPState[CP, Name]"
     AnnEventPreservesMPModeled nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (m!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     AnnEventPreservesMPModeled nil)
    (et!1 skolem-const-decl "EventType" AnnEventPreservesMPModeled nil)
    (mp!1 skolem-const-decl "(wf_MP)" AnnEventPreservesMPModeled nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (empty? const-decl "bool" sets nil)
    (set2list def-decl "list[T]" set2list nil)
    (CaseJML_exclusive_branches_semantics formula-decl nil
     APSemanticsProperties nil)
    (filter_event_subset formula-decl nil AnnotateMethod nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_transitive formula-decl nil sets_lemmas nil)
    (ts skolem-const-decl "finite_set[Transition[CP, Name]]"
     AnnEventPreservesMPModeled nil)
    (t1 skolem-const-decl "(LAMBDA (t: Transition):
   ts(mva(mp!1))(t) AND
    scp(t) = cp(astate(sMP1!1)) AND
     event(t) = (# etype := et!1, mname := name(m!1) #) AND
      guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1)), (v!1)))"
     AnnEventPreservesMPModeled nil)
    (ann_trans_cp_wf formula-decl nil AnnotateProgramProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (val2int const-decl "int" State nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (MP_modeled_lookup_correspondence formula-decl nil
     RelatedStatesProperties nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (update_vars_wf_Stmt formula-decl nil AnnotateProgramProperties
     nil)
    (guard_to_expression_wf_BoolExpr formula-decl nil
     AnnotateProgramProperties nil)
    (update_vars_preserves_MP_modeled formula-decl nil
     AnnEventPreservesMPModeled nil)
    (before_distinct formula-decl nil listfuncs nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (determ_step_AP formula-decl nil AnnotatedProgramSemantics nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (id_preserves application-judgement "S" identity_props nil)
    (derive_boolean_expr_type formula-decl nil SemanticsProofs nil)
    (bijective? const-decl "bool" functions nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (v!1 skolem-const-decl "ValOrExcpt[Name]"
     AnnEventPreservesMPModeled nil)
    (e!1 skolem-const-decl "[ValOrExcpt[Name] -> BoolExpr[Name]]"
     AnnEventPreservesMPModeled nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (deterministic const-decl "boolean" MVASemantics nil)
    (wf_state const-decl "boolean" State nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (before_member formula-decl nil listfuncs nil)
    (e!1 skolem-const-decl "[ValOrExcpt[Name] -> BoolExpr[Name]]"
     AnnEventPreservesMPModeled nil)
    (bT skolem-const-decl "[BoolExpr[Name], Stmt[Name]]"
     AnnEventPreservesMPModeled nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (guard_to_expression const-decl "[ValOrExcpt -> BoolExpr]"
     MVASemantics nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (list type-decl nil list_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (brT skolem-const-decl "[BoolExpr[Name], Stmt[Name]]"
     AnnEventPreservesMPModeled nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil)
    (finite_subset formula-decl nil finite_sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (step const-decl "AState" MVASemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (extend const-decl "R" extend nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   22946 17780 t shostak))
 (ann_event_does_not_throw_exception_TCC1 0
  (ann_event_does_not_throw_exception_TCC1-1 nil 3406195375 3410852598
   ("" (subtype-tcc) nil nil) proved
   ((wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (subset? const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (actions_have_no_side_effects const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   8362 7670 nil nil))
 (ann_event_does_not_throw_exception_TCC2 0
  (ann_event_does_not_throw_exception_TCC2-1 nil 3406195375 3410852602
   ("" (skosimp*)
    (("" (use "ann_event_wf_Body")
      (("" (expand "id")
        (("" (assert)
          (("" (expand* "subset?" "member" "filter_event")
            (("" (skosimp*) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ann_event_wf_Body formula-decl nil AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (Name formal-nonempty-type-decl nil AnnEventPreservesMPModeled nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   4517 910 t nil))
 (ann_event_does_not_throw_exception 0
  (ann_event_does_not_throw_exception-1 nil 3406195520 3410852604
   ("" (skosimp*)
    (("" (expand "ann_event")
      (("" (expand "derive")
        (("" (expand* "execute_CaseJML" "id" "extend" "return_of_stmt")
          (("" (lift-if)
            (("" (assert)
              (("" (lift-if) (("" (assert) (("" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ann_event const-decl "Stmt" AnnotateEvent nil)
    (return_of_stmt const-decl "Val" Semantics nil)
    (extend const-decl "R" extend nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (id_preserves application-judgement "S" identity_props nil)
    (derive def-decl "bool" Semantics nil))
   1432 1300 t shostak)))
(MethodCallsPreserveRelatedState
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3398591374 3410852074
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil
     MethodCallsPreserveRelatedState nil))
   621 580 t nil))
 (IMP_AnnEventPreservesMPModeled_TCC1 0
  (IMP_AnnEventPreservesMPModeled_TCC1-1 nil 3404214864 3410852075
   ("" (use "CP_is_enumerable") nil nil) proved
   ((CP_is_enumerable formula-decl nil MethodCallsPreserveRelatedState
     nil))
   583 580 t nil))
 (IMP_AnnEventPreservesMPModeled_TCC2 0
  (IMP_AnnEventPreservesMPModeled_TCC2-1 nil 3404214864 3410852075
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil MethodCallsPreserveRelatedState
     nil))
   620 590 t nil))
 (IMP_LegalProgramRestriction_TCC1 0
  (IMP_LegalProgramRestriction_TCC1-1 nil 3406019519 3410852076
   ("" (assuming-tcc) nil nil) proved
   ((id const-decl "(bijective?[T, T])" identity nil)) 631 590 nil
   nil))
 (on_method_entry_preserves_related_states_annotated_TCC1 0
  (on_method_entry_preserves_related_states_annotated_TCC1-1 nil
   3401441474 3410852077
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "b!1")
        (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   970 920 t nil))
 (on_method_entry_preserves_related_states_annotated_TCC2 0
  (on_method_entry_preserves_related_states_annotated_TCC2-1 nil
   3401441474 3410852078
   ("" (skosimp*)
    (("" (expand "id")
      (("" (use "ann_program_preserves_wf_method") nil nil)) nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program_preserves_wf_method formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   1020 990 t nil))
 (on_method_entry_preserves_related_states_annotated 0
  (on_method_entry_preserves_related_states_annotated-2 nil 3403466721
   3410852148
   ("" (skosimp*)
    (("" (expand* "on_method_entry_MP" "on_method_entry")
      (("" (assert)
        (("" (skosimp*)
          (("" (use "related_states_implies_same_exception")
            (("" (assert)
              (("" (skosimp*)
                (("" (expand* "id" "check_assertion")
                  (("" (skosimp*)
                    (("" (expand "lookup_inv")
                      (("" (use "get_class_equivalence")
                        (("" (assert)
                          (("" (replace -1)
                            (("" (assert)
                              ((""
                                (expand "ann_class" -25)
                                ((""
                                  (assert)
                                  ((""
                                    (lift-if -25)
                                    ((""
                                      (use "get_class_in_classes")
                                      ((""
                                        (assert)
                                        ((""
                                          (replace -13 :dir rl)
                                          ((""
                                            (replace -26)
                                            ((""
                                              (rewrite "derive" -28)
                                              ((""
                                                (skosimp*)
                                                ((""
                                                  (rewrite
                                                   "derive"
                                                   -29)
                                                  ((""
                                                    (skosimp*)
                                                    ((""
                                                      (rewrite
                                                       "derive"
                                                       -30)
                                                      ((""
                                                        (skosimp*)
                                                        ((""
                                                          (rewrite
                                                           "derive"
                                                           -31)
                                                          ((""
                                                            (rewrite
                                                             "derive"
                                                             -31)
                                                            ((""
                                                              (flatten)
                                                              ((""
                                                                (rewrite
                                                                 "derive"
                                                                 -35)
                                                                ((""
                                                                  (assert)
                                                                  ((""
                                                                    (rewrite
                                                                     "derive"
                                                                     -35)
                                                                    ((""
                                                                      (flatten)
                                                                      ((""
                                                                        (expand*
                                                                         "check_for_exception_final"
                                                                         "check_for_exception")
                                                                        ((""
                                                                          (assert)
                                                                          ((""
                                                                            (flatten)
                                                                            ((""
                                                                              (replace
                                                                               -41
                                                                               :hide?
                                                                               t)
                                                                              ((""
                                                                                (replace
                                                                                 -39
                                                                                 :hide?
                                                                                 t)
                                                                                ((""
                                                                                  (replace
                                                                                   -38
                                                                                   :hide?
                                                                                   t)
                                                                                  ((""
                                                                                    (replace
                                                                                     -34
                                                                                     :hide?
                                                                                     t)
                                                                                    ((""
                                                                                      (assert)
                                                                                      ((""
                                                                                        (case
                                                                                         "related_states(mp!1)(sMP1!1, tau!1)")
                                                                                        (("1"
                                                                                          (use
                                                                                           "related_states_lookup_correspondence")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "halted")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -12)
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (repeat
                                                                                                          (inst?
                                                                                                           -1
                                                                                                           :where
                                                                                                           (-17
                                                                                                            -40))))
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "cp(astate(tau1!3)) = halted")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "related_states"
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "derive_never_leaves_halted")
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "derive_yields_wf_state_MP")
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -1
                                                                                                                                 :where
                                                                                                                                 -27)
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -2
                                                                                                                                   :where
                                                                                                                                   -27)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "derive_never_leaves_halted")
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "derive_yields_wf_state_MP")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1
                                                                                                                                           :where
                                                                                                                                           -31)
                                                                                                                                          (("1"
                                                                                                                                            (inst?
                                                                                                                                             -2
                                                                                                                                             :where
                                                                                                                                             -31)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "cp(astate(sMP2!1)) = halted AND wf_state(mp!1)(sMP2!1)")
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "derive_yields_wf_state_AP")
                                                                                                                                                  (("1"
                                                                                                                                                    (copy
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1
                                                                                                                                                       :where
                                                                                                                                                       -56)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -2
                                                                                                                                                         :where
                                                                                                                                                         -58)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "derive_after_raise"
                                                                                                                                                             ("sigma1"
                                                                                                                                                              "tau1!5"
                                                                                                                                                              "sigma2"
                                                                                                                                                              "tau1!6"))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (use
                                                                                                                                                                     "derive_after_raise"
                                                                                                                                                                     ("sigma1"
                                                                                                                                                                      "tau1!6"
                                                                                                                                                                      "sigma2"
                                                                                                                                                                      "sAP2!1"))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "related_states")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -62)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState"
                                                                                                                                                                                   4
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "update_PState"
                                                                                                                                                                                     4
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "raise"
                                                                                                                                                                                       4
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "raise"
                                                                                                                                                                                         4
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -3)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -58)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                                               ("p"
                                                                                                                                                                                                "ann_program(mp!1)"))
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "wf_state(ann_program(mp!1))(update_PState(tau1!5, raise(JMLExc)))")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "update_PState"
                                                                                                                                                                                                         1
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (use
                                                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (use
                                                                                                                                                                                                     "wf_update_PState"
                                                                                                                                                                                                     ("p"
                                                                                                                                                                                                      "ann_program(mp!1)"))
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "update_PState"
                                                                                                                                                                                                           1
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (use
                                                                                                                                                           "ann_program_preserves_wf_method")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand*
                                                                                                                                                             "wf_Method"
                                                                                                                                                             "method_pred")
                                                                                                                                                            (("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?
                                                                                                                                                                 -4)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (use
                                                                                                                                                         "ann_program_preserves_wf_method")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand*
                                                                                                                                                           "wf_Method"
                                                                                                                                                           "method_pred")
                                                                                                                                                          (("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "id")
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (split
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -30)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -26)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "update_PState")
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if
                                                                                                                                                           (-1
                                                                                                                                                            -2
                                                                                                                                                            -3
                                                                                                                                                            -4))
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (branch
                                                                                                                                                                  (split
                                                                                                                                                                   -33)
                                                                                                                                                                  ((then
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (assert)
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (assert)))))
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_never_leaves_halted")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (split
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (branch
                                                                                                                                                        (split
                                                                                                                                                         -34)
                                                                                                                                                        ((then
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)))))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (use
                                                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "wf_state")
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "wf_ghoststate")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "is_ghost")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (split
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -29)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("2"
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                   ("p"
                                                                                                                                                                    "mp!1"))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "update_PState")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replace
                                                                                                                                                         -25)
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (split
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                   ("p"
                                                                                                                                                                    "mp!1"))
                                                                                                                                                                  (assert)
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState")
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                  (assert)))
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "related_states(mp!1)(tau1!2, tau1!1)")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "ann_method_pre")
                                                                                                                      (("1"
                                                                                                                        (copy
                                                                                                                         -15)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (inst?
                                                                                                                             -1
                                                                                                                             :where
                                                                                                                             (-23
                                                                                                                              -47))))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "cp(astate(tau1!4)) = halted")
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "derive_never_leaves_halted")
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "derive_yields_wf_state_MP")
                                                                                                                                      (("1"
                                                                                                                                        (inst?
                                                                                                                                         -1
                                                                                                                                         :where
                                                                                                                                         -29)
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -2
                                                                                                                                           :where
                                                                                                                                           -29)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "related_states"
                                                                                                                                               -4)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "cp(astate(sMP2!1)) = halted AND wf_state(mp!1)(sMP2!1)")
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "derive_yields_wf_state_AP")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -1
                                                                                                                                                         :where
                                                                                                                                                         -58)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "related_states"
                                                                                                                                                                 5)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "wf_state(ann_program(mp!1))(sAP2!1)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "up?(ex(pstate(tau2!1))) AND down(ex(pstate(tau2!1))) = JMLExc")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "derive"
                                                                                                                                                                           -62)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -59)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "update_PState")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "raise")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lift-if)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -57)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lift-if)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (split
                                                                                                                                                                             2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (then
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                                   ("p"
                                                                                                                                                                                    "ann_program(mp!1)"
                                                                                                                                                                                    "s1"
                                                                                                                                                                                    "tau1!6"))
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  (assert)))
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (use
                                                                                                                                                           "ann_program_preserves_wf_method")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand*
                                                                                                                                                             "wf_Method"
                                                                                                                                                             "method_pred")
                                                                                                                                                            (("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?
                                                                                                                                                                 -4)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (replace
                                                                                                                                                       -31)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "update_PState"
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if
                                                                                                                                                           -2)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (branch
                                                                                                                                                                (split
                                                                                                                                                                 -34)
                                                                                                                                                                ((then
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)))))
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                       ("p"
                                                                                                                                                                        "mp!1"))
                                                                                                                                                                      (assert)
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState")
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_state_raise")
                                                                                                                                                                      (assert)))
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (use
                                                                                                                                                                     "on_method_MVA_never_leaves_halted")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_yields_wf_AState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -4)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "wf_state")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_ghoststate")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_ghost")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                 ("p"
                                                                                                                                                                                  "mp!1"))
                                                                                                                                                                                (assert)
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (case
                                                                                                                                     "related_states(mp!1)(tau2!2, tau2!1)")
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "cp(astate(tau2!2)) = halted")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "related_states"
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "derive"
                                                                                                                                                   -55)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "derive_never_leaves_halted")
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "derive_yields_wf_state_MP")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1
                                                                                                                                                           :where
                                                                                                                                                           -33)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst?
                                                                                                                                                             -2
                                                                                                                                                             :where
                                                                                                                                                             -33)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (branch
                                                                                                                                                                  (split
                                                                                                                                                                   -36)
                                                                                                                                                                  ((then
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (assert)
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (assert)))))
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "related_states")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "related_states")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (use
                                                                                                                                                                         "on_method_MVA_never_leaves_halted")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (use
                                                                                                                                                                             "on_method_MVA_yields_wf_AState")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_state")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "wf_ghoststate")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "is_ghost")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "related_states_implies_same_exception")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (use
                                                                                                                                             "ann_method_pre_set")
                                                                                                                                            (("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "derive"
                                                                                                                                                 -54)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (apply
                                                                                                                                                     (branch
                                                                                                                                                      (split
                                                                                                                                                       -54)
                                                                                                                                                      ((then
                                                                                                                                                        (flatten)
                                                                                                                                                        (assert)
                                                                                                                                                        (flatten)
                                                                                                                                                        (assert)))))
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "derive"
                                                                                                                                                       -34)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -34)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (branch
                                                                                                                                                              (split
                                                                                                                                                               -39)
                                                                                                                                                              ((then
                                                                                                                                                                (flatten)
                                                                                                                                                                (assert)
                                                                                                                                                                (flatten)
                                                                                                                                                                (assert)))))
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (skosimp*)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -7)
                                                                                                                                                        (("2"
                                                                                                                                                          (apply
                                                                                                                                                           (repeat
                                                                                                                                                            (inst?
                                                                                                                                                             -26
                                                                                                                                                             :where
                                                                                                                                                             (-35
                                                                                                                                                              -3))))
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               -26)
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "NOT cp(astate(s_new!1)) = halted")
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   -38)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (use
                                                                                                                                                                       "related_states_implies_same_exception")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "derive"
                                                                                                                                                                             -10)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "ann_method"
                                                                                                                                                                       -8)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "derive"
                                                                                                                                                                           -8)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (use
                                                                                                                                                                             "related_states_implies_same_exception")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "methods(get_monitored_class(mp!1))(md!1)")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "ann_event_does_not_throw_exception")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (use
                                                                                                                                                                                             "ann_event_preserves_MP_modeled"
                                                                                                                                                                                             ("sMP2"
                                                                                                                                                                                              "sMP2!1"))
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (case
                                                                                                                                                                                                     "wf_state(mp!1)(sMP2!1)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (case
                                                                                                                                                                                                       "wf_state(ann_program(mp!1))(tau!4)")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "derive"
                                                                                                                                                                                                           -17)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand*
                                                                                                                                                                                                             "execute_assert"
                                                                                                                                                                                                             "check_assertion")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (apply
                                                                                                                                                                                                               (branch
                                                                                                                                                                                                                (split
                                                                                                                                                                                                                 -17)
                                                                                                                                                                                                                ((then
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (assert)))))
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                   "derive"
                                                                                                                                                                                                                   -19)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                                       "derive"
                                                                                                                                                                                                                       -20)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                                           "derive"
                                                                                                                                                                                                                           -21)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                             "derive"
                                                                                                                                                                                                                             -22)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                                   "derive"
                                                                                                                                                                                                                                   -22)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (rewrite
                                                                                                                                                                                                                                         "derive"
                                                                                                                                                                                                                                         -25)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (expand*
                                                                                                                                                                                                                                             "check_for_exception_final"
                                                                                                                                                                                                                                             "check_for_exception")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                                 -29
                                                                                                                                                                                                                                                 :hide?
                                                                                                                                                                                                                                                 t)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                                     -30
                                                                                                                                                                                                                                                     :hide?
                                                                                                                                                                                                                                                     t)
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                                       -28
                                                                                                                                                                                                                                                       :hide?
                                                                                                                                                                                                                                                       t)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                         -24
                                                                                                                                                                                                                                                         :hide?
                                                                                                                                                                                                                                                         t)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                             "halted")
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                                                               -22)
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (use
                                                                                                                                                                                                                                                                 "MP_modeled_lookup_correspondence"
                                                                                                                                                                                                                                                                 ("sMP"
                                                                                                                                                                                                                                                                  "sMP2!1"
                                                                                                                                                                                                                                                                  "q1"
                                                                                                                                                                                                                                                                  "cp(astate(sMP2!1))"))
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (split
                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                       "related_states"
                                                                                                                                                                                                                                                                       11)
                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (split
                                                                                                                                                                                                                                                                             11)
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                                                                               -29)
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (lift-if)
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (split
                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (use
                                                                                                                                                                                                                                                                                         "wf_update_PState"
                                                                                                                                                                                                                                                                                         ("p"
                                                                                                                                                                                                                                                                                          "ann_program(mp!1)"))
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                (use
                                                                                                                                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                                                                   -30)
                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "raise")
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                                             ("3"
                                                                                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                                                                                              (("3"
                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                                                       "mva(mp!1)")
                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                         "complete")
                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                     ("3"
                                                                                                                                                                                                                                                                      (expand*
                                                                                                                                                                                                                                                                       "wf_state"
                                                                                                                                                                                                                                                                       "wf_AState")
                                                                                                                                                                                                                                                                      (("3"
                                                                                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "derive_yields_wf_state_AP")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst?
                                                                                                                                                                                                           -1
                                                                                                                                                                                                           :where
                                                                                                                                                                                                           -15)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "related_states")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (propax)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "ann_event_wf_Body")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand*
                                                                                                                                                                                                                 "subset?"
                                                                                                                                                                                                                 "member"
                                                                                                                                                                                                                 "filter_event")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "related_states")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -5
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "on_method_MVA_yields_wf_AState")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "wf_state")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "wf_ghoststate")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "is_ghost")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (apply-extensionality
                                                                                                                                                                                                   :hide?
                                                                                                                                                                                                   t)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -4)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (case-replace
                                                                                                                                                                                                         "val(v(v!1)) = v!1")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (apply-extensionality
                                                                                                                                                                                                           :hide?
                                                                                                                                                                                                           t)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "get_monitored_class(mp!1) = down(get_class(program(mp!1))(a!1))")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (use
                                                                                                                                                                                         "lookup_mthd_in_methods_class")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (use
                                                                                                                                                                                       "name_get_monitored_class")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (use
                                                                                                                                                                                         "get_monitored_class_in_classes")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (typepred
                                                                                                                                                                                           "program(mp!1)")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand*
                                                                                                                                                                                             "wf_Program"
                                                                                                                                                                                             "wf_program_has_unique_class_names_def")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (flatten)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "related_states"
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "derive"
                                                                                                                                                                         -10)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (use
                                                                                                                                                                                 "on_method_MVA_never_leaves_halted")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (apply
                                                                                                                                                                                     (branch
                                                                                                                                                                                      (split
                                                                                                                                                                                       -45)
                                                                                                                                                                                      ((then
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (assert)))))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "related_states")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "related_states")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (use
                                                                                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "wf_state")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "wf_ghoststate")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "is_ghost")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "legal_Program")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "program_pred")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -20
                                                                                                                                                                     "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (split
                                                                                                                                                                         -20)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -2
                                                                                                                                                                             "ann_method(mp!1)(md!1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "method_pred")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (use
                                                                                                                                                                                       "ann_method_pre_set")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -2
                                                                                                                                                                                           :dir
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "legal_Body_preserved_by_proper_subterm")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "ann_program(mp!1)"
                                                                                                                                                                                               "pre_set(ann_method(mp!1)(md!1))(v(v!1))"
                                                                                                                                                                                               "s1(pre_set(ann_method(mp!1)(md!1))(v(v!1)))")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "<<")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                     -6)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "ann_class")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "ann_methods")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst?)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (use
                                                                                                                                                                                             "lookup_mthd_in_methods_class")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "ann_program")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("3"
                                                                                                                                                                (typepred
                                                                                                                                                                 "md!1")
                                                                                                                                                                (("3"
                                                                                                                                                                  (expand
                                                                                                                                                                   "wf_Method")
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "method_pred")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -4)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (expand*
                                                                                                                                                                           "wf_Body"
                                                                                                                                                                           "subset?"
                                                                                                                                                                           "member")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -25)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -49)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (use
                                                                                                                                                         "related_states_preserved_by_raise")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "legal_Program")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "program_pred")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -9
                                                                                                                                     "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -9)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "method_pred")
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "ann_method(mp!1)(md!1)")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "ann_method_pre")
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "ann_class")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "ann_methods")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (use
                                                                                                                                                             "lookup_mthd_in_methods_class")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "ann_program")
                                                                                                                                          (("2"
                                                                                                                                            (inst?)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (typepred
                                                                                                                                 "md!1")
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "wf_Method")
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "method_pred")
                                                                                                                                    (("3"
                                                                                                                                      (flatten)
                                                                                                                                      (("3"
                                                                                                                                        (inst?)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          (("3"
                                                                                                                                            (expand*
                                                                                                                                             "wf_Body"
                                                                                                                                             "subset?"
                                                                                                                                             "member")
                                                                                                                                            (("3"
                                                                                                                                              (flatten)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "ann_program_preserves_wf_body")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "id")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -43)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -19)
                                                                                                                          (("2"
                                                                                                                            (case-replace
                                                                                                                             "v!4 = v!6")
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (use
                                                                                                                                       "related_states_preserved_by_raise")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -42)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "derive_bottom_iff_exception_step"
                                                                                                                                   ("p"
                                                                                                                                    "ann_program(mp!1)"))
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1
                                                                                                                                     :where
                                                                                                                                     -44)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -4)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (apply-extensionality
                                                                                                                                           :hide?
                                                                                                                                           t)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "legal_Program")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "program_pred")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -6
                                                                                                                   "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "method_pred")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ann_class")
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "legal_Body_preserved_by_proper_subterm")
                                                                                                                              (("1"
                                                                                                                                (inst?
                                                                                                                                 -1
                                                                                                                                 :where
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "<<")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "ann_program")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (typepred
                                                                                                               "program(mp!1)")
                                                                                                              (("3"
                                                                                                                (expand*
                                                                                                                 "wf_Program"
                                                                                                                 "program_pred")
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst?)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (replace
                                                                                                                           -20
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("3"
                                                                                                                            (expand*
                                                                                                                             "wf_Body"
                                                                                                                             "subset?"
                                                                                                                             "member")
                                                                                                                            (("3"
                                                                                                                              (flatten)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "ann_program_preserves_wf_body")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "id")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "mva(mp!1)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "complete")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "related_states"
                                                                                                   -)
                                                                                                  (("3"
                                                                                                    (expand*
                                                                                                     "wf_state"
                                                                                                     "wf_AState")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -38)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (id_preserves application-judgement "S" identity_props nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derive def-decl "bool" Semantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (related_states_lookup_correspondence formula-decl nil
     RelatedStatesProperties nil)
    (halted const-decl "CP" MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (ann_method_pre formula-decl nil AnnotateMethod nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (m2!1 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (m1!6 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (ValOrExcpt_val_extensionality formula-decl nil ValOrExcpt_adt nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (MP_modeled_lookup_correspondence formula-decl nil
     RelatedStatesProperties nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (member const-decl "bool" sets nil)
    (ann_event_wf_Body formula-decl nil AnnotateProgramProperties nil)
    (ann_event_preserves_MP_modeled formula-decl nil
     AnnEventPreservesMPModeled nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (ann_event_does_not_throw_exception formula-decl nil
     AnnEventPreservesMPModeled nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (legal_Body_preserved_by_proper_subterm formula-decl nil
     LegalProgramRestriction nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (ann_method_pre_set formula-decl nil AnnotateMethod nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     MethodCallsPreserveRelatedState nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (md!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (v!1 skolem-const-decl "ValOrExcpt[Name]"
     MethodCallsPreserveRelatedState nil)
    (ann_program_preserves_wf_method formula-decl nil
     AnnotateProgramProperties nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (wf_state_raise formula-decl nil State nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (derive_after_raise formula-decl nil SemanticsProofs nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (related_states const-decl "boolean" Equivalence nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil))
   70258 59380 t nil)
  (on_method_entry_preserves_related_states_annotated-1 nil 3400566287
   3403465803
   ("" (skosimp*)
    (("" (expand* "on_method_entry_MP" "on_method_entry")
      (("" (flatten)
        (("" (assert)
          (("" (skosimp*)
            (("" (use "related_states_implies_same_exception2")
              (("" (assert)
                (("" (skosimp*)
                  (("" (expand* "id" "check_assertion")
                    (("" (skosimp*)
                      (("" (expand "lookup_inv")
                        (("" (use "get_class_equivalence")
                          (("" (assert)
                            (("" (replace -1)
                              ((""
                                (assert)
                                ((""
                                  (expand "ann_class" -22)
                                  ((""
                                    (assert)
                                    ((""
                                      (lift-if -22)
                                      ((""
                                        (use "get_class_in_classes")
                                        ((""
                                          (assert)
                                          ((""
                                            (replace -12 :dir rl)
                                            ((""
                                              (replace -23)
                                              ((""
                                                (rewrite "derive" -25)
                                                ((""
                                                  (skosimp*)
                                                  ((""
                                                    (case
                                                     "related_states(mp!1)(sMP1!1, tau!1) AND v1!1 = Bool(TRUE)")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (copy -12)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -1
                                                             :where
                                                             (-17
                                                              -30))))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "related_states(mp!1)(tau1!2, tau1!1)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "ann_method_pre")
                                                                    (("1"
                                                                      (copy
                                                                       -15)
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           (-23
                                                                            -37))))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (case
                                                                               "related_states(mp!1)(tau2!2, tau2!1)")
                                                                              (("1"
                                                                                (use
                                                                                 "ann_method_pre_set")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "derive"
                                                                                     -43)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -43)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -6)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -24
                                                                                                 :where
                                                                                                 (-33
                                                                                                  -3))))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -24)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -35)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "related_states_implies_same_exception")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "derive"
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ann_method"
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "derive"
                                                                                                             -6)
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-2
                                                                                                                    -3
                                                                                                                    -4
                                                                                                                    -5
                                                                                                                    -19
                                                                                                                    -22
                                                                                                                    -25
                                                                                                                    -26
                                                                                                                    -27
                                                                                                                    1
                                                                                                                    6))
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "methods(get_monitored_class(mp!1))(md!1)")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(ann_program(mp!1))(tau!3)")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "related_states"
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(mp!1)(sMP2!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(ann_program(mp!1))(sAP2!1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (use
                                                                                                                                 "ann_event_preserves_MP_modeled")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -4
                                                                                                                                      -5
                                                                                                                                      -7
                                                                                                                                      -8
                                                                                                                                      2))
                                                                                                                                    (("1"
                                                                                                                                      (expand*
                                                                                                                                       "derive"
                                                                                                                                       "execute_assert"
                                                                                                                                       "check_assertion")
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -4)
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (auto-rewrite
                                                                                                                                             "derive")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (expand*
                                                                                                                                                   "check_for_exception_final"
                                                                                                                                                   "check_for_exception")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (stop-rewrite
                                                                                                                                                       "derive")
                                                                                                                                                      (("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -6
                                                                                                                                                             :dir
                                                                                                                                                             rl
                                                                                                                                                             :hide?
                                                                                                                                                             t)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -9
                                                                                                                                                               :dir
                                                                                                                                                               rl
                                                                                                                                                               :hide?
                                                                                                                                                               t)
                                                                                                                                                              (("2"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -13)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -2
                                                                                                                                                                       :dir
                                                                                                                                                                       rl
                                                                                                                                                                       :hide?
                                                                                                                                                                       t)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "halted_implies_JMLExc")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -13
                                                                                                                                                                             -1
                                                                                                                                                                             :hide?
                                                                                                                                                                             t)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -12
                                                                                                                                                                               -1
                                                                                                                                                                               :hide?
                                                                                                                                                                               t)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -7
                                                                                                                                                                                   :hide?
                                                                                                                                                                                   t)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -9
                                                                                                                                                                                     :hide?
                                                                                                                                                                                     t)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (use
                                                                                                                                                                                       "MP_modeled_lookup_correspondence")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (ground)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "halted")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (typepred
                                                                                                                                                                                           "mva(mp!1)")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "complete")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("3"
                                                                                                                                                                                          (reveal
                                                                                                                                                                                           -11)
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (expand*
                                                                                                                                                                                             "wf_state"
                                                                                                                                                                                             "wf_AState")
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand*
                                                                                                                                                                       "update_PState"
                                                                                                                                                                       "raise")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1
                                                                                                                                                                         3)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand*
                                                                                                                                                                           "MP_modeled?"
                                                                                                                                                                           "halted_implies_JMLExc")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand*
                                                                                                                                                                               "MVA_modeled?"
                                                                                                                                                                               "MVA_cp_modeled?"
                                                                                                                                                                               "MVA_cps_modeled?"
                                                                                                                                                                               "MVA_vars_modeled?")
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "Program_modeled?")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (prop)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "Program_gvs_modeled?")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "derive_yields_wf_state_AP"
                                                                                                                                 ("sigma1"
                                                                                                                                  "tau!3"))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "wf_Body")
                                                                                                                                    (("2"
                                                                                                                                      (split)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp)
                                                                                                                                        (("1"
                                                                                                                                          (auto-rewrite
                                                                                                                                           "var_names"
                                                                                                                                           "union"
                                                                                                                                           "member")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "singleton")
                                                                                                                                              (("1"
                                                                                                                                                (use
                                                                                                                                                 "ann_program_ext_declared_var_names")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (split)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           2
                                                                                                                                                           "new_cp_gvd(mp!1)")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand*
                                                                                                                                                             "new_gvds"
                                                                                                                                                             "add")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "new_cp_gvd")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (inst
                                                                                                                                                           2
                                                                                                                                                           "new_halted_gvd(mp!1)")
                                                                                                                                                          (("2"
                                                                                                                                                            (use
                                                                                                                                                             "halted_gvd_new_ghostvar")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "new_halted_gvd"
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "halted")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (auto-rewrite
                                                                                                                                           "subterm")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (expand*
                                                                                                                               "related_states")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "wf_state"
                                                                                                                                   (-6
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -5
                                                                                                                                     1
                                                                                                                                     :hide?
                                                                                                                                     t)
                                                                                                                                    (("2"
                                                                                                                                      (ground)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "on_method_MVA_yields_wf_AState")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "wf_state"
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand*
                                                                                                                                         "wf_ghoststate"
                                                                                                                                         "is_ghost")
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "related_states")
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "derive_yields_wf_state_AP")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "ann_event_wf_Body")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand*
                                                                                                                                 "subset?"
                                                                                                                                 "member"
                                                                                                                                 "filter_event")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "get_monitored_class(mp!1) = down(get_class(program(mp!1))(a!1))")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "lookup_mthd_in_methods_class")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (use
                                                                                                                         "name_get_monitored_class")
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "get_monitored_class_in_classes")
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "program(mp!1)")
                                                                                                                            (("2"
                                                                                                                              (expand*
                                                                                                                               "wf_Program"
                                                                                                                               "wf_program_has_unique_class_names_def")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "md!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "wf_Method")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           "wf_Body"
                                                                                                           "subset?"
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -24)
                                                                                (("2"
                                                                                  (replace
                                                                                   -38)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "related_states_preserved_by_raise")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "derive_bottom_iff_exception_step"
                                                                                                       ("p"
                                                                                                        "ann_program(mp!1)"))
                                                                                                      (("2"
                                                                                                        (inst?
                                                                                                         -1
                                                                                                         :where
                                                                                                         -41)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "md!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "wf_Body"
                                                                                     "subset?"
                                                                                     "member")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "id")
                                                                          (("2"
                                                                            (use
                                                                             "ann_program_preserves_wf_body")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "check_for_exception_final")
                                                                    (("2"
                                                                      (expand
                                                                       "check_for_exception")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -33)
                                                                          (("2"
                                                                            (replace
                                                                             -19)
                                                                            (("2"
                                                                              (case-replace
                                                                               "v!1 = v!3")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "related_states_preserved_by_raise")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split
                                                                                 -32)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "related_states_implies_same_exception2")
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (Val_Int_eta formula-decl nil Val_adt nil)
    (val2int const-decl "int" State nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Assert adt-constructor-decl "[BoolExpr -> (Assert?)]" Body_adt
     nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (halted const-decl "CP" MVA nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (raise const-decl "PState" State nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (ann_event_wf_Body formula-decl nil AnnotateProgramProperties nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (ann_method_pre_set formula-decl nil AnnotateMethod nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (ann_method_pre formula-decl nil AnnotateMethod nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (related_states const-decl "boolean" Equivalence nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (derive def-decl "bool" Semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (id_preserves application-judgement "S" identity_props nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil))
   1394599 33860 t shostak))
 (on_method_entry_preserves_related_states_halted_reached 0
  (on_method_entry_preserves_related_states_halted_reached-1 nil
   3404473243 3410852151
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (skosimp*)
        (("" (expand "on_method_entry")
          ((""
            (apply (branch (split -2)
                    ((then (flatten) (assert) (flatten) (assert)))))
            (("" (skosimp*)
              (("" (expand "check_assertion")
                (("" (skosimp*)
                  (("" (use "derive_never_leaves_halted")
                    (("" (assert)
                      (("" (hide -11)
                        (("" (use "derive_never_leaves_halted")
                          (("" (assert)
                            (("" (hide -7)
                              ((""
                                (use "derive_never_leaves_halted")
                                ((""
                                  (assert)
                                  ((""
                                    (replace -8 -1)
                                    ((""
                                      (replace -11 -3)
                                      ((""
                                        (lift-if)
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "update_PState")
                                            ((""
                                              (assert)
                                              ((""
                                                (apply
                                                 (branch
                                                  (split -15)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                ((""
                                                  (replace -1)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (use
                                                       "on_method_MVA_never_leaves_halted")
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   2175 2030 t shostak))
 (on_method_entry_preserves_related_states_not_annotated_TCC1 0
  (on_method_entry_preserves_related_states_not_annotated_TCC1-1 nil
   3401441474 3410852152
   ("" (expand "id")
    (("" (skosimp*)
      (("" (typepred "b!1")
        (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
      nil))
    nil)
   proved
   ((ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   1025 940 t nil))
 (on_method_entry_preserves_related_states_not_annotated_TCC2 0
  (on_method_entry_preserves_related_states_not_annotated_TCC2-1 nil
   3401441474 3410852158
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "md!1")
        (("" (expand "wf_Method")
          (("" (expand "method_pred")
            (("" (expand "wf_Body")
              (("" (rewrite "ann_program_ext_declared_var_names")
                (("" (auto-rewrite "union" "member")
                  (("" (assert)
                    (("" (flatten)
                      (("" (rewrite "ann_program_add_ghost_var_decls")
                        (("" (rewrite "var_names_union")
                          (("" (assert)
                            (("" (split 4)
                              (("1"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -4)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -4)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -5)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst? -4)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp*)
                                (("4"
                                  (inst? -6)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -6)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -6)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -7)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -8)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -7)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -7)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -8)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -9)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -8)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -8)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -9)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -10)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (skosimp*)
                                (("8"
                                  (inst? -9)
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (skosimp*)
                                (("9"
                                  (inst? -11)
                                  (("9" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   6366 2580 t nil))
 (on_method_entry_preserves_related_states_not_annotated 0
  (on_method_entry_preserves_related_states_not_annotated-2 nil
   3405946607 3410852191
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (expand "on_method_entry")
        ((""
          (apply (then (use "related_states_implies_same_exception")
                  (assert) (replace -1)))
          (("" (skosimp*)
            (("" (expand "check_assertion")
              (("" (skosimp*)
                (("" (expand "lookup_inv")
                  (("" (expand "id")
                    (("" (use "get_class_equivalence")
                      (("" (assert)
                        (("" (replace -1)
                          (("" (replace -24 :dir rl)
                            (("" (replace -11)
                              ((""
                                (copy -8)
                                (("1"
                                  (apply
                                   (repeat
                                    (inst? -1 :where (-14 -27))))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case
                                           "cp(astate(tau1!3)) = halted")
                                          (("1"
                                            (lemma
                                             "derive_never_leaves_halted")
                                            (("1"
                                              (copy -1)
                                              (("1"
                                                (lemma
                                                 "derive_yields_wf_state_MP")
                                                (("1"
                                                  (copy -1)
                                                  (("1"
                                                    (inst?
                                                     -1
                                                     :where
                                                     -23)
                                                    (("1"
                                                      (inst?
                                                       -3
                                                       :where
                                                       -23)
                                                      (("1"
                                                        (inst?
                                                         -2
                                                         :where
                                                         -25)
                                                        (("1"
                                                          (inst?
                                                           -4
                                                           :where
                                                           -25)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "derive_yields_wf_state_AP")
                                                              (("1"
                                                                (copy
                                                                 -1)
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   -38)
                                                                  (("1"
                                                                    (inst?
                                                                     -2
                                                                     :where
                                                                     -40)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "related_states"
                                                                         -8)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "cp(astate(sMP2!1)) = halted")
                                                                              (("1"
                                                                                (case
                                                                                 "wf_state(mp!1)(sMP2!1)")
                                                                                (("1"
                                                                                  (case
                                                                                   "up?(ex(pstate(tau1!1))) AND down(ex(pstate(tau1!1))) = JMLExc")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "derive"
                                                                                       -45)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (case
                                                                                             "up?(ex(pstate(tau2!1))) AND down(ex(pstate(tau2!1))) = JMLExc")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "derive"
                                                                                                 -51)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "related_states"
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -49)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -46
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -45
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -43)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"))
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "wf_update_PState"
                                                                                                                             ("p"
                                                                                                                              "ann_program(mp!1)"))
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "wf_state(ann_program(mp!1))(update_PState(tau1!5, raise(JMLExc)))")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "update_PState"
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "wf_state_raise")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_update_PState"
                                                                                                                                     ("p"
                                                                                                                                      "ann_program(mp!1)"))
                                                                                                                                    (assert)
                                                                                                                                    (skosimp*)
                                                                                                                                    (expand
                                                                                                                                     "update_PState")
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -48)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "raise")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -41)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "update_PState"
                                                                                       "raise")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split
                                                                                   -5)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -34)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "on_method_MVA_yields_wf_AState")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "wf_state")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "wf_ghoststate")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "is_ghost")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -29)
                                                                                    (("2"
                                                                                      (split
                                                                                       -4)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "wf_update_PState"
                                                                                                   ("p"
                                                                                                    "mp!1"))
                                                                                                  (assert)
                                                                                                  (skosimp*)
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (use
                                                                                                   "wf_state_raise")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -24)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "wf_update_PState"
                                                                                                     ("p"
                                                                                                      "mp!1"))
                                                                                                    (assert)
                                                                                                    (skosimp*)
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (use
                                                                                                     "wf_state_raise")
                                                                                                    (assert)))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -26)
                                                                                (("2"
                                                                                  (replace
                                                                                   -28)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -32)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "on_method_MVA_never_leaves_halted")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "md!1")
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Method")
                                                                        (("2"
                                                                          (expand
                                                                           "method_pred")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst?
                                                                               -4)
                                                                              (("2"
                                                                                (expand*
                                                                                 "wf_Body"
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("2"
                                                                                  (auto-rewrite
                                                                                   "union"
                                                                                   "member")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "ann_program_ext_declared_var_names")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "ann_program_add_ghost_var_decls")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "var_names_union")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "md!1")
                                                                    (("2"
                                                                      (expand
                                                                       "wf_Method")
                                                                      (("2"
                                                                        (expand
                                                                         "method_pred")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (expand*
                                                                               "wf_Body"
                                                                               "subset?"
                                                                               "member")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (auto-rewrite
                                                                                   "union"
                                                                                   "member")
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "ann_program_ext_declared_var_names")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst?
                                                                                               -2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "ann_program_add_ghost_var_decls")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "var_names_union")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "id")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "related_states(mp!1)(tau1!2, tau1!1)")
                                            (("1"
                                              (copy -11)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -1
                                                   :where
                                                   (-20 -33))))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "cp(astate(tau1!4)) = halted")
                                                        (("1"
                                                          (lemma
                                                           "derive_never_leaves_halted")
                                                          (("1"
                                                            (lemma
                                                             "derive_yields_wf_state_MP")
                                                            (("1"
                                                              (inst?
                                                               -1
                                                               :where
                                                               -26)
                                                              (("1"
                                                                (inst?
                                                                 -2
                                                                 :where
                                                                 -26)
                                                                (("1"
                                                                  (lemma
                                                                   "derive_yields_wf_state_AP")
                                                                  (("1"
                                                                    (inst?
                                                                     -1
                                                                     :where
                                                                     -40)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "related_states"
                                                                         -5)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "cp(astate(sMP2!1)) = halted")
                                                                              (("1"
                                                                                (case
                                                                                 "wf_state(mp!1)(sMP2!1)")
                                                                                (("1"
                                                                                  (case
                                                                                   "up?(ex(pstate(tau2!1))) AND down(ex(pstate(tau2!1))) = JMLExc")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "derive"
                                                                                       -47)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "related_states"
                                                                                             5)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -45)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "wf_update_PState"
                                                                                                               ("p"
                                                                                                                "ann_program(mp!1)"))
                                                                                                              (assert)
                                                                                                              (skosimp*)
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (use
                                                                                                               "wf_state_raise")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -44)
                                                                                    (("2"
                                                                                      (expand*
                                                                                       "update_PState"
                                                                                       "raise")
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split
                                                                                   -3)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -34)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "on_method_MVA_yields_wf_AState")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "wf_state")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "wf_ghoststate")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "is_ghost")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -29)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "wf_update_PState"
                                                                                                 ("p"
                                                                                                  "mp!1"))
                                                                                                (assert)
                                                                                                (skosimp*)
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (use
                                                                                                 "wf_state_raise")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -29)
                                                                                (("2"
                                                                                  (expand
                                                                                   "update_PState")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -32)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (use
                                                                                               "on_method_MVA_never_leaves_halted")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "md!1")
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Method")
                                                                        (("2"
                                                                          (expand
                                                                           "method_pred")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst?
                                                                               -4)
                                                                              (("2"
                                                                                (expand*
                                                                                 "wf_Body"
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("2"
                                                                                  (auto-rewrite
                                                                                   "union"
                                                                                   "member")
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "ann_program_ext_declared_var_names")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst?
                                                                                               -6)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "ann_program_add_ghost_var_decls")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "var_names_union")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "related_states(mp!1)(tau2!2, tau2!1)")
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -14
                                                               :where
                                                               (-24
                                                                -37))))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -14)
                                                                (("1"
                                                                  (split
                                                                   -27)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "on_method_MVA")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (use
                                                                                 "lookup_mthd_in_methods_class")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -20)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "program(mp!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_program_methods_only_in_one_class")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "wf_program_methods_only_in_one_class")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "get_monitored_class(mp!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "get_class_in_classes")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "get_monitored_class_in_classes")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "name_get_monitored_class")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (case-replace
                                                                                 "sMP2!1 = s_new!1"
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "legal_Program")
                                                                  (("2"
                                                                    (expand
                                                                     "program_pred")
                                                                    (("2"
                                                                      (inst?
                                                                       -9)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -9)
                                                                          (("1"
                                                                            (expand
                                                                             "method_pred")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -4)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "lookup_mthd_in_methods_class")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "ann_program"
                                                                             1)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "ann_class"
                                                                                   1)
                                                                                  (("2"
                                                                                    (use
                                                                                     "get_class_in_classes")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "md!1")
                                                                  (("3"
                                                                    (expand
                                                                     "wf_Method")
                                                                    (("3"
                                                                      (expand
                                                                       "method_pred")
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (inst?
                                                                           -4)
                                                                          (("3"
                                                                            (expand*
                                                                             "wf_Body"
                                                                             "subset?"
                                                                             "member")
                                                                            (("3"
                                                                              (flatten)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -22)
                                                            (("2"
                                                              (replace
                                                               -35)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (use
                                                                                   "related_states_preserved_by_raise")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "legal_Program")
                                                      (("2"
                                                        (expand
                                                         "program_pred")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (expand
                                                                 "method_pred")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "lookup_mthd_in_methods_class")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "ann_program"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "ann_class"
                                                                   1)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "get_class_in_classes")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred "md!1")
                                                      (("3"
                                                        (expand
                                                         "wf_Method")
                                                        (("3"
                                                          (expand
                                                           "method_pred")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (expand*
                                                                 "wf_Body"
                                                                 "subset?"
                                                                 "member")
                                                                (("3"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "id")
                                                  (("2"
                                                    (use
                                                     "ann_program_preserves_wf_body")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -16)
                                              (("2"
                                                (replace -29)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (replace
                                                             -2)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (use
                                                                     "related_states_preserved_by_raise")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "legal_Program")
                                        (("2"
                                          (expand "program_pred")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "ann_program"
                                                 2)
                                                (("2"
                                                  (expand
                                                   "ann_class"
                                                   2)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "get_class_in_classes")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "program(mp!1)")
                                        (("3"
                                          (expand "wf_Program")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (expand "program_pred")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use
                                                     "get_class_in_classes")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (replace
                                                           -31
                                                           :dir
                                                           rl)
                                                          (("3"
                                                            (expand*
                                                             "wf_Body"
                                                             "subset?"
                                                             "member")
                                                            (("3"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (expand "id")
                                    (("2"
                                      (use
                                       "ann_program_preserves_wf_body")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     MethodCallsPreserveRelatedState nil)
    (md!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (v!1 skolem-const-decl "ValOrExcpt[Name]"
     MethodCallsPreserveRelatedState nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (wf_state_raise formula-decl nil State nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (wf_program_methods_only_in_one_class formula-decl nil
     WellFormedProgram nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (halted const-decl "CP" MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (derive def-decl "bool" Semantics nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   32236 26820 t nil)
  (on_method_entry_preserves_related_states_not_annotated-1 nil
   3398684696 3405080117
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (expand "on_method_entry")
        ((""
          (apply (then (use "related_states_implies_same_exception")
                  (assert) (replace -1)))
          (("" (skosimp*)
            (("" (expand "check_assertion")
              (("" (skosimp*)
                (("" (expand "lookup_inv")
                  (("" (expand "id")
                    (("" (use "get_class_equivalence")
                      (("" (assert)
                        (("" (replace -1)
                          (("" (replace -21 :dir rl)
                            (("" (replace -10)
                              ((""
                                (copy -8)
                                (("1"
                                  (apply
                                   (repeat
                                    (inst? -1 :where (-13 -24))))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case
                                           "related_states(mp!1)(tau1!2, tau1!1)")
                                          (("1"
                                            (copy -11)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst?
                                                 -1
                                                 :where
                                                 (-19 -30))))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "related_states(mp!1)(tau2!2, tau2!1)")
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -14
                                                           :where
                                                           (-23 -34))))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -14)
                                                            (("1"
                                                              (split
                                                               -25)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "on_method_MVA")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "lookup_mthd_in_methods_class")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -19)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "program(mp!1)")
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_program_methods_only_in_one_class")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "wf_program_methods_only_in_one_class")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "get_monitored_class(mp!1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (use
                                                                                               "get_class_in_classes")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "get_monitored_class_in_classes")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -3
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "name_get_monitored_class")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case-replace
                                                                             "sMP2!1 = s_new!1"
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "legal_Program")
                                                              (("2"
                                                                (inst?
                                                                 -9)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -9)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "lookup_mthd_in_methods_class")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "ann_program"
                                                                       1)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "ann_class"
                                                                             1)
                                                                            (("2"
                                                                              (use
                                                                               "get_class_in_classes")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "md!1")
                                                              (("3"
                                                                (expand
                                                                 "wf_Method")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (expand*
                                                                     "wf_Body"
                                                                     "subset?"
                                                                     "member")
                                                                    (("3"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -21)
                                                        (("2"
                                                          (replace -32)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "related_states_preserved_by_raise")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "legal_Program")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   "lookup_mthd_in_methods_class")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "ann_program"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "ann_class"
                                                               1)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "get_class_in_classes")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (typepred "md!1")
                                                    (("3"
                                                      (expand
                                                       "wf_Method")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (expand*
                                                           "wf_Body"
                                                           "subset?"
                                                           "member")
                                                          (("3"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (use
                                                 "ann_program_preserves_wf_body")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3"
                                                (expand "id")
                                                (("3"
                                                  (use
                                                   "ann_program_preserves_wf_body")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -15)
                                            (("2"
                                              (replace -26)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (use
                                                             "related_states_preserved_by_raise")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "legal_Program")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_program" 2)
                                              (("2"
                                                (expand "ann_class" 2)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "get_class_in_classes")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "program(mp!1)")
                                        (("3"
                                          (expand "wf_Program")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (expand "wf_Classes")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use
                                                     "get_class_in_classes")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         "wf_Class")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (replace
                                                             -29
                                                             :dir
                                                             rl)
                                                            (("3"
                                                              (expand*
                                                               "wf_Body"
                                                               "subset?"
                                                               "member")
                                                              (("3"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (use
                                     "ann_program_preserves_wf_body")
                                    nil
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (expand "id")
                                    (("3"
                                      (use
                                       "ann_program_preserves_wf_body")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (member const-decl "bool" sets nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (wf_program_methods_only_in_one_class formula-decl nil
     WellFormedProgram nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   7900 7420 t shostak))
 (on_method_exit_normal_preserves_related_states_annotated_TCC1 0
  (on_method_exit_normal_preserves_related_states_annotated_TCC1-1 nil
   3401441474 3410852192
   ("" (skosimp*)
    (("" (expand "id")
      (("" (use "ann_program_preserves_wf_method") nil nil)) nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program_preserves_wf_method formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   1020 980 t nil))
 (on_method_exit_normal_preserves_related_states_annotated 0
  (on_method_exit_normal_preserves_related_states_annotated-2 nil
   3405946819 3410855746
   ("" (skosimp*)
    (("" (expand* "on_method_exit_normal_MP" "on_method_exit_normal")
      (("" (assert)
        (("" (skosimp*)
          (("" (use "related_states_implies_same_exception")
            (("" (assert)
              (("" (skosimp*)
                (("" (use "ann_method_post_set")
                  (("" (flatten)
                    (("" (rewrite "derive" -22)
                      (("" (assert)
                        (("" (flatten)
                          (("" (skosimp*)
                            (("" (replace -2 :hide? t)
                              ((""
                                (use "get_class_in_classes")
                                ((""
                                  (assert)
                                  ((""
                                    (copy -11)
                                    (("1"
                                      (apply
                                       (repeat
                                        (inst? -12 :where (-14 -25))))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -12)
                                          (("1"
                                            (case
                                             "cp(astate(tau1!2)) = halted")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "related_states"
                                                 -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "cp(astate(sMP2!1)) = halted")
                                                          (("1"
                                                            (case
                                                             "wf_state(mp!1)(sMP2!1)")
                                                            (("1"
                                                              (case
                                                               "wf_state(ann_program(mp!1))(sAP2!1)")
                                                              (("1"
                                                                (expand
                                                                 "derive"
                                                                 -35)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -35)
                                                                    (("1"
                                                                      (expand
                                                                       "check_assertion")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (expand
                                                                           "derive"
                                                                           -44)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -44)
                                                                                (("1"
                                                                                  (case
                                                                                   "up?(ex(pstate(tau2!1))) AND down(ex(pstate(tau2!1))) = JMLExc")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "derive"
                                                                                       -51)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -51)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -54)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "related_states")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "raise")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -47)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "raise")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "check_assertion")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (lemma
                                                                     "derive_yields_wf_state_AP")
                                                                    (("2"
                                                                      (copy
                                                                       -1)
                                                                      (("1"
                                                                        (copy
                                                                         -1)
                                                                        (("1"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           -45)
                                                                          (("1"
                                                                            (rewrite
                                                                             "ann_method_post")
                                                                            (("1"
                                                                              (inst?
                                                                               -2
                                                                               :where
                                                                               -47)
                                                                              (("1"
                                                                                (inst?
                                                                                 -3
                                                                                 :where
                                                                                 -40)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -48)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "wf_update_PState"
                                                                                                     ("p"
                                                                                                      "ann_program(mp!1)"))
                                                                                                    (assert)
                                                                                                    (skosimp*)
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (use
                                                                                                     "wf_state_raise")
                                                                                                    (assert)))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -44)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "wf_update_PState"
                                                                                                   ("p"
                                                                                                    "ann_program(mp!1)"))
                                                                                                  (assert)
                                                                                                  (skosimp*)
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (use
                                                                                                   "wf_state_raise")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "ann_program_preserves_wf_method")
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "wf_Method"
                                                                                     "method_pred")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -5)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                             ("b1"
                                                                                              "post_set(ann_method(mp!1)(md!1))(v(v!1))"
                                                                                              "b2"
                                                                                              "s2[Name](post_set(ann_method[CP, Name](mp!1)(md!1))(v(v!1)))"))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (use
                                                                                 "ann_program_preserves_wf_method")
                                                                                (("3"
                                                                                  (expand*
                                                                                   "wf_Method"
                                                                                   "method_pred")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -2
                                                                                       "v(v!1)")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "ann_method_post")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (typepred
                                                                             "ann_program(mp!1)")
                                                                            (("3"
                                                                              (expand
                                                                               "wf_Program")
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (expand
                                                                                   "program_pred")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "lookup_inv")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "id")
                                                                                          (("3"
                                                                                            (lift-if)
                                                                                            (("3"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -47)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -7
                                                                                                 "down(get_class(ann_program(mp!1))(a!1))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "get_class_in_classes")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "wf_Body")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "emptyset")
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "subterm")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "id")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "id")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "check_assertion")
                                                              (("2"
                                                                (lemma
                                                                 "derive_yields_wf_state_MP")
                                                                (("2"
                                                                  (copy
                                                                   -1)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -27)
                                                                      (("1"
                                                                        (inst?
                                                                         -2
                                                                         :where
                                                                         -30)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -31)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "wf_update_PState"
                                                                                           ("p"
                                                                                            "mp!1"))
                                                                                          (assert)
                                                                                          (skosimp*)
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (use
                                                                                           "wf_state_raise")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -27)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_update_PState"
                                                                                             ("p"
                                                                                              "mp!1"))
                                                                                            (assert)
                                                                                            (skosimp*)
                                                                                            (expand
                                                                                             "update_PState")
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -21)
                                                                                  (("2"
                                                                                    (use
                                                                                     "on_method_MVA_yields_wf_AState")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "wf_state")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_ghoststate")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "is_ghost")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "check_assertion")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (use
                                                                 "on_method_MVA_never_leaves_halted")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "derive_never_leaves_halted")
                                                                    (("2"
                                                                      (copy
                                                                       -1)
                                                                      (("2"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -27)
                                                                        (("2"
                                                                          (inst?
                                                                           -2
                                                                           :where
                                                                           -30)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -31)
                                                                                (("1"
                                                                                  (expand
                                                                                   "update_PState")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -27)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "up?(ex(pstate(tau!1)))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (typepred "mp!1")
                                                    (("1"
                                                      (expand
                                                       "wf_set_stmts")
                                                      (("1"
                                                        (expand
                                                         "program_method_pred")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -3)
                                                                  (("1"
                                                                    (expand
                                                                     "wf_set_stmts")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst?
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "no_exc")
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -2
                                                                               :where
                                                                               -21)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "related_states_implies_same_exception")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -16
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (expand
                                                                       "lookup_mthd")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "ann_method"
                                                 -27)
                                                (("2"
                                                  (use
                                                   "ann_event_does_not_throw_exception")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (use
                                                           "ann_event_preserves_MP_modeled"
                                                           ("sMP2"
                                                            "tau2!2"))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (auto-rewrite
                                                                 "id")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "lookup_inv")
                                                                    (("1"
                                                                      (use
                                                                       "get_class_equivalence")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "ann_class"
                                                                               -33)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -21
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -33
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "check_assertion")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (case
                                                                                           "up?(ex(pstate(tau1!1)))")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (rewrite
                                                                                             "derive"
                                                                                             -38)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "derive"
                                                                                                   -39)
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "derive"
                                                                                                       -40)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "derive"
                                                                                                           -41)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "derive"
                                                                                                             -41)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "derive"
                                                                                                                   -45)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "derive"
                                                                                                                     -45)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "check_for_exception_final")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "check_for_exception")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -51
                                                                                                                                 :hide?
                                                                                                                                 t)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -49
                                                                                                                                     :hide?
                                                                                                                                     t)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -48
                                                                                                                                         :hide?
                                                                                                                                         t)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -44
                                                                                                                                           :hide?
                                                                                                                                           t)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -42
                                                                                                                                               :hide?
                                                                                                                                               t)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -44
                                                                                                                                                 :hide?
                                                                                                                                                 t)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "halted")
                                                                                                                                                    (("2"
                                                                                                                                                      (use
                                                                                                                                                       "MP_modeled_lookup_correspondence"
                                                                                                                                                       ("q1"
                                                                                                                                                        "cp(astate(tau2!2))"
                                                                                                                                                        "sMP"
                                                                                                                                                        "tau2!2"))
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             :dir
                                                                                                                                                             rl
                                                                                                                                                             :hide?
                                                                                                                                                             t)
                                                                                                                                                            (("1"
                                                                                                                                                              (apply
                                                                                                                                                               (branch
                                                                                                                                                                (split
                                                                                                                                                                 -46)
                                                                                                                                                                ((then
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (assert)))))
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "related_states(mp!1)(tau2!2, tau!2)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (copy
                                                                                                                                                                   -9)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply
                                                                                                                                                                     (repeat
                                                                                                                                                                      (inst?
                                                                                                                                                                       -1
                                                                                                                                                                       :where
                                                                                                                                                                       (-3
                                                                                                                                                                        -27))))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "cp(astate(tau1!3)) = halted")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "related_states"
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "cp(astate(sMP2!1)) = halted")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "wf_state(mp!1)(sMP2!1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "wf_state(ann_program(mp!1))(sAP2!1)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "derive_after_raise"
                                                                                                                                                                                               ("sigma1"
                                                                                                                                                                                                "tau1!5"
                                                                                                                                                                                                "sigma2"
                                                                                                                                                                                                "tau1!6"))
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -62)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "related_states")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "update_PState")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "raise")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (propax)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "derive_yields_wf_state_AP")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 :where
                                                                                                                                                                                                 -60)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -61)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (split
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (apply
                                                                                                                                                                                                                 (then
                                                                                                                                                                                                                  (use
                                                                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                                                                   ("p"
                                                                                                                                                                                                                    "ann_program(mp!1)"))
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                                                  (use
                                                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                                                  (assert)))
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -56)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (apply
                                                                                                                                                                                                             (then
                                                                                                                                                                                                              (use
                                                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                                                               ("p"
                                                                                                                                                                                                                "ann_program(mp!1)"))
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                                              (use
                                                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                                                              (assert)))
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (use
                                                                                                                                                                                                   "ann_program_preserves_wf_method")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand*
                                                                                                                                                                                                     "wf_Method"
                                                                                                                                                                                                     "method_pred")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                         -2)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "derive_yields_wf_state_MP")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst?
                                                                                                                                                                                               -1
                                                                                                                                                                                               :where
                                                                                                                                                                                               -37)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -38)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (split
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (apply
                                                                                                                                                                                                               (then
                                                                                                                                                                                                                (use
                                                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                                                 ("p"
                                                                                                                                                                                                                  "mp!1"))
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                                                (use
                                                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                                                (assert)))
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -34)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (split
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (apply
                                                                                                                                                                                                               (then
                                                                                                                                                                                                                (use
                                                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                                                 ("p"
                                                                                                                                                                                                                  "mp!1"))
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                                                (use
                                                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                                                (assert)))
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "derive_never_leaves_halted")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1
                                                                                                                                                                                             :where
                                                                                                                                                                                             -36)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -37)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -33)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case
                                                                                                                                                                                 "related_states(mp!1)(tau3!1, tau2!1)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "ann_method_post")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (apply
                                                                                                                                                                                     (repeat
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -12
                                                                                                                                                                                       :where
                                                                                                                                                                                       (-54
                                                                                                                                                                                        -32))))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (split
                                                                                                                                                                                         -12)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "cp(astate(tau1!4)) = halted")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "related_states")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -47)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -68)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "update_PState"
                                                                                                                                                                                                             9
                                                                                                                                                                                                             3)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "update_PState"
                                                                                                                                                                                                               9
                                                                                                                                                                                                               3)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "update_PState"
                                                                                                                                                                                                                 9
                                                                                                                                                                                                                 3)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "raise"
                                                                                                                                                                                                                   9
                                                                                                                                                                                                                   3)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "raise"
                                                                                                                                                                                                                     9
                                                                                                                                                                                                                     3)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (split
                                                                                                                                                                                                                         9)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (apply
                                                                                                                                                                                                                             (then
                                                                                                                                                                                                                              (use
                                                                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                                                                               ("p"
                                                                                                                                                                                                                                "mp!1"))
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                                                              (use
                                                                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                                                                              (assert)))
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("3"
                                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("4"
                                                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                                                          (("4"
                                                                                                                                                                                                                            (apply
                                                                                                                                                                                                                             (then
                                                                                                                                                                                                                              (use
                                                                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                                                                               ("p"
                                                                                                                                                                                                                                "ann_program(mp!1)"))
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                                                              (use
                                                                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                                                                              (assert)))
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("5"
                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                          (("5"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("6"
                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                          (("6"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -56)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -34)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         10)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -2)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (lift-if)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (split
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (use
                                                                                                                                                                                                                     "related_states_preserved_by_raise")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "legal_Program")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "program_pred")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -16
                                                                                                                                                                                               "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   -16)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "method_pred")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -2
                                                                                                                                                                                                         "ann_method(mp!1)(md!1)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (split
                                                                                                                                                                                                             -2)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                 "v(v!1)")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                   "ann_method_post")
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "ann_class")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "ann_methods")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (inst?)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (use
                                                                                                                                                                                                                         "lookup_mthd_in_methods_class")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "ann_program")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst?)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("3"
                                                                                                                                                                                          (typepred
                                                                                                                                                                                           "md!1")
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "wf_Method")
                                                                                                                                                                                            (("3"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "method_pred")
                                                                                                                                                                                              (("3"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("3"
                                                                                                                                                                                                  (inst?
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("3"
                                                                                                                                                                                                    (expand*
                                                                                                                                                                                                     "wf_Body"
                                                                                                                                                                                                     "subset?"
                                                                                                                                                                                                     "member")
                                                                                                                                                                                                    (("3"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -51)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -29)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (case-replace
                                                                                                                                                                                       "v!6 = v!4")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (split
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (use
                                                                                                                                                                                                 "related_states_preserved_by_raise")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (split
                                                                                                                                                                                         -5)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (use
                                                                                                                                                                                             "related_states_implies_same_exception"
                                                                                                                                                                                             ("sMP"
                                                                                                                                                                                              "tau1!3"
                                                                                                                                                                                              "sAP"
                                                                                                                                                                                              "tau1!5"))
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 :dir
                                                                                                                                                                                                 rl)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "derive_bottom_iff_exception_step"
                                                                                                                                                                                                   ("p"
                                                                                                                                                                                                    "mp!1"))
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     :where
                                                                                                                                                                                                     -31)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -4)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -2)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (apply-extensionality
                                                                                                                                                                                                   :hide?
                                                                                                                                                                                                   t)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "legal_Program")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "program_pred")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -14
                                                                                                                                                                               "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -14)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "method_pred")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "ann_class")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "legal_Body_preserved_by_proper_subterm")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1
                                                                                                                                                                                             :where
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst?
                                                                                                                                                                                               -1
                                                                                                                                                                                               :where
                                                                                                                                                                                               -2)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "<<")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "ann_program")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst?)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "program(mp!1)")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (expand*
                                                                                                                                                                             "wf_Program"
                                                                                                                                                                             "program_pred")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (inst?)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -30
                                                                                                                                                                                       :dir
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (expand*
                                                                                                                                                                                         "wf_Body"
                                                                                                                                                                                         "subset?"
                                                                                                                                                                                         "member")
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "ann_program_preserves_wf_body")
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "related_states")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (split
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (use
                                                                                                                                                                         "on_method_MVA_yields_wf_AState")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -27)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "wf_state")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_ghoststate")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_ghost")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "derive_yields_wf_state_AP")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst?
                                                                                                                                                                           -1
                                                                                                                                                                           :where
                                                                                                                                                                           -42)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (use
                                                                                                                                                                             "ann_event_wf_Body")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand*
                                                                                                                                                                                 "subset?"
                                                                                                                                                                                 "member"
                                                                                                                                                                                 "filter_event")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (case
                                                                                                                                                                 "related_states(mp!1)(tau3!1, tau2!1)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "ann_method_post")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply
                                                                                                                                                                     (repeat
                                                                                                                                                                      (inst?
                                                                                                                                                                       -11
                                                                                                                                                                       :where
                                                                                                                                                                       (-31
                                                                                                                                                                        -53))))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         -11)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "cp(astate(tau1!4)) = halted")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "related_states")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -43)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -64)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "update_PState"
                                                                                                                                                                                             7
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "update_PState"
                                                                                                                                                                                               7
                                                                                                                                                                                               3)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "update_PState"
                                                                                                                                                                                                 7
                                                                                                                                                                                                 3)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "raise"
                                                                                                                                                                                                   7
                                                                                                                                                                                                   3)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "raise"
                                                                                                                                                                                                     7
                                                                                                                                                                                                     3)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       7)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (apply
                                                                                                                                                                                                           (then
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                                                             ("p"
                                                                                                                                                                                                              "mp!1"))
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "update_PState")
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                                                            (assert)))
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("3"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("4"
                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                        (("4"
                                                                                                                                                                                                          (apply
                                                                                                                                                                                                           (then
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                                                             ("p"
                                                                                                                                                                                                              "ann_program(mp!1)"))
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "update_PState")
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                                                            (assert)))
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("5"
                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                        (("5"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("6"
                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                        (("6"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -55)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -33)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (split
                                                                                                                                                                                         8)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -2)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lift-if)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (use
                                                                                                                                                                                                     "related_states_preserved_by_raise")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "legal_Program")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "program_pred")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -15
                                                                                                                                                                               "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -15)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "method_pred")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -2
                                                                                                                                                                                         "ann_method(mp!1)(md!1)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (flatten)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -2
                                                                                                                                                                                                 "v(v!1)")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                   "ann_method_post")
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "ann_class")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "ann_methods")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (inst?)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (use
                                                                                                                                                                                                         "lookup_mthd_in_methods_class")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "ann_program")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst?)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "md!1")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_Method")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (expand
                                                                                                                                                                               "method_pred")
                                                                                                                                                                              (("3"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (expand*
                                                                                                                                                                                     "wf_Body"
                                                                                                                                                                                     "subset?"
                                                                                                                                                                                     "member")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "cp(astate(tau3!1)) = halted")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -3)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -51)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "related_states")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState"
                                                                                                                                                                               1
                                                                                                                                                                               3)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState"
                                                                                                                                                                                 1
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "raise"
                                                                                                                                                                                   1
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "raise"
                                                                                                                                                                                     1
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "derive_yields_wf_state_MP")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1
                                                                                                                                                                                             :where
                                                                                                                                                                                             -33)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -34)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (apply
                                                                                                                                                                                                             (then
                                                                                                                                                                                                              (use
                                                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                                                               ("p"
                                                                                                                                                                                                                "mp!1"))
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                                              (use
                                                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                                                              (assert)))
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -29)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (use
                                                                                                                                                                                                     "on_method_MVA_yields_wf_AState")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "wf_state")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "wf_ghoststate")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "is_ghost")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "derive_yields_wf_state_AP")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1
                                                                                                                                                                                             :where
                                                                                                                                                                                             -45)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (use
                                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                                 ("p"
                                                                                                                                                                                                  "ann_program(mp!1)"))
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (use
                                                                                                                                                                                                         "wf_state_raise")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "ann_event_wf_Body")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "subset?")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "member")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "filter_event")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "derive_never_leaves_halted")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?
                                                                                                                                                                       -1
                                                                                                                                                                       :where
                                                                                                                                                                       -28)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -29)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lift-if)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (typepred
                                                                                                                                                             "mva(mp!1)")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "complete")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (use
                                                                                                                                                             "on_method_MVA_yields_wf_AState")
                                                                                                                                                            (("3"
                                                                                                                                                              (assert)
                                                                                                                                                              (("3"
                                                                                                                                                                (expand
                                                                                                                                                                 "related_states")
                                                                                                                                                                (("3"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_AState")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("4"
                                                                                                                                                            (lemma
                                                                                                                                                             "derive_yields_wf_state_AP")
                                                                                                                                                            (("4"
                                                                                                                                                              (inst?
                                                                                                                                                               -1
                                                                                                                                                               :where
                                                                                                                                                               -36)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "related_states")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "ann_event_wf_Body")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand*
                                                                                                                                                                     "subset?"
                                                                                                                                                                     "member"
                                                                                                                                                                     "filter_event")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -18)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (case-replace
                                                                     "val(v(v!1)) = v!1")
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (case-replace
                                                                 "get_monitored_class(mp!1) = down(get_class(program(mp!1))(a!1))")
                                                                (("1"
                                                                  (use
                                                                   "lookup_mthd_in_methods_class")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "program(mp!1)")
                                                                  (("2"
                                                                    (expand*
                                                                     "wf_Program"
                                                                     "wf_program_has_unique_class_names_def")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (rewrite
                                                                               "name_get_monitored_class")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               "get_monitored_class_in_classes")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "legal_Program")
                                            (("2"
                                              (expand "program_pred")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -6
                                                   "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -6)
                                                      (("1"
                                                        (expand
                                                         "method_pred")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "ann_method(mp!1)(md!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "v(v!1)")
                                                                    (("1"
                                                                      (use
                                                                       "ann_method_post_set")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (lemma
                                                                             "legal_Body_preserved_by_proper_subterm")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "ann_program(mp!1)"
                                                                               "post_set(ann_method(mp!1)(md!1))(v(v!1))"
                                                                               "s1(post_set(ann_method(mp!1)(md!1))(v(v!1)))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "<<")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "ann_class")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "ann_methods")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "lookup_mthd_in_methods_class")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "ann_program")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "md!1")
                                            (("3"
                                              (expand "wf_Method")
                                              (("3"
                                                (expand "method_pred")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (inst? -5)
                                                    (("3"
                                                      (expand*
                                                       "wf_Body"
                                                       "subset?"
                                                       "member")
                                                      (("3"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (use
                                         "ann_program_preserves_wf_body")
                                        (("2"
                                          (use
                                           "ann_program_preserves_wf_body")
                                          (("2"
                                            (expand "id")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (related_states const-decl "boolean" Equivalence nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (TT adt-constructor-decl "(TT?)" Body_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (ann_method_post formula-decl nil AnnotateMethod nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (wf_state_raise formula-decl nil State nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (ann_program_preserves_wf_method formula-decl nil
     AnnotateProgramProperties nil)
    (m3!1 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (v!1 skolem-const-decl "ValOrExcpt[Name]"
     MethodCallsPreserveRelatedState nil)
    (md!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (m2!2 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (inv!1 skolem-const-decl "(wf_BoolExpr(id(ann_program(mp!1))))"
     MethodCallsPreserveRelatedState nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     MethodCallsPreserveRelatedState nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (raise const-decl "PState" State nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (m3!2 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (m2!3 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (ValOrExcpt_val_extensionality formula-decl nil ValOrExcpt_adt nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (derive_after_raise formula-decl nil SemanticsProofs nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (member const-decl "bool" sets nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (legal_Body_preserved_by_proper_subterm formula-decl nil
     LegalProgramRestriction nil)
    (ann_event_wf_Body formula-decl nil AnnotateProgramProperties nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (MP_modeled_lookup_correspondence formula-decl nil
     RelatedStatesProperties nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (ann_event_preserves_MP_modeled formula-decl nil
     AnnEventPreservesMPModeled nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (ann_event_does_not_throw_exception formula-decl nil
     AnnEventPreservesMPModeled nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (derive def-decl "bool" Semantics nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (ann_method_post_set formula-decl nil AnnotateMethod nil)
    (id_preserves application-judgement "S" identity_props nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil))
   178994 65420 t nil)
  (on_method_exit_normal_preserves_related_states_annotated-1 nil
   3401709520 3405080148
   ("" (skosimp*)
    (("" (expand* "on_method_exit_normal_MP" "on_method_exit_normal")
      (("" (assert)
        (("" (skosimp*)
          (("" (use "related_states_implies_same_exception")
            (("" (assert)
              (("" (skosimp*)
                (("" (use "ann_method_post_set")
                  (("" (flatten)
                    (("" (rewrite "derive" -20)
                      (("" (assert)
                        (("" (flatten)
                          (("" (skosimp*)
                            (("" (replace -2 :hide? t)
                              ((""
                                (use "get_class_in_classes")
                                ((""
                                  (assert)
                                  ((""
                                    (copy -11)
                                    (("1"
                                      (apply
                                       (repeat
                                        (inst? -12 :where (-14 -23))))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -12)
                                          (("1"
                                            (case
                                             "cp(astate(tau1!2)) = halted")
                                            (("1"
                                              (expand "related_states")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "derive"
                                                     -30)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "up?(ex(pstate(tau!1)))")
                                              (("1"
                                                (rewrite "derive" -25)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "ann_method"
                                                 -24)
                                                (("2"
                                                  (use
                                                   "ann_event_preserves_MP_modeled"
                                                   ("sMP2" "tau2!2"))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (auto-rewrite
                                                         "id")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "lookup_inv")
                                                            (("1"
                                                              (use
                                                               "get_class_equivalence")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_class"
                                                                       -27)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -18
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -27
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (expand
                                                                               "check_assertion")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (case
                                                                                   "up?(ex(pstate(tau1!1)))")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "derive_bottom_iff_exception_step"
                                                                                     ("p"
                                                                                      "ann_program(mp!1)"))
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1
                                                                                       :where
                                                                                       -32)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "derive"
                                                                                     -32)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "derive"
                                                                                           -33)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "derive"
                                                                                               -34)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "derive"
                                                                                                   -35)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "derive"
                                                                                                     -35)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "derive"
                                                                                                           -39)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "derive"
                                                                                                             -39)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -36
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -39
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "halted")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "MP_modeled_lookup_correspondence")
                                                                                                                        (("2"
                                                                                                                          (inst?
                                                                                                                           -1
                                                                                                                           :where
                                                                                                                           (-3
                                                                                                                            -38
                                                                                                                            -41))
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "cp(astate(tau2!2))"
                                                                                                                             "tau2!2")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "check_for_exception_final")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "check_for_exception")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -44
                                                                                                                                             :hide?
                                                                                                                                             t)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -42
                                                                                                                                               :hide?
                                                                                                                                               t)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -38
                                                                                                                                                 :hide?
                                                                                                                                                 t)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -40
                                                                                                                                                   :hide?
                                                                                                                                                   t)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (branch
                                                                                                                                                          (split
                                                                                                                                                           -41)
                                                                                                                                                          ((then
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)))))
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "related_states(mp!1)(tau2!2, tau!2)")
                                                                                                                                                          (("1"
                                                                                                                                                            (copy
                                                                                                                                                             -7)
                                                                                                                                                            (("1"
                                                                                                                                                              (apply
                                                                                                                                                               (repeat
                                                                                                                                                                (inst?
                                                                                                                                                                 -1
                                                                                                                                                                 :where
                                                                                                                                                                 (-3
                                                                                                                                                                  -24))))
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "related_states(mp!1)(tau3!1, tau2!1)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "ann_method_post")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (repeat
                                                                                                                                                                            (inst?
                                                                                                                                                                             -10
                                                                                                                                                                             :where
                                                                                                                                                                             (-48
                                                                                                                                                                              -29))))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -10)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -50)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -31)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (split
                                                                                                                                                                                             8)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (use
                                                                                                                                                                                                     "related_states_preserved_by_raise")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "legal_Program")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -14
                                                                                                                                                                                   "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (split
                                                                                                                                                                                       -14)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -2
                                                                                                                                                                                           "ann_method(mp!1)(md!1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (split
                                                                                                                                                                                               -2)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                   "ann_method_post")
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "ann_class")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "ann_methods")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst?)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (use
                                                                                                                                                                                                           "lookup_mthd_in_methods_class")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "ann_program")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "md!1")
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "wf_Method")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (expand*
                                                                                                                                                                                       "wf_Body"
                                                                                                                                                                                       "subset?"
                                                                                                                                                                                       "member")
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -45)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -26)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "cp(astate(tau1!3)) = halted")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "related_states"
                                                                                                                                                                               (1
                                                                                                                                                                                -2))
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "update_PState"
                                                                                                                                                                                         1
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "update_PState"
                                                                                                                                                                                           1
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (split
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (use
                                                                                                                                                                                                     "wf_update_PState"
                                                                                                                                                                                                     ("p"
                                                                                                                                                                                                      "mp!1"))
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "update_PState")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (case-replace
                                                                                                                                                                               "v!1 = v!3")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lift-if)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (split
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (split
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (use
                                                                                                                                                                                             "related_states_preserved_by_raise")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -5)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "related_states_implies_same_exception"
                                                                                                                                                                                     ("sMP"
                                                                                                                                                                                      "tau1!3"
                                                                                                                                                                                      "sAP"
                                                                                                                                                                                      "tau1!5"))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1
                                                                                                                                                                                         :dir
                                                                                                                                                                                         rl)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "derive_bottom_iff_exception_step"
                                                                                                                                                                                           ("p"
                                                                                                                                                                                            "mp!1"))
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1
                                                                                                                                                                                             :where
                                                                                                                                                                                             -28)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -4)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (apply-extensionality
                                                                                                                                                                                           :hide?
                                                                                                                                                                                           t)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "legal_Program")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -12
                                                                                                                                                                       "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -12)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "ann_class")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "legal_Body_preserved_by_proper_subterm")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1
                                                                                                                                                                                   :where
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst?
                                                                                                                                                                                     -1
                                                                                                                                                                                     :where
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "<<")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "ann_program")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "program(mp!1)")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand*
                                                                                                                                                                       "wf_Program"
                                                                                                                                                                       "wf_Classes")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (expand
                                                                                                                                                                               "wf_Class")
                                                                                                                                                                              (("3"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -28
                                                                                                                                                                                   :dir
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (expand*
                                                                                                                                                                                     "wf_Body"
                                                                                                                                                                                     "subset?"
                                                                                                                                                                                     "member")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (use
                                                                                                                                                                 "ann_program_preserves_wf_body")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("3"
                                                                                                                                                                (use
                                                                                                                                                                 "ann_program_preserves_wf_body")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (expand
                                                                                                                                                             "related_states")
                                                                                                                                                            (("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (split
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (use
                                                                                                                                                                   "on_method_MVA_yields_wf_AState")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -24)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "derive_yields_wf_state_AP")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1
                                                                                                                                                                     :where
                                                                                                                                                                     -37)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "ann_event_wf_Body")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand*
                                                                                                                                                                           "subset?"
                                                                                                                                                                           "member"
                                                                                                                                                                           "filter_event")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (case
                                                                                                                                                           "related_states(mp!1)(tau3!1, tau2!1)")
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             "ann_method_post")
                                                                                                                                                            (("1"
                                                                                                                                                              (apply
                                                                                                                                                               (repeat
                                                                                                                                                                (inst?
                                                                                                                                                                 -10
                                                                                                                                                                 :where
                                                                                                                                                                 (-29
                                                                                                                                                                  -48))))
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   -10)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -50)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -31)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lift-if)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               6)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (use
                                                                                                                                                                                       "related_states_preserved_by_raise")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "legal_Program")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -14
                                                                                                                                                                       "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -14)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -2
                                                                                                                                                                               "ann_method(mp!1)(md!1)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "ann_method_post")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "ann_class")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "ann_methods")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "lookup_mthd_in_methods_class")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "ann_program")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "md!1")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_Method")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (expand*
                                                                                                                                                                           "wf_Body"
                                                                                                                                                                           "subset?"
                                                                                                                                                                           "member")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (case
                                                                                                                                                             "cp(astate(tau3!1)) = halted")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -3)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -46)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "related_states")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "update_PState"
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "update_PState"
                                                                                                                                                                           1
                                                                                                                                                                           2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "raise"
                                                                                                                                                                             1
                                                                                                                                                                             2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "raise"
                                                                                                                                                                               1
                                                                                                                                                                               2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "wf_state(mp!1)(tau1!3)")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -28)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (split
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (split
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (use
                                                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                                                   ("p"
                                                                                                                                                                                                    "mp!1"))
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "update_PState")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (use
                                                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (propax)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "derive_yields_wf_state_MP")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1
                                                                                                                                                                                       :where
                                                                                                                                                                                       -27)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -23)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "on_method_MVA_yields_wf_AState")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "wf_state")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "wf_ghoststate")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "is_ghost")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "wf_state(ann_program(mp!1))(tau1!5)")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (use
                                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                                       ("p"
                                                                                                                                                                                        "ann_program(mp!1)"))
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "update_PState")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -4)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "derive_yields_wf_state_AP")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1
                                                                                                                                                                                             :where
                                                                                                                                                                                             -37)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "ann_event_wf_Body")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand*
                                                                                                                                                                                                   "subset?"
                                                                                                                                                                                                   "member"
                                                                                                                                                                                                   "filter_event")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "derive_never_leaves_halted")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?
                                                                                                                                                                 -1
                                                                                                                                                                 :where
                                                                                                                                                                 -26)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -27)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (typepred
                                                                                                                                   "mva(mp!1)")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "complete")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (use
                                                                                                                                   "on_method_MVA_yields_wf_AState")
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "related_states")
                                                                                                                                      (("3"
                                                                                                                                        (flatten)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          (("3"
                                                                                                                                            (expand
                                                                                                                                             "wf_AState")
                                                                                                                                            (("3"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("4"
                                                                                                                                  (lemma
                                                                                                                                   "derive_yields_wf_state_AP")
                                                                                                                                  (("4"
                                                                                                                                    (inst?
                                                                                                                                     -1
                                                                                                                                     :where
                                                                                                                                     -31)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "related_states")
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (use
                                                                                                                                       "ann_event_wf_Body")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand*
                                                                                                                                           "subset?"
                                                                                                                                           "member"
                                                                                                                                           "filter_event")
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -15)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (case-replace
                                                         "get_monitored_class(mp!1) = down(get_class(program(mp!1))(a!1))")
                                                        (("1"
                                                          (use
                                                           "lookup_mthd_in_methods_class")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "program(mp!1)")
                                                          (("2"
                                                            (expand*
                                                             "wf_Program"
                                                             "wf_program_has_unique_class_names_def")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (rewrite
                                                                       "name_get_monitored_class")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "get_monitored_class_in_classes")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "legal_Program")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -6
                                                 "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split -6)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "ann_method(mp!1)(md!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (use
                                                                 "ann_method_post_set")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "legal_Body_preserved_by_proper_subterm")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "ann_program(mp!1)"
                                                                         "post_set(ann_method(mp!1)(md!1))"
                                                                         "s1(post_set(ann_method(mp!1)(md!1)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "<<")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "ann_class")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "ann_methods")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "lookup_mthd_in_methods_class")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "ann_program")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "md!1")
                                            (("3"
                                              (expand "wf_Method")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand*
                                                   "wf_Body"
                                                   "subset?"
                                                   "member")
                                                  (("3"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (use
                                         "ann_program_preserves_wf_body")
                                        nil
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (use
                                         "ann_program_preserves_wf_body")
                                        (("3"
                                          (expand "id")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (id_preserves application-judgement "S" identity_props nil)
    (ann_method_post_set formula-decl nil AnnotateMethod nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (derive def-decl "bool" Semantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (ann_event_preserves_MP_modeled formula-decl nil
     AnnEventPreservesMPModeled nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (member const-decl "bool" sets nil)
    (ann_method_post formula-decl nil AnnotateMethod nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (legal_Body_preserved_by_proper_subterm formula-decl nil
     LegalProgramRestriction nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (ann_event_wf_Body formula-decl nil AnnotateProgramProperties nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (MP_modeled_lookup_correspondence formula-decl nil
     RelatedStatesProperties nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (halted const-decl "CP" MVA nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil))
   29940 24370 t shostak))
 (on_method_exit_normal_preserves_related_states_halted_reached 0
  (on_method_exit_normal_preserves_related_states_halted_reached-1 nil
   3404476019 3410852266
   ("" (skosimp*)
    (("" (expand* "on_method_exit_normal" "on_method_exit_normal_MP")
      ((""
        (apply (branch (split -2)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (use "derive_never_leaves_halted")
                (("" (assert)
                  (("" (hide -4)
                    (("" (use "derive_never_leaves_halted")
                      (("" (assert)
                        (("" (hide -9)
                          (("" (use "derive_never_leaves_halted")
                            (("" (assert)
                              ((""
                                (replace -13 2)
                                ((""
                                  (replace -10 -1)
                                  ((""
                                    (lift-if)
                                    ((""
                                      (expand "update_PState")
                                      ((""
                                        (assert)
                                        ((""
                                          (replace -5)
                                          ((""
                                            (assert)
                                            ((""
                                              (use
                                               "on_method_MVA_never_leaves_halted")
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1892 1740 t shostak))
 (on_method_exit_normal_preserves_related_states_not_annotated_TCC1 0
  (on_method_exit_normal_preserves_related_states_not_annotated_TCC1-5
   nil 3410501060 3410852269
   (";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
    (skosimp*)
    ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
      (expand "id")
      ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
        (typepred "md!1")
        ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
          (expand "wf_Method")
          ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
            (expand "method_pred")
            ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
              (expand "wf_Body")
              ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                (rewrite "ann_program_ext_declared_var_names")
                ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                  (auto-rewrite "union" "member")
                  ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                    (assert)
                    ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                      (flatten)
                      ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                        (rewrite "ann_program_add_ghost_var_decls")
                        ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                          (rewrite "var_names_union")
                          ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                            (assert)
                            ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                              (split 4)
                              (("1"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil)))))))
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -4)
                                      (("2" (assert) nil)))))))))
                               ("2"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -3)
                                      (("1" (assert) nil)))))))
                                 ("2"
                                  (inst? -4)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -5)
                                      (("2" (assert) nil)))))))))
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst? -4)
                                  (("3" (assert) nil)))))
                               ("4"
                                (skosimp*)
                                (("4"
                                  (inst? -6)
                                  (("4" (assert) nil)))))
                               ("5"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -6)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -6)
                                      (("1" (assert) nil)))))))
                                 ("2"
                                  (inst? -7)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -8)
                                      (("2" (assert) nil)))))))))
                               ("6"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -7)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -7)
                                      (("1" (assert) nil)))))))
                                 ("2"
                                  (inst? -8)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -9)
                                      (("2" (assert) nil)))))))))
                               ("7"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -8)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -8)
                                      (("1" (assert) nil)))))))
                                 ("2"
                                  (inst? -9)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -10)
                                      (("2" (assert) nil)))))))))
                               ("8"
                                (skosimp*)
                                (("8"
                                  (inst? -9)
                                  (("8" (assert) nil)))))
                               ("9"
                                (skosimp*)
                                (("9"
                                  (inst? -11)
                                  (("9"
                                    (assert)
                                    nil))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   2854 2590 nil nil)
  (on_method_exit_normal_preserves_related_states_not_annotated_TCC1-4
   nil 3405945624 3410500551
   (";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
    (skosimp*)
    ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
      (expand "id")
      ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
        (typepred "md!1")
        ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
          (expand "wf_Method")
          ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
            (expand "method_pred")
            ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
              (expand "wf_Body")
              ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                (rewrite "ann_program_ext_declared_var_names")
                ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                  (auto-rewrite "union" "member")
                  ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                    (assert)
                    ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                      (flatten)
                      ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                        (rewrite "ann_program_add_ghost_var_decls")
                        ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                          (rewrite "var_names_union")
                          ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                            (assert)
                            ((";;; Proof on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3 for formula MethodCallsPreserveRelatedState.on_method_exit_normal_preserves_related_states_not_annotated_TCC1"
                              (split 4)
                              (("1"
                                (skosimp*)
                                (("1" (inst?) (("1" (assert) nil)))))
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst? -4)
                                  (("2" (assert) nil)))))
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst? -4)
                                  (("3" (assert) nil)))))
                               ("4"
                                (skosimp*)
                                (("4"
                                  (inst? -6)
                                  (("4" (assert) nil)))))
                               ("5"
                                (skosimp*)
                                (("5"
                                  (inst? -6)
                                  (("5" (assert) nil)))))
                               ("6"
                                (skosimp*)
                                (("6"
                                  (inst? -8)
                                  (("6" (assert) nil)))))
                               ("7"
                                (skosimp*)
                                (("7"
                                  (inst? -8)
                                  (("7" (assert) nil)))))
                               ("8"
                                (skosimp*)
                                (("8"
                                  (inst? -10)
                                  (("8" (assert) nil)))))
                               ("9"
                                (skosimp*)
                                (("9"
                                  (inst? -10)
                                  (("9" (assert) nil)))))
                               ("10"
                                (skosimp*)
                                (("10"
                                  (inst? -12)
                                  (("10" (assert) nil)))))
                               ("11"
                                (skosimp*)
                                (("11"
                                  (inst? -12)
                                  (("11" (assert) nil)))))
                               ("12"
                                (skosimp*)
                                (("12"
                                  (inst? -14)
                                  (("12" (assert) nil)))))
                               ("13"
                                (skosimp*)
                                (("13"
                                  (inst? -14)
                                  (("13" (assert) nil)))))
                               ("14"
                                (skosimp*)
                                (("14"
                                  (inst? -16)
                                  (("14"
                                    (assert)
                                    nil))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unfinished
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil))
   2995 2810 nil nil)
  (on_method_exit_normal_preserves_related_states_not_annotated_TCC1-3
   nil 3404459050 3405080156
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "md!1")
        (("" (expand "wf_Method")
          (("" (expand "wf_Body")
            (("" (rewrite "ann_program_ext_declared_var_names")
              (("" (auto-rewrite "union" "member")
                (("" (assert)
                  (("" (flatten)
                    (("" (rewrite "ann_program_add_ghost_var_decls")
                      (("" (rewrite "var_names_union")
                        (("" (assert)
                          (("" (split 4)
                            (("1" (skosimp*)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst? -4)
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (skosimp*)
                              (("3"
                                (inst? -4)
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (skosimp*)
                              (("4"
                                (inst? -6)
                                (("4" (assert) nil nil))
                                nil))
                              nil)
                             ("5" (skosimp*)
                              (("5"
                                (inst? -6)
                                (("5" (assert) nil nil))
                                nil))
                              nil)
                             ("6" (skosimp*)
                              (("6"
                                (inst? -8)
                                (("6" (assert) nil nil))
                                nil))
                              nil)
                             ("7" (skosimp*)
                              (("7"
                                (inst? -8)
                                (("7" (assert) nil nil))
                                nil))
                              nil)
                             ("8" (skosimp*)
                              (("8"
                                (inst? -10)
                                (("8" (assert) nil nil))
                                nil))
                              nil)
                             ("9" (skosimp*)
                              (("9"
                                (inst? -10)
                                (("9" (assert) nil nil))
                                nil))
                              nil)
                             ("10" (skosimp*)
                              (("10"
                                (inst? -12)
                                (("10" (assert) nil nil))
                                nil))
                              nil)
                             ("11" (skosimp*)
                              (("11"
                                (inst? -12)
                                (("11" (assert) nil nil))
                                nil))
                              nil)
                             ("12" (skosimp*)
                              (("12"
                                (inst? -14)
                                (("12" (assert) nil nil))
                                nil))
                              nil)
                             ("13" (skosimp*)
                              (("13"
                                (inst? -14)
                                (("13" (assert) nil nil))
                                nil))
                              nil)
                             ("14" (skosimp*)
                              (("14"
                                (inst? -16)
                                (("14" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((id const-decl "(bijective?[T, T])" identity nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (Body type-decl nil Body_adt nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil))
   1551 1410 t nil)
  (on_method_exit_normal_preserves_related_states_not_annotated_TCC1-2
   nil 3401709484 3404458646
   (";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
    (skosimp*)
    ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
      (expand "id")
      ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
        (typepred "md!1")
        ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
          (expand "wf_Method")
          ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
            (expand "wf_Body")
            ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
              (rewrite "ann_program_ext_declared_var_names")
              ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                (auto-rewrite "union" "member")
                ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                  (assert)
                  ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                    (flatten)
                    ((";;; Proof on_method_entry_preserves_related_states_not_annotated_TCC2-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated_TCC2"
                      (split 3)
                      (("1" (skosimp*)
                        (("1" (inst?) (("1" (assert) nil)))))
                       ("2" (skosimp*)
                        (("2" (inst? -3) (("2" (assert) nil)))))
                       ("3" (skosimp*)
                        (("3" (inst? -4) (("3" (assert) nil)))))
                       ("4" (skosimp*)
                        (("4" (inst? -5) (("4" (assert) nil)))))
                       ("5" (skosimp*)
                        (("5" (inst? -6) (("5" (assert) nil)))))
                       ("6" (skosimp*)
                        (("6" (inst? -7) (("6" (assert) nil)))))
                       ("7" (skosimp*)
                        (("7" (inst? -8)
                          (("7" (assert) nil))))))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 1271 1220 nil nil)
  (on_method_exit_normal_preserves_related_states_not_annotated_TCC1-1
   nil 3401441474 3401709377
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "md!1")
        (("" (expand "wf_Method")
          (("" (expand "wf_Body")
            (("" (rewrite "ann_program_ext_declared_var_names")
              (("" (auto-rewrite "union" "member")
                (("" (assert)
                  (("" (flatten)
                    (("" (split 3)
                      (("1" (skosimp*)
                        (("1" (assert)
                          (("1" (inst? -2) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst? -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (skosimp*)
                        (("3" (inst? -4) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (skosimp*)
                        (("4" (inst? -5) (("4" (assert) nil nil)) nil))
                        nil)
                       ("5" (skosimp*)
                        (("5" (inst? -6) (("5" (assert) nil nil)) nil))
                        nil)
                       ("6" (skosimp*)
                        (("6" (inst? -7) (("6" (assert) nil nil)) nil))
                        nil)
                       ("7" (skosimp*)
                        (("7" (inst? -8) (("7" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   6027 147 t nil))
 (on_method_exit_normal_preserves_related_states_not_annotated 0
  (on_method_exit_normal_preserves_related_states_not_annotated-2 nil
   3405947034 3410852300
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      (("" (expand "on_method_exit_normal")
        ((""
          (apply (then (use "related_states_implies_same_exception")
                  (assert) (replace -1)))
          (("" (skosimp*)
            (("" (expand "check_assertion")
              (("" (flatten)
                (("" (expand "lookup_inv")
                  (("" (expand "id")
                    (("" (use "get_class_equivalence")
                      (("" (assert)
                        (("" (replace -1)
                          (("" (replace -14 :dir rl)
                            (("" (replace -24)
                              ((""
                                (skosimp*)
                                ((""
                                  (copy -8)
                                  (("1"
                                    (apply
                                     (repeat
                                      (inst? -1 :where (-12 -25))))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (case
                                           "cp(astate(tau1!1)) = halted")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (use
                                               "on_method_MVA_never_leaves_halted")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "related_states"
                                                   -3)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "wf_state(mp!1)(tau2!1)")
                                                        (("1"
                                                          (lemma
                                                           "derive_never_leaves_halted")
                                                          (("1"
                                                            (copy -1)
                                                            (("1"
                                                              (lemma
                                                               "derive_yields_wf_state_MP")
                                                              (("1"
                                                                (copy
                                                                 -1)
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   -28)
                                                                  (("1"
                                                                    (inst?
                                                                     -3
                                                                     :where
                                                                     -28)
                                                                    (("1"
                                                                      (inst?
                                                                       -2
                                                                       :where
                                                                       -31)
                                                                      (("1"
                                                                        (inst?
                                                                         -4
                                                                         :where
                                                                         -31)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "cp(astate(sMP2!1)) = halted")
                                                                            (("1"
                                                                              (case
                                                                               "wf_state(mp!1)(sMP2!1)")
                                                                              (("1"
                                                                                (lemma
                                                                                 "derive_yields_wf_state_AP")
                                                                                (("1"
                                                                                  (copy
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1
                                                                                     :where
                                                                                     -44)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -2
                                                                                       :where
                                                                                       -47)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "derive"
                                                                                           -44)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "up?(ex(pstate(tau1!5))) AND down(ex(pstate(tau1!5))) = JMLExc")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "derive_after_raise"
                                                                                                     ("sigma1"
                                                                                                      "tau1!5"
                                                                                                      "sigma2"
                                                                                                      "tau1!6"))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "related_states")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -53)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState"
                                                                                                                   4
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_PState"
                                                                                                                     4
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "raise"
                                                                                                                       4
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "raise"
                                                                                                                         4
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -47)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -50)
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"
                                                                                                                                "s1"
                                                                                                                                "update_PState(tau1!5, raise(JMLExc))"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "wf_state(ann_program(mp!1))(update_PState(tau1!5, raise(JMLExc)))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "update_PState"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "wf_state_raise")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (apply
                                                                                                                                     (then
                                                                                                                                      (use
                                                                                                                                       "wf_update_PState"
                                                                                                                                       ("p"
                                                                                                                                        "ann_program(mp!1)"))
                                                                                                                                      (assert)
                                                                                                                                      (skosimp*)
                                                                                                                                      (expand
                                                                                                                                       "update_PState")
                                                                                                                                      (use
                                                                                                                                       "wf_state_raise")
                                                                                                                                      (assert)))
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "md!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_Method")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "method_pred")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   "wf_Body"
                                                                                                   "subset?"
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (auto-rewrite
                                                                                                     "union"
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "ann_program_ext_declared_var_names")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "ann_program_add_ghost_var_decls")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "var_names_union")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (inst?
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "program(mp!1)")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "wf_Program")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "program_pred")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "get_class_in_classes")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -34)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "wf_Body")
                                                                                                          (("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (auto-rewrite
                                                                                                               "union"
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "ann_program_ext_declared_var_names")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -7)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "ann_program_add_ghost_var_decls")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "var_names_union")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst?
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "id")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split
                                                                                 -3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -33)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_update_PState"
                                                                                               ("p"
                                                                                                "mp!1"))
                                                                                              (assert)
                                                                                              (skosimp*)
                                                                                              (expand
                                                                                               "update_PState")
                                                                                              (use
                                                                                               "wf_state_raise")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -29)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_update_PState"
                                                                                               ("p"
                                                                                                "mp!1"))
                                                                                              (assert)
                                                                                              (skosimp*)
                                                                                              (expand
                                                                                               "update_PState")
                                                                                              (use
                                                                                               "wf_state_raise")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -32)
                                                                              (("2"
                                                                                (expand
                                                                                 "update_PState")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -27)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -20)
                                                          (("2"
                                                            (use
                                                             "on_method_MVA_yields_wf_AState")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_state")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "wf_ghoststate")
                                                                      (("2"
                                                                        (expand
                                                                         "is_ghost")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "on_method_MVA")
                                            (("2"
                                              (lift-if -14)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -14)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (use
                                                       "lookup_mthd_in_methods_class")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "program(mp!1)")
                                                          (("1"
                                                            (use
                                                             "wf_program_methods_only_in_one_class")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "wf_program_methods_only_in_one_class")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "get_monitored_class(mp!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         "get_class_in_classes")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "get_monitored_class_in_classes")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (use
                                                                                   "name_get_monitored_class")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case-replace
                                                         "tau2!1 = tau1!1"
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (copy -11)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -1
                                                               :where
                                                               (-19
                                                                -31))))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "cp(astate(tau1!3)) = halted")
                                                                  (("1"
                                                                    (lemma
                                                                     "derive_never_leaves_halted")
                                                                    (("1"
                                                                      (lemma
                                                                       "derive_yields_wf_state_MP")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -25)
                                                                        (("1"
                                                                          (inst?
                                                                           -2
                                                                           :where
                                                                           -25)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "derive_yields_wf_state_AP")
                                                                              (("1"
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 -38)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "cp(astate(sMP2!1)) = halted")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "related_states"
                                                                                         -6)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "up?(ex(pstate(tau2!2))) AND down(ex(pstate(tau2!2))) = JMLExc")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "derive"
                                                                                                   -44)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "related_states")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               6)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -33)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -5)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "mp!1"))
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -29)
                                                                                                                    (("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (use
                                                                                                                                 "wf_update_PState"
                                                                                                                                 ("p"
                                                                                                                                  "mp!1"))
                                                                                                                                (assert)
                                                                                                                                (skosimp*)
                                                                                                                                (expand
                                                                                                                                 "update_PState")
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                (assert)))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (split
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -47)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (then
                                                                                                                        (use
                                                                                                                         "wf_update_PState"
                                                                                                                         ("p"
                                                                                                                          "ann_program(mp!1)"))
                                                                                                                        (assert)
                                                                                                                        (skosimp*)
                                                                                                                        (expand
                                                                                                                         "update_PState")
                                                                                                                        (use
                                                                                                                         "wf_state_raise")
                                                                                                                        (assert)))
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -41)
                                                                                                                    (("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (use
                                                                                                                                 "wf_update_PState"
                                                                                                                                 ("p"
                                                                                                                                  "ann_program(mp!1)"))
                                                                                                                                (assert)
                                                                                                                                (skosimp*)
                                                                                                                                (expand
                                                                                                                                 "update_PState")
                                                                                                                                (use
                                                                                                                                 "wf_state_raise")
                                                                                                                                (assert)))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (replace
                                                                                                                 -47)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "raise")
                                                                                                                    (("3"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (replace
                                                                                                                 -47)
                                                                                                                (("4"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("4"
                                                                                                                    (expand
                                                                                                                     "raise")
                                                                                                                    (("4"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -40)
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   "update_PState"
                                                                                                   "raise")
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -27)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -23)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "md!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_Method")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "method_pred")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -2)
                                                                                          (("2"
                                                                                            (expand*
                                                                                             "wf_Body"
                                                                                             "subset?"
                                                                                             "member")
                                                                                            (("2"
                                                                                              (auto-rewrite
                                                                                               "union"
                                                                                               "member")
                                                                                              (("2"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "ann_program_ext_declared_var_names")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "ann_program_add_ghost_var_decls")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "var_names_union")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -5)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (case
                                                                       "related_states(mp!1)(tau3!1, tau2!2)")
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -14
                                                                           :where
                                                                           (-24
                                                                            -36))))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -14)
                                                                            (("1"
                                                                              (case
                                                                               "cp(astate(tau1!4)) = halted")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "related_states"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -30)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -41)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "related_states")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "update_PState"
                                                                                                     7
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "update_PState"
                                                                                                       7
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "update_PState"
                                                                                                         7
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "raise"
                                                                                                           7
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             7)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (apply
                                                                                                                 (then
                                                                                                                  (use
                                                                                                                   "wf_update_PState"
                                                                                                                   ("p"
                                                                                                                    "mp!1"))
                                                                                                                  (assert)
                                                                                                                  (skosimp*)
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (use
                                                                                                                   "wf_state_raise")
                                                                                                                  (assert)))
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (skosimp*)
                                                                                                              (("4"
                                                                                                                (apply
                                                                                                                 (then
                                                                                                                  (use
                                                                                                                   "wf_update_PState"
                                                                                                                   ("p"
                                                                                                                    "ann_program(mp!1)"))
                                                                                                                  (assert)
                                                                                                                  (skosimp*)
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (use
                                                                                                                   "wf_state_raise")
                                                                                                                  (assert)))
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("5"
                                                                                                              (lift-if)
                                                                                                              (("5"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("6"
                                                                                                              (lift-if)
                                                                                                              (("6"
                                                                                                                (assert)
                                                                                                                (("6"
                                                                                                                  (expand
                                                                                                                   "raise")
                                                                                                                  (("6"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -25)
                                                                                (("2"
                                                                                  (replace
                                                                                   -37)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             8)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         "related_states_preserved_by_raise")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "legal_Program")
                                                                              (("2"
                                                                                (expand
                                                                                 "program_pred")
                                                                                (("2"
                                                                                  (inst
                                                                                   -9
                                                                                   "down(get_class(program(mp!1))(a!1))")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -9)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "method_pred")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -2)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (use
                                                                                                   "lookup_mthd_in_methods_class")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "ann_program"
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ann_class"
                                                                                           1)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "get_class_in_classes")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (typepred
                                                                               "md!1")
                                                                              (("3"
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (("3"
                                                                                  (expand
                                                                                   "method_pred")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (inst?
                                                                                       -2)
                                                                                      (("3"
                                                                                        (expand*
                                                                                         "wf_Body"
                                                                                         "subset?"
                                                                                         "member")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -33)
                                                                        (("2"
                                                                          (replace
                                                                           -21)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split
                                                                                           2)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (use
                                                                                               "related_states_preserved_by_raise")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "legal_Program")
                                                                  (("2"
                                                                    (expand
                                                                     "program_pred")
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "(down(get_class(program(mp!1))(a!1))) ")
                                                                      (("2"
                                                                        (split
                                                                         -6)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "ann_program"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "ann_class"
                                                                             1)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "get_class_in_classes")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "program(mp!1)")
                                                                  (("3"
                                                                    (expand*
                                                                     "wf_Program"
                                                                     "program_pred")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (use
                                                                         "get_class_in_classes")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (replace
                                                                                 -23
                                                                                 :dir
                                                                                 rl)
                                                                                (("3"
                                                                                  (expand*
                                                                                   "wf_Body"
                                                                                   "subset?"
                                                                                   "member")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (expand
                                                               "id")
                                                              (("2"
                                                                (use
                                                                 "ann_program_preserves_wf_body")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "legal_Program")
                                          (("2"
                                            (expand "program_pred")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -3)
                                                  (("1"
                                                    (expand
                                                     "method_pred")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst?
                                                                 -5)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "lookup_mthd_in_methods_class")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "ann_program"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "ann_class"
                                                       1)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             "get_class_in_classes")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred "md!1")
                                          (("3"
                                            (expand "wf_Method")
                                            (("3"
                                              (expand "method_pred")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst? -5)
                                                  (("3"
                                                    (expand*
                                                     "wf_Body"
                                                     "subset?"
                                                     "member")
                                                    (("3"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (expand "id")
                                      (("2"
                                        (use
                                         "ann_program_preserves_wf_body")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (related_states const-decl "boolean" Equivalence nil)
    (derive def-decl "bool" Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (md!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (v!1 skolem-const-decl "ValOrExcpt[Name]"
     MethodCallsPreserveRelatedState nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (wf_state_raise formula-decl nil State nil)
    (derive_after_raise formula-decl nil SemanticsProofs nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (member const-decl "bool" sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (inv!1 skolem-const-decl "(wf_BoolExpr(program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     MethodCallsPreserveRelatedState nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (wf_program_methods_only_in_one_class formula-decl nil
     WellFormedProgram nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil))
   30932 25860 t nil)
  (on_method_exit_normal_preserves_related_states_not_annotated-1 nil
   3401427848 3405080168
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      (("" (expand "on_method_exit_normal")
        ((""
          (apply (then (use "related_states_implies_same_exception")
                  (assert) (replace -1)))
          (("" (skosimp*)
            (("" (expand "check_assertion")
              (("" (flatten)
                (("" (expand "lookup_inv")
                  (("" (expand "id")
                    (("" (use "get_class_equivalence")
                      (("" (assert)
                        (("" (replace -1)
                          (("" (replace -12 :dir rl)
                            (("" (replace -20)
                              ((""
                                (skosimp*)
                                ((""
                                  (copy -8)
                                  (("1"
                                    (apply
                                     (repeat
                                      (inst? -1 :where (-11 -22))))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (expand "on_method_MVA")
                                          (("1"
                                            (lift-if -12)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -12)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "lookup_mthd_in_methods_class")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -13)
                                                        (("1"
                                                          (typepred
                                                           "program(mp!1)")
                                                          (("1"
                                                            (use
                                                             "wf_program_methods_only_in_one_class")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "wf_program_methods_only_in_one_class")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "get_monitored_class(mp!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         "get_class_in_classes")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "get_monitored_class_in_classes")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (use
                                                                                   "name_get_monitored_class")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case-replace
                                                       "tau2!1 = tau1!1"
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (copy -10)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -1
                                                             :where
                                                             (-16
                                                              -26))))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "related_states(mp!1)(tau3!1, tau2!2)")
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -13
                                                                       :where
                                                                       (-21
                                                                        -31))))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -13)
                                                                        (("1"
                                                                          (replace
                                                                           -22)
                                                                          (("1"
                                                                            (replace
                                                                             -32)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       5)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (use
                                                                                               "related_states_preserved_by_raise")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "legal_Program")
                                                                          (("2"
                                                                            (inst
                                                                             -8
                                                                             "down(get_class(program(mp!1))(a!1))")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -8)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (use
                                                                                         "lookup_mthd_in_methods_class")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "ann_program"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ann_class"
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (typepred
                                                                           "md!1")
                                                                          (("3"
                                                                            (expand
                                                                             "wf_Method")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (expand*
                                                                                 "wf_Body"
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -28)
                                                                    (("2"
                                                                      (replace
                                                                       -18)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (use
                                                                                       "related_states_preserved_by_raise")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "legal_Program")
                                                                (("2"
                                                                  (inst
                                                                   -5
                                                                   "(down(get_class(program(mp!1))(a!1))) ")
                                                                  (("2"
                                                                    (split
                                                                     -5)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "ann_program"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "ann_class"
                                                                         1)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "get_class_in_classes")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "program(mp!1)")
                                                                (("3"
                                                                  (expand*
                                                                   "wf_Program"
                                                                   "wf_Classes")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (inst
                                                                       -4
                                                                       "down(get_class[Name](program(mp!1))(a!1))")
                                                                      (("3"
                                                                        (use
                                                                         "get_class_in_classes")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "wf_Class")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (replace
                                                                                 -21
                                                                                 :dir
                                                                                 rl)
                                                                                (("3"
                                                                                  (expand*
                                                                                   "wf_Body"
                                                                                   "subset?"
                                                                                   "member")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (use
                                                             "ann_program_preserves_wf_body")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp*)
                                                          (("3"
                                                            (expand
                                                             "id")
                                                            (("3"
                                                              (use
                                                               "ann_program_preserves_wf_body")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "legal_Program")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "lookup_mthd_in_methods_class")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "ann_program"
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     1)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "get_class_in_classes")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred "md!1")
                                          (("3"
                                            (expand "wf_Method")
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (expand*
                                                 "wf_Body"
                                                 "subset?"
                                                 "member")
                                                (("3"
                                                  (flatten)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (use
                                       "ann_program_preserves_wf_body")
                                      nil
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3"
                                      (expand "id")
                                      (("3"
                                        (use
                                         "ann_program_preserves_wf_body")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (Body type-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (related_states const-decl "boolean" Equivalence nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member const-decl "bool" sets nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (wf_program_methods_only_in_one_class formula-decl nil
     WellFormedProgram nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil))
   11303 7010 t nil))
 (on_method_exit_exceptional_preserves_related_states_annotated_TCC1 0
  (on_method_exit_exceptional_preserves_related_states_annotated_TCC1-1
   nil 3401441474 3410852301
   ("" (expand "id")
    (("" (skosimp*)
      (("" (typepred "b!1")
        (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
      nil))
    nil)
   proved
   ((ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   1037 950 t nil))
 (on_method_exit_exceptional_preserves_related_states_annotated_TCC2 0
  (on_method_exit_exceptional_preserves_related_states_annotated_TCC2-1
   nil 3401441474 3410852302
   ("" (skosimp*)
    (("" (expand "id")
      (("" (use "ann_program_preserves_wf_method") nil nil)) nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program_preserves_wf_method formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   1027 980 t nil))
 (on_method_exit_exceptional_preserves_related_states_annotated 0
  (on_method_exit_exceptional_preserves_related_states_annotated-2 nil
   3405947267 3410852357
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (expand "on_method_exit_exceptional")
        (("" (assert)
          ((""
            (apply (then (use "related_states_implies_same_exception")
                    (assert) (replace -1)))
            ((""
              (apply (branch (split -11)
                      ((then (flatten) (assert) (flatten) (assert)))))
              (("" (skosimp*)
                (("" (auto-rewrite "id")
                  (("" (expand "check_assertion")
                    (("" (flatten)
                      (("" (skosimp*)
                        (("" (expand "lookup_inv")
                          (("" (use "get_class_equivalence")
                            (("" (assert)
                              ((""
                                (replace -1)
                                ((""
                                  (assert)
                                  ((""
                                    (expand "ann_class" -27)
                                    ((""
                                      (assert)
                                      ((""
                                        (lift-if -27)
                                        ((""
                                          (use "get_class_in_classes")
                                          ((""
                                            (assert)
                                            ((""
                                              (case
                                               "related_states(mp!1)(update_PState(sMP1!1, catch), update_PState(sAP1!1, catch))")
                                              (("1"
                                                (case
                                                 "wf_state(mp!1)(tau2!1)")
                                                (("1"
                                                  (case
                                                   "wf_state(mp!1)(tau1!3)")
                                                  (("1"
                                                    (case
                                                     "wf_state(mp!1)(tau3!1)")
                                                    (("1"
                                                      (case
                                                       "wf_state(ann_program(mp!1))(tau1!2)")
                                                      (("1"
                                                        (case
                                                         "wf_state(ann_program(mp!1))(tau1!4)")
                                                        (("1"
                                                          (case
                                                           "wf_state(ann_program(mp!1))(tau2!2)")
                                                          (("1"
                                                            (use
                                                             "ann_method_exc_set")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "derive"
                                                                 -35)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -35)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "update_PState")
                                                                        (("1"
                                                                          (expand
                                                                           "catch")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (replace
                                                                           -7)
                                                                          (("2"
                                                                            (copy
                                                                             -37)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 (-4
                                                                                  -20))))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (case
                                                                                       "cp(astate(tau1!1)) = halted")
                                                                                      (("1"
                                                                                        (case
                                                                                         "cp(astate(sMP2!1)) = halted")
                                                                                        (("1"
                                                                                          (case
                                                                                           "wf_state(mp!1)(sMP2!1)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(ann_program(mp!1))(sAP2!1)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "related_states"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "derive"
                                                                                                         -14)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "derive"
                                                                                                             -54)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "up?(ex(pstate(tau2!2))) AND down(ex(pstate(tau2!2))) = JMLExc")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -60)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "related_states")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -57)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "update_PState")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "raise")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -50)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         "wf_update_PState"
                                                                                                         ("p"
                                                                                                          "ann_program(mp!1)"))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "wf_state_raise")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -30)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_update_PState"
                                                                                                       ("p"
                                                                                                        "mp!1"))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "wf_state_raise")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "derive_never_leaves_halted")
                                                                                          (("2"
                                                                                            (use
                                                                                             "on_method_MVA_never_leaves_halted")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -2
                                                                                                 :where
                                                                                                 -29)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -31)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "update_PState")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -29)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "related_states_implies_same_exception")
                                                                                            (assert)
                                                                                            (replace
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (case
                                                                                             "up?(ex(pstate(tau1!1)))")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "mp!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "wf_set_stmts")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "program_method_pred")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "wf_set_stmts")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "no_exc")
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -3
                                                                                                                           :where
                                                                                                                           -28)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (use
                                                                                                                             "related_states_implies_same_exception"
                                                                                                                             ("sMP"
                                                                                                                              "update_PState(sMP1!1, catch)"
                                                                                                                              "sAP"
                                                                                                                              "update_PState(sAP1!1, catch)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "update_PState")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (use
                                                                                                                 "lookup_mthd_in_methods_class")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "ann_method"
                                                                                               -8)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "ann_event_does_not_throw_exception")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         "ann_event_preserves_MP_modeled"
                                                                                                         ("sMP2"
                                                                                                          "tau2!1"))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "MP_modeled_implies_same_exception")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "up?(ex(pstate(tau2!1)))")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "derive_bottom_iff_exception_step"
                                                                                                                     ("p"
                                                                                                                      "ann_program(mp!1)"))
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1
                                                                                                                       :where
                                                                                                                       -13)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -47)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "derive"
                                                                                                                       -49)
                                                                                                                      (("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "derive"
                                                                                                                           -50)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "derive"
                                                                                                                               -51)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "derive"
                                                                                                                                   -52)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "derive"
                                                                                                                                     -52)
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "derive"
                                                                                                                                         -56)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "derive"
                                                                                                                                             -56)
                                                                                                                                            (("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "check_for_exception")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "check_for_exception_final")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "check_for_exception")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -59
                                                                                                                                                           :hide?
                                                                                                                                                           t)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -59
                                                                                                                                                             :hide?
                                                                                                                                                             t)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -53
                                                                                                                                                                 :hide?
                                                                                                                                                                 t)
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -56
                                                                                                                                                                   :hide?
                                                                                                                                                                   t)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "halted")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "MP_modeled_lookup_correspondence"
                                                                                                                                                                       ("q1"
                                                                                                                                                                        "cp(astate(tau2!1))"
                                                                                                                                                                        "sMP"
                                                                                                                                                                        "tau2!1"))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -59
                                                                                                                                                                             :hide?
                                                                                                                                                                             t)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -55
                                                                                                                                                                                 :hide?
                                                                                                                                                                                 t)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case-replace
                                                                                                                                                                                         "related_states(mp!1)(tau3!1, tau2!2)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -61)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -34)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "cp(astate(tau3!1)) = halted")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "related_states"
                                                                                                                                                                                                 (8
                                                                                                                                                                                                  -2))
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "update_PState"
                                                                                                                                                                                                         8
                                                                                                                                                                                                         2)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (split
                                                                                                                                                                                                           8)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (use
                                                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                                                               ("p"
                                                                                                                                                                                                                "mp!1"))
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (use
                                                                                                                                                                                                                       "wf_state_raise")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (apply
                                                                                                                                                                                                 (then
                                                                                                                                                                                                  (use
                                                                                                                                                                                                   "related_states_implies_same_exception")
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1)))
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       9)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (use
                                                                                                                                                                                                           "related_states_preserved_by_raise")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "related_states(mp!1)(tau2!1, tau!2)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (apply
                                                                                                                                                                                             (branch
                                                                                                                                                                                              (split
                                                                                                                                                                                               -59)
                                                                                                                                                                                              ((then
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (assert)))))
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -31
                                                                                                                                                                                               :dir
                                                                                                                                                                                               rl)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (apply
                                                                                                                                                                                                 (repeat
                                                                                                                                                                                                  (inst?
                                                                                                                                                                                                   -46
                                                                                                                                                                                                   :where
                                                                                                                                                                                                   (-33
                                                                                                                                                                                                    -1))))
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (split
                                                                                                                                                                                                     -46)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -61
                                                                                                                                                                                                           2)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -36
                                                                                                                                                                                                             2)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (case
                                                                                                                                                                                                               "cp(astate(tau1!3)) = halted")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "related_states"
                                                                                                                                                                                                                 (-2
                                                                                                                                                                                                                  2))
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (split
                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                   "raise")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (split
                                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (apply
                                                                                                                                                                                                                                   (then
                                                                                                                                                                                                                                    (use
                                                                                                                                                                                                                                     "wf_update_PState"
                                                                                                                                                                                                                                     ("p"
                                                                                                                                                                                                                                      "mp!1"))
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                                                                    (use
                                                                                                                                                                                                                                     "wf_state_raise")
                                                                                                                                                                                                                                    (assert)))
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "raise")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("3"
                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                  (("3"
                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                                                                    (("3"
                                                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (case-replace
                                                                                                                                                                                                                 "v!4 = v!5")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (split
                                                                                                                                                                                                                       3)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (use
                                                                                                                                                                                                                           "related_states_preserved_by_raise")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (apply
                                                                                                                                                                                                                   (then
                                                                                                                                                                                                                    (use
                                                                                                                                                                                                                     "related_states_implies_same_exception"
                                                                                                                                                                                                                     ("sMP"
                                                                                                                                                                                                                      "tau1!3"
                                                                                                                                                                                                                      "sAP"
                                                                                                                                                                                                                      "tau1!4"))
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1)))
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (split
                                                                                                                                                                                                                     -5)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "derive_bottom_iff_exception_step"
                                                                                                                                                                                                                       ("p"
                                                                                                                                                                                                                        "mp!1"))
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         :where
                                                                                                                                                                                                                         -37)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                 -4
                                                                                                                                                                                                                                 :dir
                                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -5)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (apply-extensionality
                                                                                                                                                                                                                               :hide?
                                                                                                                                                                                                                               t)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "legal_Program")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "program_pred")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -39
                                                                                                                                                                                                           "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (split
                                                                                                                                                                                                               -39)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "method_pred")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "ann_class")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "legal_Body_preserved_by_proper_subterm")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         :where
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (inst?
                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                           :where
                                                                                                                                                                                                                           -2)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "<<")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (propax)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "ann_program")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("3"
                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                       "program(mp!1)")
                                                                                                                                                                                                      (("3"
                                                                                                                                                                                                        (expand*
                                                                                                                                                                                                         "wf_Program"
                                                                                                                                                                                                         "program_pred")
                                                                                                                                                                                                        (("3"
                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                          (("3"
                                                                                                                                                                                                            (inst?)
                                                                                                                                                                                                            (("3"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("3"
                                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                                (("3"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -37
                                                                                                                                                                                                                   :dir
                                                                                                                                                                                                                   rl)
                                                                                                                                                                                                                  (("3"
                                                                                                                                                                                                                    (expand*
                                                                                                                                                                                                                     "wf_Body"
                                                                                                                                                                                                                     "subset?"
                                                                                                                                                                                                                     "member")
                                                                                                                                                                                                                    (("3"
                                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "derive_never_leaves_halted")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 :where
                                                                                                                                                                                                 -37)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "related_states")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "related_states"
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "derive_never_leaves_halted")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     :where
                                                                                                                                                                                                     -33)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -34)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "related_states")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "update_PState"
                                                                                                                                                                                                               1
                                                                                                                                                                                                               2)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                       -66)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -69)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "update_PState"
                                                                                                                                                                                                                             1
                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "update_PState"
                                                                                                                                                                                                                               1
                                                                                                                                                                                                                               2)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "raise"
                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                 2)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                   "raise"
                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                   2)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "mva(mp!1)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "complete")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (use
                                                                                                                                                                             "on_method_MVA_yields_wf_AState")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "related_states")
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "wf_AState")
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -25)
                                                                                                              (("2"
                                                                                                                (apply-extensionality
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("2"
                                                                                                                  (case-replace
                                                                                                                   "excpt(e(v!1)) = v!1")
                                                                                                                  (("2"
                                                                                                                    (apply-extensionality
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (case-replace
                                                                                                               "get_monitored_class(mp!1) = down(get_class(program(mp!1))(a!1))")
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "lookup_mthd_in_methods_class")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "program(mp!1)")
                                                                                                                (("2"
                                                                                                                  (expand*
                                                                                                                   "wf_Program"
                                                                                                                   "wf_program_has_unique_class_names_def")
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "name_get_monitored_class")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (rewrite
                                                                                                                             "get_monitored_class_in_classes")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "legal_Program")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "program_pred")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -30
                                                                                         "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -30)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "method_pred")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "ann_method(mp!1)(md!1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -6)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "ann_method_exc_set")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "legal_Body_preserved_by_proper_subterm")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "ann_program(mp!1)"
                                                                                                                     "exc_set(ann_method(mp!1)(md!1))(e(v!1))"
                                                                                                                     "s1(exc_set(ann_method(mp!1)(md!1))(e(v!1)))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "<<")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "ann_class")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "ann_methods")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "lookup_mthd_in_methods_class")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "ann_program")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "md!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_Method")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "method_pred")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (inst?
                                                                                             -6)
                                                                                            (("3"
                                                                                              (expand*
                                                                                               "wf_Body"
                                                                                               "subset?"
                                                                                               "member")
                                                                                              (("3"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (use
                                                                                 "ann_program_preserves_wf_body")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -37)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_update_PState"
                                                                         ("p"
                                                                          "ann_program(mp!1)"))
                                                                        (assert)
                                                                        (skosimp*)
                                                                        (expand
                                                                         "update_PState")
                                                                        (use
                                                                         "wf_state_raise")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "derive_yields_wf_state_AP")
                                                          (("2"
                                                            (replace
                                                             -34)
                                                            (("2"
                                                              (expand
                                                               "derive"
                                                               -36)
                                                              (("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -36)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("2"
                                                                      (copy
                                                                       -5)
                                                                      (("2"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -4)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "program(mp!1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_Program")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "program_pred")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "down(get_class(program(mp!1))(a!1))")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -25
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "wf_Body")
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "ann_program_ext_declared_var_names")
                                                                                                        (("1"
                                                                                                          (auto-rewrite
                                                                                                           "union"
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "ann_program_add_ghost_var_decls")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "var_names_union")
                                                                                                          (("2"
                                                                                                            (auto-rewrite
                                                                                                             "union"
                                                                                                             "member")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "wf_Body")
                                                                          (("2"
                                                                            (auto-rewrite
                                                                             "union"
                                                                             "member")
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "ann_program_ext_declared_var_names")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (rewrite
                                                                                         "var_names"
                                                                                         -1)))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "singleton")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "cp_new_ghostvar")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "halted_new_ghostvar")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (rewrite
                                                                                     "subterm"
                                                                                     -2)))
                                                                                  (("2"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((assert))))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "derive_yields_wf_state_AP")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           :where
                                                           -31)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               "wf_update_PState"
                                                               ("p"
                                                                "ann_program(mp!1)"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "related_states")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "ann_program_preserves_wf_method")
                                                            (("2"
                                                              (expand*
                                                               "wf_Method"
                                                               "method_pred")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst?
                                                                     -6)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -14)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "wf_update_PState"
                                                                   ("p"
                                                                    "mp!1"))
                                                                  (assert)
                                                                  (skosimp*)
                                                                  (expand
                                                                   "update_PState")
                                                                  (use
                                                                   "wf_state_raise")
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "derive_yields_wf_state_MP")
                                                    (("2"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -13)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -8)
                                                  (("2"
                                                    (use
                                                     "on_method_MVA_yields_wf_AState")
                                                    (("2"
                                                      (case
                                                       "wf_state(mp!1)(tau1!1)")
                                                      (("1"
                                                        (use
                                                         "on_method_MVA_yields_wf_AState")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "wf_state")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "wf_ghoststate")
                                                                  (("1"
                                                                    (expand
                                                                     "is_ghost")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "derive_yields_wf_state_MP")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           :where
                                                           -8)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "related_states"
                                                               -)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "related_states_preserved_by_catch")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (id_preserves application-judgement "S" identity_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (related_states const-decl "boolean" Equivalence nil)
    (catch const-decl "PState" State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (a!1 skolem-const-decl "(defined?)" MethodCallsPreserveRelatedState
     nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     MethodCallsPreserveRelatedState nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (m2!1 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (m1!4 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (ValOrExcpt_excpt_extensionality formula-decl nil ValOrExcpt_adt
     nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (MP_modeled_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (MP_modeled_lookup_correspondence formula-decl nil
     RelatedStatesProperties nil)
    (member const-decl "bool" sets nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (legal_Body_preserved_by_proper_subterm formula-decl nil
     LegalProgramRestriction nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (ann_event_preserves_MP_modeled formula-decl nil
     AnnEventPreservesMPModeled nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt
     nil)
    (ann_event_does_not_throw_exception formula-decl nil
     AnnEventPreservesMPModeled nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil)
    (derive def-decl "bool" Semantics nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (e adt-accessor-decl "[(excpt?) -> Excpt]" ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (ann_method_exc_set formula-decl nil AnnotateMethod nil)
    (md!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (v!1 skolem-const-decl "ValOrExcpt[Name]"
     MethodCallsPreserveRelatedState nil)
    (ann_program_preserves_wf_method formula-decl nil
     AnnotateProgramProperties nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (related_states_preserved_by_catch formula-decl nil
     RelatedStatesProperties nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil))
   55000 44980 t nil)
  (on_method_exit_exceptional_preserves_related_states_annotated-1 nil
   3401436054 3405080203
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (expand "on_method_exit_exceptional")
        (("" (assert)
          ((""
            (apply (then (use "related_states_implies_same_exception")
                    (assert) (replace -1)))
            ((""
              (apply (branch (split -11)
                      ((then (flatten) (assert) (flatten) (assert)))))
              (("" (skosimp*)
                (("" (auto-rewrite "id")
                  (("" (expand "check_assertion")
                    (("" (flatten)
                      (("" (skosimp*)
                        (("" (expand "lookup_inv")
                          (("" (use "get_class_equivalence")
                            (("" (assert)
                              ((""
                                (replace -1)
                                ((""
                                  (assert)
                                  ((""
                                    (expand "ann_class" -23)
                                    ((""
                                      (assert)
                                      ((""
                                        (lift-if -23)
                                        ((""
                                          (use "get_class_in_classes")
                                          ((""
                                            (assert)
                                            ((""
                                              (replace -6 :dir rl)
                                              ((""
                                                (case
                                                 "related_states(mp!1)(update_PState(sMP1!1, catch), update_PState(sAP1!1, catch))")
                                                (("1"
                                                  (use
                                                   "ann_method_exc_set")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "derive"
                                                       -26)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -26)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (copy
                                                                   -28)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       (-4
                                                                        -12))))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "cp(astate(tau1!1)) = halted")
                                                                          (("1"
                                                                            (expand
                                                                             "related_states"
                                                                             -2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "derive"
                                                                                     -9)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "related_states_implies_same_exception")
                                                                              (assert)
                                                                              (replace
                                                                               -1)))
                                                                            (("2"
                                                                              (case
                                                                               "up?(ex(pstate(tau1!1)))")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "derive"
                                                                                 -7)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "ann_method"
                                                                                 -6)
                                                                                (("2"
                                                                                  (use
                                                                                   "ann_event_preserves_MP_modeled"
                                                                                   ("sMP2"
                                                                                    "tau2!1"))
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "MP_modeled_implies_same_exception")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "up?(ex(pstate(tau2!1)))")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "derive"
                                                                                               -9)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -34)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "derive"
                                                                                                 -36)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "derive"
                                                                                                     -37)
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "derive"
                                                                                                         -38)
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "derive"
                                                                                                             -39)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "derive"
                                                                                                               -39)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "derive"
                                                                                                                   -43)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "derive"
                                                                                                                       -43)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -40
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -43
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "halted")
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "MP_modeled_lookup_correspondence")
                                                                                                                                (("2"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   (-42
                                                                                                                                    -45
                                                                                                                                    -3))
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "cp(astate(tau2!1))"
                                                                                                                                     "tau2!1")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -42
                                                                                                                                           :dir
                                                                                                                                           rl
                                                                                                                                           :hide?
                                                                                                                                           t)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -44
                                                                                                                                             :dir
                                                                                                                                             rl
                                                                                                                                             :hide?
                                                                                                                                             t)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "check_for_exception_final")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "check_for_exception")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -44)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -45)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (case-replace
                                                                                                                                                                 "related_states(mp!1)(tau3!1, tau2!2)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -49)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -23)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "cp(astate(tau3!1)) = halted")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "related_states"
                                                                                                                                                                         (7
                                                                                                                                                                          -2))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState"
                                                                                                                                                                                 7
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   7)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (use
                                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                                       ("p"
                                                                                                                                                                                        "mp!1"))
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "update_PState")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "related_states_implies_same_exception")
                                                                                                                                                                          (assert)
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lift-if)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (split
                                                                                                                                                                               8)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "related_states_preserved_by_raise")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -46)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "related_states(mp!1)(tau2!1, tau!2)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (repeat
                                                                                                                                                                            (inst?
                                                                                                                                                                             -35
                                                                                                                                                                             :where
                                                                                                                                                                             (-22
                                                                                                                                                                              -2))))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -35)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -49
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -25
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "cp(astate(tau1!3)) = halted")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "related_states"
                                                                                                                                                                                           (-2
                                                                                                                                                                                            2))
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (flatten)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "update_PState"
                                                                                                                                                                                                   2
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (split
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                                                             ("p"
                                                                                                                                                                                                              "mp!1"))
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (use
                                                                                                                                                                                                                     "wf_state_raise")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case-replace
                                                                                                                                                                                           "v!1 = v!2")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (lift-if)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 3)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (split
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (use
                                                                                                                                                                                                         "related_states_preserved_by_raise")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (apply
                                                                                                                                                                                             (then
                                                                                                                                                                                              (use
                                                                                                                                                                                               "related_states_implies_same_exception"
                                                                                                                                                                                               ("sMP"
                                                                                                                                                                                                "tau1!3"
                                                                                                                                                                                                "sAP"
                                                                                                                                                                                                "tau1!4"))
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)))
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (split
                                                                                                                                                                                               -6)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "derive_bottom_iff_exception_step"
                                                                                                                                                                                                 ("p"
                                                                                                                                                                                                  "mp!1"))
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst?
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   :where
                                                                                                                                                                                                   -26)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -4
                                                                                                                                                                                                           :dir
                                                                                                                                                                                                           rl)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -5)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (apply-extensionality
                                                                                                                                                                                                         :hide?
                                                                                                                                                                                                         t)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "legal_Program")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -28
                                                                                                                                                                                   "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (split
                                                                                                                                                                                       -28)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "ann_class")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "legal_Body_preserved_by_proper_subterm")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst?
                                                                                                                                                                                               -1
                                                                                                                                                                                               :where
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst?
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 :where
                                                                                                                                                                                                 -2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "<<")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "ann_program")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "program(mp!1)")
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (expand*
                                                                                                                                                                                   "wf_Program"
                                                                                                                                                                                   "wf_Classes")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (inst?)
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "wf_Class")
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("3"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -27
                                                                                                                                                                                               :dir
                                                                                                                                                                                               rl)
                                                                                                                                                                                              (("3"
                                                                                                                                                                                                (expand*
                                                                                                                                                                                                 "wf_Body"
                                                                                                                                                                                                 "subset?"
                                                                                                                                                                                                 "member")
                                                                                                                                                                                                (("3"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "related_states")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -23
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (use
                                                                                                                                                                                 "on_method_MVA_yields_wf_AState")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_state")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "wf_ghoststate")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "is_ghost")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "derive_yields_wf_state_AP")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1
                                                                                                                                                                                 :where
                                                                                                                                                                                 -14)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (use
                                                                                                                                                                                   "ann_event_wf_Body")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand*
                                                                                                                                                                                       "subset?"
                                                                                                                                                                                       "member"
                                                                                                                                                                                       "filter_event")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("3"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("4"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "cp(astate(tau3!1)) = halted")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "related_states")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -26)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "wf_state(mp!1)(tau1!3)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (split
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (use
                                                                                                                                                                                                     "wf_update_PState"
                                                                                                                                                                                                     ("p"
                                                                                                                                                                                                      "mp!1"))
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "update_PState")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (use
                                                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "derive_yields_wf_state_MP")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst?
                                                                                                                                                                                               -1
                                                                                                                                                                                               :where
                                                                                                                                                                                               -26)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -22)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (use
                                                                                                                                                                                                     "on_method_MVA_yields_wf_AState")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "wf_state")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "wf_ghoststate")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "is_ghost")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -51)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (case
                                                                                                                                                                                       "wf_state(ann_program(mp!1))(tau1!4)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (use
                                                                                                                                                                                         "wf_update_PState"
                                                                                                                                                                                         ("p"
                                                                                                                                                                                          "ann_program(mp!1)"))
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (use
                                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "derive_yields_wf_state_AP")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -5)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1
                                                                                                                                                                                             :where
                                                                                                                                                                                             -15)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "ann_event_wf_Body")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand*
                                                                                                                                                                                                   "subset?"
                                                                                                                                                                                                   "member"
                                                                                                                                                                                                   "filter_event")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -51)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "raise")
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("4"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -51)
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                      (("4"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "raise")
                                                                                                                                                                                        (("4"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -25)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lift-if)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "derive_never_leaves_halted")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst?
                                                                                                                                                                                         -1
                                                                                                                                                                                         :where
                                                                                                                                                                                         -25)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "mva(mp!1)")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "complete")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (use
                                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               "related_states")
                                                                                                                                              (("3"
                                                                                                                                                (assert)
                                                                                                                                                (("3"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    (("3"
                                                                                                                                                      (expand
                                                                                                                                                       "wf_AState")
                                                                                                                                                      (("3"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("4"
                                                                                                                                          (lemma
                                                                                                                                           "derive_yields_wf_state_AP")
                                                                                                                                          (("4"
                                                                                                                                            (inst?
                                                                                                                                             -1
                                                                                                                                             :where
                                                                                                                                             -9)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "related_states")
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (use
                                                                                                                                               "ann_event_wf_Body")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand*
                                                                                                                                                   "subset?"
                                                                                                                                                   "member"
                                                                                                                                                   "filter_event")
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -14)
                                                                                        (("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (case-replace
                                                                                         "get_monitored_class(mp!1) = down(get_class(program(mp!1))(a!1))")
                                                                                        (("1"
                                                                                          (use
                                                                                           "lookup_mthd_in_methods_class")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "program(mp!1)")
                                                                                          (("2"
                                                                                            (expand*
                                                                                             "wf_Program"
                                                                                             "wf_program_has_unique_class_names_def")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "name_get_monitored_class")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (rewrite
                                                                                                       "get_monitored_class_in_classes")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "legal_Program")
                                                                          (("2"
                                                                            (inst
                                                                             -21
                                                                             "ann_class(mp!1)(down(get_class(program(mp!1))(a!1)))")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -21)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "ann_method(mp!1)(md!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -2)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (use
                                                                                             "ann_method_exc_set")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "legal_Body_preserved_by_proper_subterm")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "ann_program(mp!1)"
                                                                                                     "exc_set(ann_method(mp!1)(md!1))"
                                                                                                     "s1(exc_set(ann_method(mp!1)(md!1)))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "<<")
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "ann_class")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ann_methods")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "lookup_mthd_in_methods_class")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "ann_program")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (typepred
                                                                           "md!1")
                                                                          (("3"
                                                                            (expand
                                                                             "wf_Method")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (expand*
                                                                                 "wf_Body"
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (use
                                                                       "ann_program_preserves_wf_body")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (use
                                                                       "ann_program_preserves_wf_body")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "related_states_preserved_by_catch")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (id_preserves application-judgement "S" identity_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (related_states_preserved_by_catch formula-decl nil
     RelatedStatesProperties nil)
    (ann_method_exc_set formula-decl nil AnnotateMethod nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (derive def-decl "bool" Semantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (halted const-decl "CP" MVA nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (ann_event_preserves_MP_modeled formula-decl nil
     AnnEventPreservesMPModeled nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (legal_Body_preserved_by_proper_subterm formula-decl nil
     LegalProgramRestriction nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (member const-decl "bool" sets nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (ann_event_wf_Body formula-decl nil AnnotateProgramProperties nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (on_method_MVA_yields_wf_AState formula-decl nil
     MonitoredProgramSemantics nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (MP_modeled_lookup_correspondence formula-decl nil
     RelatedStatesProperties nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (MP_modeled_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (catch const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil))
   26978 21140 t nil))
 (on_method_exit_exceptional_preserves_related_states_halted_reached 0
  (on_method_exit_exceptional_preserves_related_states_halted_reached-1
   nil 3404476938 3410852362
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      ((""
        (apply (branch (split -2)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (use "derive_never_leaves_halted")
                (("" (assert)
                  (("" (hide -5)
                    (("" (use "derive_never_leaves_halted")
                      (("" (assert)
                        (("" (replace -12 2)
                          (("" (replace -11 2)
                            (("" (lift-if)
                              ((""
                                (lift-if)
                                ((""
                                  (assert)
                                  ((""
                                    (expand "update_PState")
                                    ((""
                                      (assert)
                                      ((""
                                        (replace -6)
                                        ((""
                                          (assert)
                                          ((""
                                            (use
                                             "on_method_MVA_never_leaves_halted")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (e adt-accessor-decl "[(excpt?) -> Excpt]" ValOrExcpt_adt nil)
    (catch const-decl "PState" State nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   5125 1510 t shostak))
 (on_method_exit_exceptional_preserves_related_states_not_annotated_TCC1
  0
  (on_method_exit_exceptional_preserves_related_states_not_annotated_TCC1-1
   nil 3401441474 3410852364
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "b!1")
        (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   1002 920 t nil))
 (on_method_exit_exceptional_preserves_related_states_not_annotated_TCC2
  0
  (on_method_exit_exceptional_preserves_related_states_not_annotated_TCC2-4
   nil 3410501074 3410852366
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "md!1")
        (("" (expand "wf_Method")
          (("" (expand "method_pred")
            (("" (expand "wf_Body")
              (("" (rewrite "ann_program_ext_declared_var_names")
                (("" (auto-rewrite "union" "member")
                  (("" (assert)
                    (("" (flatten)
                      (("" (rewrite "ann_program_add_ghost_var_decls")
                        (("" (rewrite "var_names_union")
                          (("" (assert)
                            (("" (split 3)
                              (("1"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -4)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -4)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -5)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst? -4)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp*)
                                (("4"
                                  (inst? -6)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -6)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -6)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -7)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -8)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -7)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -7)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -8)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -9)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (apply
                                 (then
                                  (skosimp*)
                                  (branch (split 1) ((skosimp*)))))
                                (("1"
                                  (inst? -8)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -8)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst? -9)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst? -10)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (skosimp*)
                                (("8"
                                  (inst? -9)
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (skosimp*)
                                (("9"
                                  (inst? -11)
                                  (("9" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   2797 2590 t nil)
  (on_method_exit_exceptional_preserves_related_states_not_annotated_TCC2-3
   nil 3404459055 3410500584
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "md!1")
        (("" (expand "wf_Method")
          (("" (expand "method_pred")
            (("" (expand "wf_Body")
              (("" (rewrite "ann_program_ext_declared_var_names")
                (("" (auto-rewrite "union" "member")
                  (("" (assert)
                    (("" (flatten)
                      (("" (rewrite "ann_program_add_ghost_var_decls")
                        (("" (rewrite "var_names_union")
                          (("" (assert)
                            (("" (split 3)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst? -4)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst? -4)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp*)
                                (("4"
                                  (inst? -6)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (skosimp*)
                                (("5"
                                  (inst? -6)
                                  (("5" (assert) nil nil))
                                  nil))
                                nil)
                               ("6"
                                (skosimp*)
                                (("6"
                                  (inst? -8)
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (skosimp*)
                                (("7"
                                  (inst? -8)
                                  (("7" (assert) nil nil))
                                  nil))
                                nil)
                               ("8"
                                (skosimp*)
                                (("8"
                                  (inst? -10)
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (skosimp*)
                                (("9"
                                  (inst? -10)
                                  (("9" (assert) nil nil))
                                  nil))
                                nil)
                               ("10"
                                (skosimp*)
                                (("10"
                                  (inst? -12)
                                  (("10" (assert) nil nil))
                                  nil))
                                nil)
                               ("11"
                                (skosimp*)
                                (("11"
                                  (inst? -12)
                                  (("11" (assert) nil nil))
                                  nil))
                                nil)
                               ("12"
                                (skosimp*)
                                (("12"
                                  (inst? -14)
                                  (("12" (assert) nil nil))
                                  nil))
                                nil)
                               ("13"
                                (skosimp*)
                                (("13"
                                  (inst? -14)
                                  (("13" (assert) nil nil))
                                  nil))
                                nil)
                               ("14"
                                (skosimp*)
                                (("14"
                                  (inst? -16)
                                  (("14" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil))
   2889 2780 t nil)
  (on_method_exit_exceptional_preserves_related_states_not_annotated_TCC2-2
   nil 3401709505 3404458660
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "md!1")
        (("" (expand "wf_Method")
          (("" (expand "wf_Body")
            (("" (rewrite "ann_program_ext_declared_var_names")
              (("" (auto-rewrite "union" "member")
                (("" (assert)
                  (("" (flatten)
                    (("" (split 2)
                      (("1" (skosimp*)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst? -3) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (skosimp*)
                        (("3" (inst? -4) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (skosimp*)
                        (("4" (inst? -5) (("4" (assert) nil nil)) nil))
                        nil)
                       ("5" (skosimp*)
                        (("5" (inst? -6) (("5" (assert) nil nil)) nil))
                        nil)
                       ("6" (skosimp*)
                        (("6" (inst? -7) (("6" (assert) nil nil)) nil))
                        nil)
                       ("7" (skosimp*)
                        (("7" (inst? -8) (("7" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((id const-decl "(bijective?[T, T])" identity nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1294 1210 t nil)
  (on_method_exit_exceptional_preserves_related_states_not_annotated_TCC2-1
   nil 3401441474 3401708600
   ("" (expand "id") (("" (propax) nil nil)) nil) unfinished
   ((id const-decl "(bijective?[T, T])" identity nil)) 197 1 t nil))
 (on_method_exit_exceptional_preserves_related_states_not_annotated 0
  (on_method_exit_exceptional_preserves_related_states_not_annotated-3
   nil 3405947411 3410852377
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (expand "on_method_exit_exceptional")
        (("" (assert)
          ((""
            (apply (then (use "related_states_implies_same_exception")
                    (assert) (replace -1)))
            (("" (expand "check_assertion")
              (("" (split -9)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (skosimp*)
                      (("1" (expand "lookup_inv")
                        (("1" (expand "id")
                          (("1" (use "get_class_equivalence")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -25 :dir rl)
                                  (("1"
                                    (replace -7)
                                    (("1"
                                      (case
                                       "related_states(mp!1)(update_PState(sMP1!1, catch), update_PState(sAP1!1, catch))")
                                      (("1"
                                        (copy -21)
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst?
                                             -1
                                             :where
                                             (-6 -25))))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand
                                                 "on_method_MVA")
                                                (("1"
                                                  (lift-if -8)
                                                  (("1"
                                                    (split -8)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "lookup_mthd_in_methods_class")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -26)
                                                              (("1"
                                                                (typepred
                                                                 "program(mp!1)")
                                                                (("1"
                                                                  (use
                                                                   "wf_program_methods_only_in_one_class")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "wf_program_methods_only_in_one_class")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "get_monitored_class(mp!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "get_class_in_classes")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (use
                                                                                   "get_monitored_class_in_classes")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (use
                                                                                         "name_get_monitored_class")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case-replace
                                                         "tau2!1 = tau1!1"
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -23
                                                             :where
                                                             (-12
                                                              -30))))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -23)
                                                              (("1"
                                                                (case
                                                                 "cp(astate(tau1!2)) = halted")
                                                                (("1"
                                                                  (expand
                                                                   "related_states")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             5)
                                                                            (("1"
                                                                              (case
                                                                               "wf_state(mp!1)(tau3!1)")
                                                                              (("1"
                                                                                (replace
                                                                                 -25)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (use
                                                                                           "wf_update_PState"
                                                                                           ("p"
                                                                                            "mp!1"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "wf_state_raise")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -23)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_update_PState"
                                                                                             ("p"
                                                                                              "mp!1"))
                                                                                            (assert)
                                                                                            (skosimp*)
                                                                                            (expand
                                                                                             "update_PState")
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "wf_state(ann_program(mp!1))(tau2!2)")
                                                                              (("1"
                                                                                (replace
                                                                                 -44)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (use
                                                                                           "wf_update_PState"
                                                                                           ("p"
                                                                                            "ann_program(mp!1)"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "wf_state_raise")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -42)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_update_PState"
                                                                                             ("p"
                                                                                              "ann_program(mp!1)"))
                                                                                            (assert)
                                                                                            (skosimp*)
                                                                                            (expand
                                                                                             "update_PState")
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (replace
                                                                                 -44)
                                                                                (("3"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("3"
                                                                                    (expand*
                                                                                     "update_PState"
                                                                                     "raise")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (replace
                                                                                         -42)
                                                                                        (("3"
                                                                                          (lift-if)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp*)
                                                                              (("4"
                                                                                (replace
                                                                                 -24)
                                                                                (("4"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("4"
                                                                                      (replace
                                                                                       -22)
                                                                                      (("4"
                                                                                        (lift-if)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "related_states(mp!1)(tau3!1, tau2!2)")
                                                                    (("1"
                                                                      (case
                                                                       "cp(astate(tau3!1)) = halted")
                                                                      (("1"
                                                                        (expand
                                                                         "related_states")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               6)
                                                                              (("1"
                                                                                (replace
                                                                                 -26)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (use
                                                                                           "wf_update_PState"
                                                                                           ("p"
                                                                                            "mp!1"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -45)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (replace
                                                                                   -47)
                                                                                  (("3"
                                                                                    (lift-if)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (replace
                                                                                   -27)
                                                                                  (("4"
                                                                                    (lift-if)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("4"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "related_states_implies_same_exception")
                                                                          (assert)
                                                                          (replace
                                                                           -1)))
                                                                        (("2"
                                                                          (replace
                                                                           -35)
                                                                          (("2"
                                                                            (replace
                                                                             -18)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   7)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (use
                                                                                       "related_states_preserved_by_raise")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -32)
                                                                      (("2"
                                                                        (replace
                                                                         -15)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split
                                                                                         2)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "related_states_preserved_by_raise")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "legal_Program")
                                                                (("2"
                                                                  (expand
                                                                   "program_pred")
                                                                  (("2"
                                                                    (inst
                                                                     -17
                                                                     "down(get_class(program(mp!1))(a!1))")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "ann_program"
                                                                         4)
                                                                        (("2"
                                                                          (expand
                                                                           "ann_class"
                                                                           4)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "get_class_in_classes")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "program(mp!1)")
                                                                (("3"
                                                                  (expand*
                                                                   "wf_Program"
                                                                   "program_pred")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (use
                                                                       "get_class_in_classes")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (replace
                                                                               -34
                                                                               :dir
                                                                               rl)
                                                                              (("3"
                                                                                (expand*
                                                                                 "wf_Body"
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("3"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "legal_Program")
                                                (("2"
                                                  (expand
                                                   "program_pred")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (split -15)
                                                      (("1"
                                                        (expand
                                                         "method_pred")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst?
                                                                     -6)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "lookup_mthd_in_methods_class")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "ann_program"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "ann_class"
                                                           1)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (use
                                                                 "get_class_in_classes")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "md!1")
                                                (("3"
                                                  (expand "wf_Method")
                                                  (("3"
                                                    (expand
                                                     "method_pred")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst? -6)
                                                        (("3"
                                                          (expand*
                                                           "wf_Body"
                                                           "subset?"
                                                           "member")
                                                          (("3"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "id")
                                            (("2"
                                              (use
                                               "ann_program_preserves_wf_body")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "related_states_preserved_by_catch")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (related_states const-decl "boolean" Equivalence nil)
    (catch const-decl "PState" State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (e adt-accessor-decl "[(excpt?) -> Excpt]" ValOrExcpt_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (wf_state_raise formula-decl nil State nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (member const-decl "bool" sets nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (wf_program_methods_only_in_one_class formula-decl nil
     WellFormedProgram nil)
    (wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (halted const-decl "CP" MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (related_states_preserved_by_catch formula-decl nil
     RelatedStatesProperties nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil))
   10506 9900 t nil)
  (on_method_exit_exceptional_preserves_related_states_not_annotated-2
   nil 3401429011 3405080230
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (expand "on_method_exit_exceptional")
        (("" (assert)
          ((""
            (apply (then (use "related_states_implies_same_exception")
                    (assert) (replace -1)))
            (("" (expand "check_assertion")
              (("" (split -9)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (skosimp*)
                      (("1" (expand "lookup_inv")
                        (("1" (expand "id")
                          (("1" (use "get_class_equivalence")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -21 :dir rl)
                                  (("1"
                                    (replace -5)
                                    (("1"
                                      (case
                                       "related_states(mp!1)(update_PState(sMP1!1, catch), update_PState(sAP1!1, catch))")
                                      (("1"
                                        (copy -19)
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst?
                                             -1
                                             :where
                                             (-5 -22))))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand
                                                 "on_method_MVA")
                                                (("1"
                                                  (lift-if -6)
                                                  (("1"
                                                    (split -6)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "lookup_mthd_in_methods_class")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -23)
                                                              (("1"
                                                                (typepred
                                                                 "program(mp!1)")
                                                                (("1"
                                                                  (use
                                                                   "wf_program_methods_only_in_one_class")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "wf_program_methods_only_in_one_class")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "get_monitored_class(mp!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "get_class_in_classes")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (use
                                                                                   "get_monitored_class_in_classes")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (use
                                                                                         "name_get_monitored_class")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case-replace
                                                         "tau2!1 = tau1!1"
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -20
                                                             :where
                                                             (-9
                                                              -25))))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -20)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "related_states(mp!1)(tau3!1, tau2!2)")
                                                                  (("1"
                                                                    (case
                                                                     "cp(astate(tau3!1)) = halted")
                                                                    (("1"
                                                                      (expand
                                                                       "related_states")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             5)
                                                                            (("1"
                                                                              (replace
                                                                               -23)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (use
                                                                                         "wf_update_PState"
                                                                                         ("p"
                                                                                          "mp!1"))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "update_PState")
                                                                                              (("2"
                                                                                                (use
                                                                                                 "wf_state_raise")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -40)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (replace
                                                                                 -42)
                                                                                (("3"
                                                                                  (lift-if)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp*)
                                                                              (("4"
                                                                                (replace
                                                                                 -24)
                                                                                (("4"
                                                                                  (lift-if)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (expand
                                                                                       "update_PState")
                                                                                      (("4"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "related_states_implies_same_exception")
                                                                        (assert)
                                                                        (replace
                                                                         -1)))
                                                                      (("2"
                                                                        (replace
                                                                         -30)
                                                                        (("2"
                                                                          (replace
                                                                           -15)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 6)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (use
                                                                                     "related_states_preserved_by_raise")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -27)
                                                                    (("2"
                                                                      (replace
                                                                       -12)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (use
                                                                                     "related_states_preserved_by_raise")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "legal_Program")
                                                                (("2"
                                                                  (inst
                                                                   -14
                                                                   "down(get_class(program(mp!1))(a!1))")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "ann_program"
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "ann_class"
                                                                         4)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "get_class_in_classes")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "program(mp!1)")
                                                                (("3"
                                                                  (expand*
                                                                   "wf_Program"
                                                                   "wf_Classes")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (inst
                                                                       -4
                                                                       "down(get_class(program(mp!1))(a!1))")
                                                                      (("3"
                                                                        (use
                                                                         "get_class_in_classes")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "wf_Class")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (replace
                                                                                 -30
                                                                                 :dir
                                                                                 rl)
                                                                                (("3"
                                                                                  (expand*
                                                                                   "wf_Body"
                                                                                   "subset?"
                                                                                   "member")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "legal_Program")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (split -13)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "lookup_mthd_in_methods_class")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "ann_program"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "ann_class"
                                                         1)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "get_class_in_classes")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "md!1")
                                                (("3"
                                                  (expand "wf_Method")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (expand*
                                                       "wf_Body"
                                                       "subset?"
                                                       "member")
                                                      (("3"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (use
                                             "ann_program_preserves_wf_body")
                                            nil
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (expand "id")
                                            (("3"
                                              (use
                                               "ann_program_preserves_wf_body")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "related_states_preserved_by_catch")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (catch const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (wf_state_raise formula-decl nil State nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (halted const-decl "CP" MVA nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (member const-decl "bool" sets nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (wf_program_methods_only_in_one_class formula-decl nil
     WellFormedProgram nil)
    (wf_program_methods_only_in_one_class const-decl "boolean"
     WellFormedProgram nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (related_states_preserved_by_catch formula-decl nil
     RelatedStatesProperties nil)
    (get_class_equivalence formula-decl nil AnnotateProgramProperties
     nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil))
   5892 5540 t nil)
  (on_method_exit_exceptional_preserves_related_states_not_annotated-1
   nil 3401427855 3401429001
   (";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
    (skosimp*)
    ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
      (expand "on_method_entry_MP")
      ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
        (expand "on_method_entry")
        ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
          (flatten)
          ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
            (assert)
            ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
              (skosimp*)
              ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                (apply (then
                        (use "related_states_implies_same_exception")
                        (assert) (replace -1)))
                ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                  (skosimp*)
                  ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                    (expand "check_assertion")
                    ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                      (flatten)
                      ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                        (expand "lookup_inv")
                        ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                          (expand "id")
                          ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                            (use "get_class_equivalence")
                            ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                              (assert)
                              ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                (replace -1)
                                ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                  (replace -18 :dir rl)
                                  ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                    (replace -9)
                                    ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                      (skosimp*)
                                      ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                        (copy -7)
                                        ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                          (apply
                                           (repeat
                                            (inst?
                                             -1
                                             :where
                                             (-12 -23))))
                                          ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                            (assert)
                                            ((";;; Proof on_method_entry_preserves_related_states_not_annotated-1 for formula MethodCallsPreserveRelatedState.on_method_entry_preserves_related_states_not_annotated"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case
                                                   "related_states(mp!1)(tau1!2, tau1!1)")
                                                  (("1"
                                                    (copy -10)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -1
                                                         :where
                                                         (-18 -29))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (case
                                                               "related_states(mp!1)(tau2!2, tau2!1)")
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -13
                                                                   :where
                                                                   (-22
                                                                    -33))))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -13)
                                                                    (("1"
                                                                      (split
                                                                       -24)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "on_method_MVA")
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (use
                                                                                     "lookup_mthd_in_methods_class")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -18)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "mp!1")
                                                                                          (("1"
                                                                                            (expand*
                                                                                             "wf_MP"
                                                                                             "wf_Program"
                                                                                             "wf_program_methods_only_in_one_class")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -8
                                                                                                   "get_monitored_class(mp!1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "get_class_in_classes")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "get_monitored_class_in_classes")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -10
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "name_get_monitored_class")
                                                                                                                nil)))))))))))))))))))))))))))))))
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand*
                                                                                     "related_states"
                                                                                     "wf_state"
                                                                                     "MP_modeled?"
                                                                                     "MVA_modeled?"
                                                                                     "MVA_cp_modeled?"
                                                                                     "MVA_cps_modeled?"
                                                                                     "MVA_vars_modeled?"
                                                                                     "Program_modeled?"
                                                                                     "Program_gvs_modeled?"
                                                                                     "halted_implies_JMLExc"
                                                                                     "wf_ghoststate"
                                                                                     "id")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           7)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "is_ghost")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil)
                                                                                           ("3"
                                                                                            (propax)
                                                                                            nil)
                                                                                           ("4"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil)))
                                                                                           ("5"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("5"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))))
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (typepred
                                                                         "mp!1")
                                                                        (expand*
                                                                         "wf_MP"
                                                                         "wf_Program"
                                                                         "wf_program_all_variables_declared"
                                                                         "ext_declared_var_names"
                                                                         "declared_var_names")
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member"
                                                                         "subset?")
                                                                        (assert)
                                                                        (skosimp*)
                                                                        (flatten)
                                                                        (inst?
                                                                         -7)
                                                                        (assert)))
                                                                      (("2"
                                                                        (expand
                                                                         "var_names"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "Union")
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "var_names(down(get_class(program(mp!1))(a!1)))")
                                                                            (("1"
                                                                              (expand
                                                                               "var_names"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "Union")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "var_names(md!1)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "var_names"
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Union")
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "var_names(pre_set(md!1))")
                                                                                              nil)))))))
                                                                                       ("2"
                                                                                        (inst
                                                                                         1
                                                                                         "md!1")
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (replace
                                                                                             -19
                                                                                             :dir
                                                                                             rl)
                                                                                            (use
                                                                                             "lookup_mthd_in_methods_class")
                                                                                            (assert)))
                                                                                          nil)))))))))))))
                                                                             ("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (use
                                                                                 "get_class_in_classes")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))
                                                               ("2"
                                                                (replace
                                                                 -20)
                                                                (("2"
                                                                  (replace
                                                                   -31)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (use
                                                                                 "related_states_preserved_by_raise")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "derive_bottom_iff_exception_step"
                                                                                     ("p"
                                                                                      "ann_program(mp!1)"))
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1
                                                                                       :where
                                                                                       -33)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))))
                                                                         ("2"
                                                                          (propax)
                                                                          nil)))))))))))))))
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (typepred
                                                               "mp!1")
                                                              (expand*
                                                               "wf_MP"
                                                               "wf_Program"
                                                               "wf_program_all_variables_declared"
                                                               "ext_declared_var_names"
                                                               "declared_var_names")
                                                              (auto-rewrite
                                                               "union"
                                                               "member"
                                                               "subset?")
                                                              (assert)
                                                              (skosimp*)
                                                              (flatten)
                                                              (inst?
                                                               -7)
                                                              (assert)))
                                                            (("2"
                                                              (expand
                                                               "var_names"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "Union")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "var_names(down(get_class(program(mp!1))(a!1)))")
                                                                  (("1"
                                                                    (expand
                                                                     "var_names"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "Union")
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "var_names(md!1)")
                                                                            (("1"
                                                                              (expand
                                                                               "var_names"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "Union")
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "var_names(pre(md!1))")
                                                                                  nil)))))
                                                                             ("2"
                                                                              (inst
                                                                               1
                                                                               "md!1")
                                                                              (("2"
                                                                                (apply
                                                                                 (then
                                                                                  (replace
                                                                                   -19
                                                                                   :dir
                                                                                   rl)
                                                                                  (use
                                                                                   "lookup_mthd_in_methods_class")
                                                                                  (assert)))
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "get_class_in_classes")
                                                                        (assert)))
                                                                      nil)))))))))))))))))))
                                                   ("2"
                                                    (replace -14)
                                                    (("2"
                                                      (replace -25)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (use
                                                                     "related_states_preserved_by_raise")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "derive_bottom_iff_exception_step"
                                                                         ("p"
                                                                          "ann_program(mp!1)"))
                                                                        (("2"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           -27)
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))))))))))))
                                                             ("2"
                                                              (propax)
                                                              nil)))))))))))))))
                                               ("2"
                                                (apply
                                                 (then
                                                  (typepred "mp!1")
                                                  (expand*
                                                   "wf_MP"
                                                   "wf_Program"
                                                   "wf_program_all_variables_declared"
                                                   "ext_declared_var_names"
                                                   "declared_var_names")
                                                  (auto-rewrite
                                                   "union"
                                                   "member"
                                                   "subset?")
                                                  (assert)
                                                  (skosimp*)
                                                  (flatten)
                                                  (inst? -7)
                                                  (assert)))
                                                (("2"
                                                  (expand
                                                   "var_names"
                                                   1)
                                                  (("2"
                                                    (expand "Union")
                                                    (("2"
                                                      (inst
                                                       1
                                                       "var_names(down(get_class(program(mp!1))(a!1)))")
                                                      (("1"
                                                        (expand
                                                         "var_names"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (inst?)
                                                        (("2"
                                                          (apply
                                                           (then
                                                            (use
                                                             "get_class_in_classes")
                                                            (assert)))
                                                          nil))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil 580 2 t nil))
 (method_call_lemma_TCC1 0
  (method_call_lemma_TCC1-1 nil 3406484313 3410852382
   ("" (skosimp*)
    (("" (typepred "b!1")
      ((""
        (use "wf_Body_preserved_by_proper_subterm"
             ("b1" "b!1" "b2" "tgt(b!1)"))
        (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil))
   4488 890 t nil))
 (method_call_lemma_TCC2 0
  (method_call_lemma_TCC2-1 nil 3406484313 3410852383
   ("" (skosimp*)
    (("" (typepred "b!1")
      ((""
        (use "wf_Body_preserved_by_proper_subterm"
             ("b1" "b!1" "b2" "arg(b!1)"))
        (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil))
   977 900 t nil))
 (method_call_lemma_TCC3 0
  (method_call_lemma_TCC3-1 nil 3406484313 3410852384
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "program_pred")
            (("" (copy -11)
              (("" (copy -11)
                (("" (expand "lookup_mthd" (-1 -2))
                  (("" (lift-if)
                    (("" (assert)
                      (("" (split -2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (inst -8
                               "down(get_class(program(mp!1))(a1!1))")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst? -9)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "method_pred")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil))
   1408 1320 t nil))
 (method_call_lemma_TCC4 0
  (method_call_lemma_TCC4-2 nil 3407048471 3410852386
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (expand "program_pred")
            (("" (copy -13)
              (("" (copy -13)
                (("" (expand "lookup_mthd" (-1 -2))
                  (("" (lift-if)
                    (("" (assert)
                      (("" (split -2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (inst -8
                               "down(get_class(program(mp!1))(a1!1))")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst? -9)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "method_pred")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil))
   1413 1350 t nil)
  (method_call_lemma_TCC4-1 nil 3406484313 nil ("" (assert) nil nil)
   unfinished nil nil nil nil nil))
 (method_call_lemma_TCC5 0
  (method_call_lemma_TCC5-1 nil 3406484313 3410852386
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   779 720 t nil))
 (method_call_lemma_TCC6 0
  (method_call_lemma_TCC6-1 nil 3406484313 3410852388
   ("" (skosimp*)
    (("" (expand "id")
      (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   1035 970 t nil))
 (method_call_lemma_TCC7 0
  (method_call_lemma_TCC7-1 nil 3406484313 3410852389
   ("" (skosimp*)
    (("" (expand "id")
      (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil))
   1051 980 t nil))
 (method_call_lemma_TCC8 0
  (method_call_lemma_TCC8-1 nil 3406484313 3410852390
   ("" (skosimp*)
    (("" (expand "id")
      (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil))
   1088 970 t nil))
 (method_call_lemma_TCC9 0
  (method_call_lemma_TCC9-1 nil 3406484313 3410852391
   ("" (skosimp*)
    (("" (expand "id")
      (("" (typepred "ann_program(mp!1)")
        (("" (expand "wf_Program")
          (("" (flatten)
            (("" (expand "program_pred")
              (("" (copy -10)
                (("" (copy -10)
                  (("" (expand "lookup_mthd" (-1 -2))
                    (("" (lift-if)
                      (("" (assert)
                        (("" (split -2)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (inst
                                 -8
                                 "down(get_class(ann_program(mp!1))(a2!1))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -9)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "method_pred")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved ((id const-decl "(bijective?[T, T])" identity nil)) 762 690 t
   nil))
 (method_call_lemma_TCC10 0
  (method_call_lemma_TCC10-1 nil 3406484313 3410852393
   ("" (skosimp*)
    (("" (hide -16)
      (("" (expand "id")
        (("" (typepred "ann_program(mp!1)")
          (("" (expand "wf_Program")
            (("" (flatten)
              (("" (expand "program_pred")
                (("" (copy -11)
                  (("" (copy -11)
                    (("" (expand "lookup_mthd" (-1 -2))
                      (("" (lift-if)
                        (("" (assert)
                          (("" (split -2)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -8
                                   "down(get_class(ann_program(mp!1))(a2!1))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst? -9)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "method_pred")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   1855 1700 t nil))
 (method_call_lemma_TCC11 0
  (method_call_lemma_TCC11-1 nil 3410272625 3410852422
   ("" (subtype-tcc) nil nil) proved
   ((wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (only_JMLExc const-decl "bool" WfSetStmts nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (defined? const-decl "boolean" ValProp nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (actions_have_no_side_effects const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (catch const-decl "PState" State nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (raise const-decl "PState" State nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   29523 23880 nil nil))
 (method_call_lemma_TCC12 0
  (method_call_lemma_TCC12-1 nil 3410272625 3410852450
   ("" (subtype-tcc) nil nil) proved
   ((wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (only_JMLExc const-decl "bool" WfSetStmts nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (defined? const-decl "boolean" ValProp nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (actions_have_no_side_effects const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (catch const-decl "PState" State nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (raise const-decl "PState" State nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   27545 22110 nil nil))
 (method_call_lemma 0
  (method_call_lemma-1 nil 3406484327 3410852531
   ("" (skosimp*)
    (("" (inst-cp -7 "(m11!1, m12!1)")
      (("" (inst-cp -7 "(m21!1, m22!1)")
        (("" (assert)
          (("" (apply (repeat (inst? -9 :where (-3 -14))))
            (("" (apply (repeat (inst? -8 :where (-4 -15))))
              (("" (assert)
                (("" (split -9)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split -10)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (case "cp(astate(tauMP2!1)) = halted")
                              (("1"
                                (case "cp(astate(sMP2!1)) = halted")
                                (("1"
                                  (case
                                   "up?(ex(pstate(sAP2!1))) AND down(ex(pstate(sAP2!1))) = JMLExc")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "wf_state(mp!1)(sMP2!1)")
                                      (("1"
                                        (case
                                         "wf_state(ann_program(mp!1))(sAP2!1)")
                                        (("1"
                                          (expand "related_states")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide -13)
                                          (("2"
                                            (expand
                                             "related_states"
                                             -5)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -25)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -21)
                                        (("2"
                                          (expand "related_states" -4)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (apply
                                               (branch
                                                (split -16)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (apply
                                                   (then
                                                    (use
                                                     "wf_update_PState"
                                                     ("p" "mp!1"))
                                                    (assert)
                                                    (skosimp*)
                                                    (expand
                                                     "update_PState")
                                                    (use
                                                     "wf_state_raise")
                                                    (assert)))
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (use
                                                   "on_method_entry_yields_wf_state_MP")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "wf_state_update_stack"
                                                       ("p" "mp!1"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (use
                                                             "derive_yields_wf_state_MP")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "wf_state(mp!1)(tauMP6!1)")
                                                                (("1"
                                                                  (case
                                                                   "wf_state(mp!1)(tauMP7!1)")
                                                                  (("1"
                                                                    (replace
                                                                     -15)
                                                                    (("1"
                                                                      (use
                                                                       "wf_update_PState"
                                                                       ("p"
                                                                        "mp!1"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (expand
                                                                             "update_PState")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -7)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (expand
                                                                                   "lookup_mthd")
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -1)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "wf_state"
                                                                                           (-5
                                                                                            1
                                                                                            -24))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "wf_state"
                                                                                             (-24
                                                                                              -4))
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -26)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "is_field")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "is_local")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -11)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -13)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (use
                                                                       "on_method_exit_normal_yields_wf_state_MP")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "on_method_exit_exceptional_yields_wf_state_MP")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -11)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("2"
                                                                    (use
                                                                     "derive_yields_wf_state_MP")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -3)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("2"
                                                                (expand
                                                                 "lookup_mthd")
                                                                (("2"
                                                                  (lift-if
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (expand
                                                                         "getLocalDecls")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "down(get_class(program(mp!1))(a1!1))")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "getLocalDecls")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "md1!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -2)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("2"
                                                          (expand
                                                           "lookup_mthd")
                                                          (("2"
                                                            (lift-if
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("2"
                                                                  (expand
                                                                   "getLocalDecls")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "down(get_class(program(mp!1))(a1!1))")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "getLocalDecls")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "md1!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "related_states" -3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -19)
                                  (("2"
                                    (apply
                                     (branch
                                      (split -10)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (expand "update_PState")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (expand "lookup_mthd")
                                          (("2"
                                            (lift-if -1)
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("2"
                                                (use
                                                 "on_method_entry_preserves_related_states_halted_reached")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (use
                                                       "derive_never_leaves_halted")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "cp(astate(tauMP6!1)) = halted")
                                                          (("1"
                                                            (replace
                                                             -16)
                                                            (("1"
                                                              (expand
                                                               "update_PState")
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -15)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (use
                                                                   "on_method_exit_normal_preserves_related_states_halted_reached")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "on_method_exit_exceptional_preserves_related_states_halted_reached")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -13)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("2"
                                                              (use
                                                               "derive_never_leaves_halted")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -6)
                                                      (("2"
                                                        (expand
                                                         "update_stack")
                                                        (("2"
                                                          (expand
                                                           "update_PState")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "cp(astate(tauMP1!1)) = halted")
                                (("1"
                                  (lemma "derive_never_leaves_halted")
                                  (("1"
                                    (inst? -1 :where -10)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (replace -4)
                                      (("2"
                                        (use
                                         "related_states_implies_same_exception")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (apply
                                               (branch
                                                (split -10)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (replace -26)
                                                  (("1"
                                                    (use
                                                     "related_states_preserved_by_raise")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -19)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("2"
                                                      (apply
                                                       (branch
                                                        (split -13)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("2"
                                                        (copy -3)
                                                        (("2"
                                                          (copy -2)
                                                          (("2"
                                                            (expand
                                                             "lookup_mthd"
                                                             (-1 -2))
                                                            (("2"
                                                              (lift-if
                                                               (-1 -2))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -3)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("2"
                                                                      (use
                                                                       "lookup_mthd_ann_program"
                                                                       ("m1"
                                                                        "md1!1"
                                                                        "m2"
                                                                        "md2!1"))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "wf_state(mp!1)(tauMP3!1)")
                                                                            (("1"
                                                                              (case
                                                                               "wf_state(mp!1)(tauMP4!1)")
                                                                              (("1"
                                                                                (case
                                                                                 "wf_state(mp!1)(tauMP5!1)")
                                                                                (("1"
                                                                                  (case
                                                                                   "wf_state(mp!1)(tauMP6!1)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "wf_state(mp!1)(tauMP7!1)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "wf_state(mp!1)(sMP2!1)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "wf_state(ann_program(mp!1))(tauAP3!1)")
                                                                                        (("1"
                                                                                          (case
                                                                                           "wf_state(ann_program(mp!1))(tauAP4!1)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(ann_program(mp!1))(tauAP5!1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "wf_state(ann_program(mp!1))(tauAP6!1)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "wf_state(ann_program(mp!1))(tauAP7!1)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "wf_state(ann_program(mp!1))(sAP2!1)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "related_states(mp!1)(tauMP4!1, tauAP4!1)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "cp(astate(tauMP4!1)) = halted")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cp(astate(sMP2!1)) = halted")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "up?(ex(pstate(sAP2!1))) AND down(ex(pstate(sAP2!1))) = JMLExc")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "related_states")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "related_states"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "up?(ex(pstate(tauAP4!1))) AND down(ex(pstate(tauAP4!1))) = JMLExc")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "derive"
                                                                                                                           -34)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "up?(ex(pstate(tauAP6!1))) AND down(ex(pstate(tauAP6!1))) = JMLExc")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "up?(ex(pstate(tauAP7!1))) AND down(ex(pstate(tauAP7!1))) = JMLExc")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -43)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "update_PState")
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "on_method_exit_exceptional")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (apply
                                                                                                                                 (branch
                                                                                                                                  (split
                                                                                                                                   -38)
                                                                                                                                  ((then
                                                                                                                                    (flatten)
                                                                                                                                    (assert)
                                                                                                                                    (flatten)
                                                                                                                                    (assert)))))
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "derive"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "related_states")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "derive_never_leaves_halted")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "cp(astate(tauMP6!1)) = halted")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -44)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (branch
                                                                                                                      (split
                                                                                                                       -42)
                                                                                                                      ((then
                                                                                                                        (flatten)
                                                                                                                        (assert)
                                                                                                                        (flatten)
                                                                                                                        (assert)))))
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "on_method_exit_normal_preserves_related_states_halted_reached")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "on_method_exit_exceptional_preserves_related_states_halted_reached")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (apply
                                                                                                                 (branch
                                                                                                                  (split
                                                                                                                   -40)
                                                                                                                  ((then
                                                                                                                    (flatten)
                                                                                                                    (assert)
                                                                                                                    (flatten)
                                                                                                                    (assert)))))
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "derive_never_leaves_halted")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case-replace
                                                                                                         "body(md1!1) = body(md2!1)")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "res(md1!1) = res(md2!1)")
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "res_type(md1!1) = res_type(md2!1)")
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "lvars(md1!1) = lvars(md2!1)")
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "arg(md1!1) = arg(md2!1)")
                                                                                                                (("1"
                                                                                                                  (inst-cp
                                                                                                                   -57
                                                                                                                   "(m41!1, m42!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (repeat
                                                                                                                        (inst?
                                                                                                                         -58
                                                                                                                         :where
                                                                                                                         (-32
                                                                                                                          -41))))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -58)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "related_states(mp!1)(tauMP6!1, tauAP6!1) AND (NOT (cp(astate(tauMP6!1))) = halted IMPLIES w1!1 = w2!1)")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "cp(astate(tauMP6!1)) = halted")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "related_states"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "cp(astate(sMP2!1)) = halted")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "related_states")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "up?(ex(pstate(tauAP7!1))) AND down(ex(pstate(tauAP7!1))) = JMLExc")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -46)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "update_PState")
                                                                                                                                                        (("1"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "on_method_exit_exceptional")
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -52)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "update_PState")
                                                                                                                                                (("2"
                                                                                                                                                  (apply
                                                                                                                                                   (branch
                                                                                                                                                    (split
                                                                                                                                                     -49)
                                                                                                                                                    ((then
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)))))
                                                                                                                                                  (("1"
                                                                                                                                                    (use
                                                                                                                                                     "on_method_exit_normal_preserves_related_states_halted_reached")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (use
                                                                                                                                                     "on_method_exit_exceptional_preserves_related_states_halted_reached")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "related_states(mp!1)(tauMP7!1, tauAP7!1)")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -42)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -51)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState"
                                                                                                                                             8
                                                                                                                                             3)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               8)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "related_states"
                                                                                                                                                 (1
                                                                                                                                                  -1))
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState"
                                                                                                                                                   1
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "update_PState"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "update_PState"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (branch
                                                                                                                                                          (split
                                                                                                                                                           1)
                                                                                                                                                          ((then
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)))))
                                                                                                                                                        (("1"
                                                                                                                                                          (case-replace
                                                                                                                                                           "old_lvs1!1 = old_lvs2!1")
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "MP_modeled_preserved_by_update")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply-extensionality
                                                                                                                                                                     :hide?
                                                                                                                                                                     t)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "related_states")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -43)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -34)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "related_states"
                                                                                                                                                                 -53)
                                                                                                                                                                (("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "MP_modeled?")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "Program_modeled?")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (use
                                                                                                                                                   "related_states_implies_same_exception")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (apply
                                                                                                                                                         (branch
                                                                                                                                                          (split
                                                                                                                                                           -51)
                                                                                                                                                          ((then
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)))))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "related_states_implies_same_exception"
                                                                                                                                         ("sMP"
                                                                                                                                          "tauMP6!1"
                                                                                                                                          "sAP"
                                                                                                                                          "tauAP6!1"))
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("2"
                                                                                                                                                (apply
                                                                                                                                                 (branch
                                                                                                                                                  (split
                                                                                                                                                   -49)
                                                                                                                                                  ((then
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)))))
                                                                                                                                                (("1"
                                                                                                                                                  (apply
                                                                                                                                                   (branch
                                                                                                                                                    (split
                                                                                                                                                     -27)
                                                                                                                                                    ((then
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)))))
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "on_method_exit_normal_preserves_related_states_annotated")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -70
                                                                                                                                                             "(n1!1, n2!1)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (repeat
                                                                                                                                                                  (inst?
                                                                                                                                                                   -70
                                                                                                                                                                   :where
                                                                                                                                                                   (-3
                                                                                                                                                                    -4))))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "get_class")
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "defined?")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (use
                                                                                                                                                       "on_method_exit_normal_preserves_related_states_not_annotated")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -64
                                                                                                                                                             "(n1!1, n2!1)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (repeat
                                                                                                                                                                  (inst?
                                                                                                                                                                   -64
                                                                                                                                                                   :where
                                                                                                                                                                   (-3
                                                                                                                                                                    -4))))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "defined?")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "get_class")
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (apply
                                                                                                                                                   (branch
                                                                                                                                                    (split
                                                                                                                                                     -25)
                                                                                                                                                    ((then
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)
                                                                                                                                                      (flatten)
                                                                                                                                                      (assert)))))
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "on_method_exit_exceptional_preserves_related_states_annotated")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -68
                                                                                                                                                             "(n1!1, n2!1)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (repeat
                                                                                                                                                                  (inst?
                                                                                                                                                                   -68
                                                                                                                                                                   :where
                                                                                                                                                                   (-3
                                                                                                                                                                    -4))))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "defined?")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "get_class")
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (use
                                                                                                                                                       "on_method_exit_exceptional_preserves_related_states_not_annotated")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -62
                                                                                                                                                             "(n1!1, n2!1)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (repeat
                                                                                                                                                                  (inst?
                                                                                                                                                                   -62
                                                                                                                                                                   :where
                                                                                                                                                                   (-3
                                                                                                                                                                    -4))))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "defined?")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "get_class")
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (apply
                                                                                                                                 (branch
                                                                                                                                  (split
                                                                                                                                   -36)
                                                                                                                                  ((then
                                                                                                                                    (flatten)
                                                                                                                                    (assert)
                                                                                                                                    (flatten)
                                                                                                                                    (assert)))))
                                                                                                                                (("2"
                                                                                                                                  (inst-cp
                                                                                                                                   -59
                                                                                                                                   "(m51!1, m52!1)")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (apply
                                                                                                                                       (repeat
                                                                                                                                        (inst?
                                                                                                                                         -60
                                                                                                                                         :where
                                                                                                                                         (-1
                                                                                                                                          -45))))
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -60)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "legal_Program")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "program_pred")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -66
                                                                                                                                                 "down(get_class(ann_program(mp!1))(a2!1))")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (use
                                                                                                                                                     "get_class_in_classes")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -68
                                                                                                                                                           "md2!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "lookup_mthd_in_methods_class"
                                                                                                                                                               ("p"
                                                                                                                                                                "ann_program(mp!1)"))
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "method_pred")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (typepred
                                                                                                                                             "md1!1")
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               "wf_Method")
                                                                                                                                              (("3"
                                                                                                                                                (expand
                                                                                                                                                 "method_pred")
                                                                                                                                                (("3"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     "wf_Body"
                                                                                                                                                     -7)
                                                                                                                                                    (("3"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("3"
                                                                                                                                                        (expand
                                                                                                                                                         "subset?")
                                                                                                                                                        (("3"
                                                                                                                                                          (expand
                                                                                                                                                           "member")
                                                                                                                                                          (("3"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst?
                                                                                                                                                               -7)
                                                                                                                                                              (("3"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "legal_Program")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "program_pred")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -64
                                                                                                                                 "down(get_class(ann_program(mp!1))(a2!1))")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "get_class_in_classes")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -66
                                                                                                                                           "md2!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (use
                                                                                                                                               "lookup_mthd_in_methods_class"
                                                                                                                                               ("p"
                                                                                                                                                "ann_program(mp!1)"))
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "method_pred")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (typepred
                                                                                                                             "md1!1")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "wf_Method")
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "method_pred")
                                                                                                                                (("3"
                                                                                                                                  (flatten)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "wf_Body"
                                                                                                                                     -3)
                                                                                                                                    (("3"
                                                                                                                                      (expand*
                                                                                                                                       "subset?"
                                                                                                                                       "member")
                                                                                                                                      (("3"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("3"
                                                                                                                                          (inst?
                                                                                                                                           -3)
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (apply
                                                                                                                   (branch
                                                                                                                    (split
                                                                                                                     -18)
                                                                                                                    ((then
                                                                                                                      (flatten)
                                                                                                                      (assert)
                                                                                                                      (flatten)
                                                                                                                      (assert)))))
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "ann_method_arg")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (apply
                                                                                                                 (branch
                                                                                                                  (split
                                                                                                                   -17)
                                                                                                                  ((then
                                                                                                                    (flatten)
                                                                                                                    (assert)
                                                                                                                    (flatten)
                                                                                                                    (assert)))))
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "ann_method_lvars")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (branch
                                                                                                                (split
                                                                                                                 -16)
                                                                                                                ((then
                                                                                                                  (flatten)
                                                                                                                  (assert)
                                                                                                                  (flatten)
                                                                                                                  (assert)))))
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "ann_method_res_type")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (branch
                                                                                                              (split
                                                                                                               -15)
                                                                                                              ((then
                                                                                                                (flatten)
                                                                                                                (assert)
                                                                                                                (flatten)
                                                                                                                (assert)))))
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "ann_method_res")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             -14)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "ann_method_body")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "related_states(mp!1)(tauMP3!1, tauAP3!1)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cp(astate(tauMP3!1)) = halted")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -35)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "update_stack")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "NOT up?(ex(pstate(tauAP3!1)))")
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (branch
                                                                                                              (split
                                                                                                               -14)
                                                                                                              ((then
                                                                                                                (flatten)
                                                                                                                (assert)
                                                                                                                (flatten)
                                                                                                                (assert)))))
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "on_method_entry_preserves_related_states_annotated")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -58
                                                                                                                       "(n1!1, n2!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (inst?
                                                                                                                             -58
                                                                                                                             :where
                                                                                                                             (-3
                                                                                                                              -4))))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "get_class")
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "defined?")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "on_method_entry_preserves_related_states_not_annotated")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -57
                                                                                                                     "(n1!1, n2!1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -57
                                                                                                                           :where
                                                                                                                           (-3
                                                                                                                            -4))))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "get_class")
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "defined?")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -25)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "update_stack")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "o")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "update_local")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -33)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -23)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "arg(md1!1) = arg(md2!1)")
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "lvars(md1!1) = lvars(md2!1)")
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "related_states_preserved_by_update_stack")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "getLocalDecls")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "down(get_class(program(mp!1))(a2!1))")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (use
                                                                                                                             "get_class_in_classes")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "md1!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (use
                                                                                                                                       "lookup_mthd_in_methods_class")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "getLocalDecls")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "down(get_class(program(mp!1))(a2!1))")
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "get_class_in_classes")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "getLocalDecls")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "md1!1")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "lookup_mthd_in_methods_class")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (apply
                                                                                                                 (branch
                                                                                                                  (split
                                                                                                                   -14)
                                                                                                                  ((then
                                                                                                                    (flatten)
                                                                                                                    (assert)
                                                                                                                    (flatten)
                                                                                                                    (assert)))))
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "ann_method_lvars")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (apply
                                                                                                               (branch
                                                                                                                (split
                                                                                                                 -13)
                                                                                                                ((then
                                                                                                                  (flatten)
                                                                                                                  (assert)
                                                                                                                  (flatten)
                                                                                                                  (assert)))))
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "ann_method_arg")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -30)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_update_PState"
                                                                                                       ("p"
                                                                                                        "ann_program(mp!1)"))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "related_states"
                                                                                                               -42)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "wf_state"
                                                                                                                   (-2
                                                                                                                    -43))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "wf_state"
                                                                                                                     (1
                                                                                                                      -2
                                                                                                                      -43))
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst?
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (inst?
                                                                                                                           -44)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "is_local")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "is_field")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -23)
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     -27)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     "on_method_exit_normal"
                                                                                                     "check_assertion")
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "derive_yields_wf_state_AP")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "derive_yields_wf_state_AP")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               -10)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "derive_yields_wf_state_AP")
                                                                                                                (("1"
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -14)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -15)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_update_PState"
                                                                                                                                     ("p"
                                                                                                                                      "ann_program(mp!1)"))
                                                                                                                                    (assert)
                                                                                                                                    (skosimp*)
                                                                                                                                    (expand
                                                                                                                                     "update_PState")
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (lift-if)
                                                                                                                            (assert)
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (skosimp*)
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (skosimp*)))
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"))
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"))
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (typepred
                                                                                                                     "md2!1")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "wf_Method")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "method_pred")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (inst?
                                                                                                                             -2)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "ann_program(mp!1)")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "wf_Program")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "program_pred")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -5
                                                                                                                           "down(get_class(ann_program(mp!1))(a2!1))")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (use
                                                                                                                               "get_class_in_classes")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "lookup_inv")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "id")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (typepred
                                                                                                             "md2!1")
                                                                                                            (expand*
                                                                                                             "wf_Method"
                                                                                                             "method_pred")
                                                                                                            (flatten)))
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -5)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand*
                                                                                                     "on_method_exit_exceptional"
                                                                                                     "check_assertion")
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (branch
                                                                                                        (split
                                                                                                         -1)
                                                                                                        ((then
                                                                                                          (flatten)
                                                                                                          (assert)
                                                                                                          (flatten)
                                                                                                          (assert)))))
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "derive_yields_wf_state_AP")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "derive_yields_wf_state_AP")
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -1
                                                                                                                 :where
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(ann_program(mp!1))(tau2!1)")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (lift-if)
                                                                                                                            (assert)
                                                                                                                            (split
                                                                                                                             3)
                                                                                                                            (skosimp*)
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (skosimp*)))
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"))
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -9)
                                                                                                                        (("2"
                                                                                                                          (apply
                                                                                                                           (then
                                                                                                                            (lift-if)
                                                                                                                            (assert)
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (skosimp*)
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (skosimp*)))
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"))
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "wf_update_PState"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"))
                                                                                                                              (assert)
                                                                                                                              (skosimp*)
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (use
                                                                                                                               "wf_state_raise")
                                                                                                                              (assert)))
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (apply
                                                                                                                         (then
                                                                                                                          (use
                                                                                                                           "wf_update_PState"
                                                                                                                           ("p"
                                                                                                                            "ann_program(mp!1)"))
                                                                                                                          (assert)
                                                                                                                          (skosimp*)
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (use
                                                                                                                           "wf_state_catch")
                                                                                                                          (assert)))
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "ann_program(mp!1)")
                                                                                                                  (("2"
                                                                                                                    (expand*
                                                                                                                     "wf_Program"
                                                                                                                     "program_pred")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -5
                                                                                                                         "down(get_class(ann_program(mp!1))(a2!1))")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "get_class_in_classes")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "lookup_inv")
                                                                                                                                  (("2"
                                                                                                                                    (lift-if)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "id")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (typepred
                                                                                                               "md2!1")
                                                                                                              (expand*
                                                                                                               "wf_Method"
                                                                                                               "method_pred")
                                                                                                              (flatten)))
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -6)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -25)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "derive_yields_wf_state_AP")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (typepred
                                                                                                       "md2!1")
                                                                                                      (expand*
                                                                                                       "wf_Method"
                                                                                                       "method_pred")
                                                                                                      (flatten)))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "derive_yields_wf_state_AP")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -1
                                                                                                 :where
                                                                                                 -23)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (typepred
                                                                                                     "md2!1")
                                                                                                    (expand*
                                                                                                     "wf_Method"
                                                                                                     "method_pred")
                                                                                                    (flatten)))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand*
                                                                                             "on_method_entry"
                                                                                             "check_assertion")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "derive_yields_wf_state_AP")
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -21)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -12
                                                                                                     :where
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "derive_yields_wf_state_AP")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1
                                                                                                           :where
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "derive_yields_wf_state_AP")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -9)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (then
                                                                                                                        (lift-if)
                                                                                                                        (assert)
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (skosimp*)
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (skosimp*)))
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (then
                                                                                                                          (use
                                                                                                                           "wf_update_PState"
                                                                                                                           ("p"
                                                                                                                            "ann_program(mp!1)"))
                                                                                                                          (assert)
                                                                                                                          (skosimp*)
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (use
                                                                                                                           "wf_state_raise")
                                                                                                                          (assert)))
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply
                                                                                                                         (then
                                                                                                                          (use
                                                                                                                           "wf_update_PState"
                                                                                                                           ("p"
                                                                                                                            "ann_program(mp!1)"))
                                                                                                                          (assert)
                                                                                                                          (skosimp*)
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (use
                                                                                                                           "wf_state_raise")
                                                                                                                          (assert)))
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (apply
                                                                                                                       (then
                                                                                                                        (lift-if)
                                                                                                                        (assert)
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (skosimp*)
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (skosimp*)))
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (then
                                                                                                                          (use
                                                                                                                           "wf_update_PState"
                                                                                                                           ("p"
                                                                                                                            "ann_program(mp!1)"))
                                                                                                                          (assert)
                                                                                                                          (skosimp*)
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (use
                                                                                                                           "wf_state_raise")
                                                                                                                          (assert)))
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply
                                                                                                                         (then
                                                                                                                          (use
                                                                                                                           "wf_update_PState"
                                                                                                                           ("p"
                                                                                                                            "ann_program(mp!1)"))
                                                                                                                          (assert)
                                                                                                                          (skosimp*)
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (use
                                                                                                                           "wf_state_raise")
                                                                                                                          (assert)))
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (apply
                                                                                                                 (then
                                                                                                                  (typepred
                                                                                                                   "md2!1")
                                                                                                                  (expand*
                                                                                                                   "wf_Method"
                                                                                                                   "method_pred")
                                                                                                                  (flatten)))
                                                                                                                (("2"
                                                                                                                  (inst?
                                                                                                                   -4)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (typepred
                                                                                                               "md2!1")
                                                                                                              (expand*
                                                                                                               "wf_Method"
                                                                                                               "method_pred")
                                                                                                              (flatten)))
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (typepred
                                                                                                       "ann_program(mp!1)")
                                                                                                      (("3"
                                                                                                        (expand*
                                                                                                         "wf_Program"
                                                                                                         "program_pred")
                                                                                                        (("3"
                                                                                                          (flatten)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -5
                                                                                                             "down(get_class(ann_program(mp!1))(a2!1))")
                                                                                                            (("3"
                                                                                                              (use
                                                                                                               "get_class_in_classes")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (expand*
                                                                                                                     "lookup_inv"
                                                                                                                     "id")
                                                                                                                    (("3"
                                                                                                                      (lift-if)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -17)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_state_update_stack"
                                                                                             ("p"
                                                                                              "ann_program(mp!1)"))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "getLocalDecls")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "down(get_class(ann_program(mp!1))(a2!1))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "get_class_in_classes")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "getLocalDecls")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "md2!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "lookup_mthd_in_methods_class"
                                                                                                                     ("p"
                                                                                                                      "ann_program(mp!1)"))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "related_states")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "getLocalDecls")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "down(get_class(ann_program(mp!1))(a2!1))")
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "get_class_in_classes")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "getLocalDecls")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "md2!1")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "lookup_mthd_in_methods_class"
                                                                                                             ("p"
                                                                                                              "ann_program(mp!1)"))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -33)
                                                                                        (("2"
                                                                                          (use
                                                                                           "wf_update_PState"
                                                                                           ("p"
                                                                                            "mp!1"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "related_states"
                                                                                                   -36)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "wf_state"
                                                                                                       (-36
                                                                                                        -2))
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "wf_state"
                                                                                                         (-36
                                                                                                          -2
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -39)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -28)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "is_field")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "is_local")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -30)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (use
                                                                                         "on_method_exit_normal_yields_wf_state_MP")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "on_method_exit_exceptional_yields_wf_state_MP")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -28)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("2"
                                                                                      (use
                                                                                       "derive_yields_wf_state_MP")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_yields_wf_state_MP")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "on_method_entry_yields_wf_state_MP")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               "wf_state_update_stack"
                                                                               ("p"
                                                                                "mp!1"))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "getLocalDecls")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "down(get_class(program(mp!1))(a2!1))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (use
                                                                                             "get_class_in_classes")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "getLocalDecls")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "md1!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "lookup_mthd_in_methods_class")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "related_states")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "getLocalDecls")
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "down(get_class(program(mp!1))(a2!1))")
                                                                                    (("2"
                                                                                      (use
                                                                                       "get_class_in_classes")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "getLocalDecls")
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "md1!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "lookup_mthd_in_methods_class")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (use "legal_Body_preserved_by_proper_subterm"
                               ("b1" "b!1" "b2" "arg(b!1)"))
                          (("2" (assert)
                            (("2" (expand "<<")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("3"
                          (apply (then
                                  (use
                                   "subterm_subset_of_var"
                                   ("b1" "b!1" "b2" "arg(b!1)"))
                                  (expand "<<")
                                  (assert)
                                  (assert)))
                          nil nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (use "legal_Body_preserved_by_proper_subterm"
                         ("b1" "b!1" "b2" "tgt(b!1)"))
                    (("2" (assert)
                      (("2" (expand "<<") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3"
                    (apply (then
                            (use "subterm_subset_of_var"
                                 ("b1" "b!1" "b2" "tgt(b!1)"))
                            (expand "<<") (assert) (assert)))
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (legal_Body_preserved_by_proper_subterm formula-decl nil
     LegalProgramRestriction nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil)
    (update_stack const-decl "FullState" Semantics nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_preserves_related_states_halted_reached
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (on_method_exit_normal_preserves_related_states_halted_reached
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (on_method_entry_preserves_related_states_halted_reached
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (related_states const-decl "boolean" Equivalence nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state_raise formula-decl nil State nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt
     nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (on_method_entry_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt
     nil)
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics
     nil)
    (md1!1 skolem-const-decl "(wf_Method(program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     MethodCallsPreserveRelatedState nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (on_method_exit_exceptional_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt
     nil)
    (on_method_exit_normal_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (lookup_mthd_ann_program formula-decl nil AnnotateProgramProperties
     nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_preserves application-judgement "S" identity_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (inv!1 skolem-const-decl "(wf_BoolExpr(id(ann_program(mp!1))))"
     MethodCallsPreserveRelatedState nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lookup_inv const-decl "BoolExpr" ProgramFunctions nil)
    (w2!1 skolem-const-decl "Val[Name]" MethodCallsPreserveRelatedState
     nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (catch const-decl "PState" State nil)
    (tauAP6!1 skolem-const-decl "APState[Name]"
     MethodCallsPreserveRelatedState nil)
    (wf_state_catch formula-decl nil State nil)
    (inv!1 skolem-const-decl "(wf_BoolExpr(id(ann_program(mp!1))))"
     MethodCallsPreserveRelatedState nil)
    (on_method_entry_preserves_related_states_not_annotated
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (on_method_entry_preserves_related_states_annotated formula-decl
     nil MethodCallsPreserveRelatedState nil)
    (O const-decl "T3" function_props nil)
    (update_local const-decl "PState" State nil)
    (md2!1 skolem-const-decl "(wf_Method(ann_program(mp!1)))"
     MethodCallsPreserveRelatedState nil)
    (related_states_preserved_by_update_stack formula-decl nil
     RelatedStatesProperties nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (ann_method_body formula-decl nil AnnotateMethod nil)
    (ann_method_res_type formula-decl nil AnnotateMethod nil)
    (ann_method_arg formula-decl nil AnnotateMethod nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MP_modeled_preserved_by_update formula-decl nil
     RelatedStatesProperties nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (on_method_exit_exceptional_preserves_related_states_annotated
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (on_method_exit_exceptional_preserves_related_states_not_annotated
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (on_method_exit_normal_preserves_related_states_annotated
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (a2!1 skolem-const-decl "Val[Name]" MethodCallsPreserveRelatedState
     nil)
    (on_method_exit_normal_preserves_related_states_not_annotated
     formula-decl nil MethodCallsPreserveRelatedState nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions
     nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (ann_method_lvars formula-decl nil AnnotateMethod nil)
    (ann_method_res formula-decl nil AnnotateMethod nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (pv2!1 skolem-const-decl "Val[Name]"
     MethodCallsPreserveRelatedState nil)
    (m1!1 skolem-const-decl "nat" MethodCallsPreserveRelatedState nil)
    (inv!1 skolem-const-decl "(wf_BoolExpr(id(ann_program(mp!1))))"
     MethodCallsPreserveRelatedState nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MethodCallsPreserveRelatedState
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil))
   81282 69400 t shostak)))
(CorrectnessAnnProgram
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396605539 3410851804
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil CorrectnessAnnProgram nil))
   589 590 t nil))
 (IMP_MethodCallsPreserveRelatedState_TCC1 0
  (IMP_MethodCallsPreserveRelatedState_TCC1-1 nil 3398689934 3410851805
   ("" (use "CP_is_enumerable") nil nil) proved
   ((CP_is_enumerable formula-decl nil CorrectnessAnnProgram nil)) 647
   590 t nil))
 (IMP_MethodCallsPreserveRelatedState_TCC2 0
  (IMP_MethodCallsPreserveRelatedState_TCC2-1 nil 3398689934 3410851805
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil CorrectnessAnnProgram nil)) 673
   590 t nil))
 (initial_states_are_equivalent 0
  (initial_states_are_equivalent-2 nil 3396612347 3410851849
   ("" (skosimp*)
    (("" (expand "related_states")
      (("" (typepred "mp!1")
        (("" (split 1)
          (("1" (use "wf_initial_MP_state") (("1" (assert) nil nil))
            nil)
           ("2" (typepred "ann_program(mp!1)")
            (("2" (use "wf_initial_AP_state") nil nil)) nil)
           ("3"
            (expand* "initial_MP_state" "initial_AP_state"
             "initial_MVA_state")
            (("3" (skosimp*)
              (("3" (expand* "wf_MP" "wf_MVA")
                (("3" (flatten) nil nil)) nil))
              nil))
            nil)
           ("4"
            (expand* "initial_MP_state" "initial_AP_state"
             "initial_MVA_state" "initial_Program_state"
             "related_states" "MP_modeled?" "MVA_modeled?"
             "Program_modeled?" "Program_gvs_modeled?")
            (("4" (skosimp*)
              (("4" (split 2)
                (("1" (expand "MVA_cp_modeled?")
                  (("1"
                    (case-replace
                     "get_GhostDecl(cp(mp!1), ann_program(mp!1)) = up(new_cp_gvd(mp!1))")
                    (("1" (expand "new_cp_gvd")
                      (("1" (propax) nil nil)) nil)
                     ("2" (hide 2)
                      (("2" (expand "get_GhostDecl")
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2"
                              (rewrite
                               "ann_program_add_ghost_var_decls")
                              (("2"
                                (case
                                 "defined?[Name](Int[Name](unique[CP, Name](init_cp(mva(mp!1)))))")
                                (("1"
                                  (case-replace
                                   "{g: FieldDecl[Name] |
                                                                  union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                                                                       (g)
                                                                   AND name(g) = cp(mp!1)} = union({g: FieldDecl[Name] |
                                                                        (getGhostDecls(program(mp!1))(g) AND name(g) = cp(mp!1))}, {g: FieldDecl[Name] |
                                                                        (new_gvds(mp!1)(g) AND
                                                                         name(g) = cp(mp!1))})"
                                   :hide?
                                   t)
                                  (("1"
                                    (case-replace
                                     "{g_1: FieldDecl[Name] |
                                                                                          (getGhostDecls(program(mp!1))(g_1) AND
                                                                                            name(g_1) = cp(mp!1))} = emptyset[FieldDecl[Name]]"
                                     :hide?
                                     t)
                                    (("1"
                                      (rewrite "union_commutative")
                                      (("1"
                                        (rewrite "union_empty")
                                        (("1"
                                          (case-replace
                                           "{g: FieldDecl[Name] |
                                        (new_gvds(mp!1)(g) AND name(g) = cp(mp!1))} = singleton(new_cp_gvd(mp!1))")
                                          (("1"
                                            (rewrite
                                             "choose_singleton")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (rewrite
                                                 "nonempty_exists")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("2"
                                                (expand "singleton")
                                                (("2"
                                                  (expand "new_gvds")
                                                  (("2"
                                                    (auto-rewrite
                                                     "add"
                                                     "union"
                                                     "member")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "new_cps_gvds")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (typepred
                                                                     "name_of(mp!1)(q!1)")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "cp(mp!1)")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "new_cp_gvd")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "emptyset")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (typepred "cp(mp!1)")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (auto-rewrite
                                         ("add" "union" "member"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (iff)
                                            (("2" (prop) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "MVA_cps_modeled?")
                  (("2" (skosimp*)
                    (("2"
                      (case-replace
                       "get_GhostDecl(name_of(mp!1)(q!1), ann_program(mp!1)) = up((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #))"
                       :hide? t)
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "get_GhostDecl")
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (rewrite
                                 "ann_program_add_ghost_var_decls")
                                (("2"
                                  (case
                                   "defined?[Name](Int[Name](unique[CP, Name](q!1)))")
                                  (("1"
                                    (case-replace
                                     "{g: FieldDecl[Name] |
                                                              union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                                                                   (g)
                                                               AND name(g) = name_of(mp!1)(q!1)} = union({g: FieldDecl[Name] |
                                                              getGhostDecls(program(mp!1))(g) AND name(g) = name_of(mp!1)(q!1)}, {g: FieldDecl[Name] |
                                                              new_gvds(mp!1)
                                                                   (g)
                                                               AND name(g) = name_of(mp!1)(q!1)})"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{g: FieldDecl[Name] |
                                                                              getGhostDecls(program(mp!1))(g) AND
                                                                               name(g) = name_of(mp!1)(q!1)} = emptyset[FieldDecl[Name]]"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "union_commutative")
                                        (("1"
                                          (rewrite "union_empty")
                                          (("1"
                                            (case-replace
                                             "{g_1: FieldDecl[Name] |
                                        new_gvds(mp!1)(g_1) AND
                                         name(g_1) = name_of(mp!1)(q!1)} =  add((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #), emptyset[FieldDecl[Name]])"
                                             :hide?
                                             t)
                                            (("1"
                                              (expand "nonempty?")
                                              (("1"
                                                (rewrite
                                                 "nonempty_add")
                                                (("1"
                                                  (rewrite
                                                   "singleton_as_add"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (rewrite
                                                     "choose_singleton")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (expand*
                                                   "new_gvds"
                                                   "new_cps_gvds")
                                                  (("2"
                                                    (auto-rewrite
                                                     "add"
                                                     "emptyset"
                                                     "member"
                                                     "union")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (typepred
                                                                 "name_of(mp!1)(q!1)")
                                                                (("1"
                                                                  (expand
                                                                   "legal_names")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "new_cp_gvd")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (expand*
                                                                   "wf_MP"
                                                                   "wf_Program")
                                                                  (("2"
                                                                    (typepred
                                                                     "name_of(mp!1)")
                                                                    (("2"
                                                                      (expand
                                                                       "injective?")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "q!1"
                                                                         "q!2")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             :hide?
                                                                             t)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (use
                                                                 "wf_new_vars")
                                                                (("3"
                                                                  (expand
                                                                   "new_mva_vars_gvds")
                                                                  (("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (typepred
                                                                       "v!1")
                                                                      (("3"
                                                                        (inst?
                                                                         -4)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (inst?
                                                                             -4)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst?
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (apply-extensionality
                                           :hide?
                                           t)
                                          (("2"
                                            (expand "emptyset")
                                            (("2"
                                              (typepred
                                               "name_of(mp!1)(q!1)")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (auto-rewrite
                                           ("union" "member"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2" (prop) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "MVA_vars_modeled?")
                  (("3" (skosimp*)
                    (("3" (split -1)
                      (("1" (expand "defined?")
                        (("1" (propax) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2"
                            (case-replace
                             "get_GhostDecl(n!1, ann_program(mp!1)) = up((# jtype := jtype(down(get_MVAVarDecl(n!1, mva(mp!1)))), name := name(down(get_MVAVarDecl(n!1, mva(mp!1)))), init_val := init_val(down(get_MVAVarDecl(n!1, mva(mp!1)))) #))")
                            (("1" (assert) nil nil)
                             ("2" (hide 3)
                              (("2"
                                (expand "get_GhostDecl")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite
                                       "ann_program_add_ghost_var_decls")
                                      (("2"
                                        (case-replace
                                         "({g: FieldDecl[Name] |
                                                  union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                                                       (g)
                                                   AND name(g) = n!1}) = union({g: FieldDecl[Name] |
                                                  getGhostDecls(program(mp!1))(g)
                                                   AND name(g) = n!1}, {g: FieldDecl[Name] |
                                                  new_gvds(mp!1)(g)
                                                   AND name(g) = n!1})"
                                         :hide?
                                         t)
                                        (("1"
                                          (case-replace
                                           " {g: FieldDecl[Name] |
                                                              getGhostDecls(program(mp!1))(g) AND
                                                               name(g) = n!1} = emptyset[FieldDecl[Name]]"
                                           :hide?
                                           t)
                                          (("1"
                                            (rewrite
                                             "union_commutative")
                                            (("1"
                                              (rewrite "union_empty")
                                              (("1"
                                                (case-replace
                                                 "{g_1: FieldDecl[Name] |
                                        new_gvds(mp!1)(g_1) AND name(g_1) = n!1} = add((# jtype := jtype(down(get_MVAVarDecl(n!1, mva(mp!1)))),
                                                                name := name(down(get_MVAVarDecl(n!1, mva(mp!1)))),
                                                                init_val
                                                                  := init_val(down(get_MVAVarDecl(n!1, mva(mp!1)))) #), emptyset[FieldDecl[Name]])"
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (expand "nonempty?")
                                                  (("1"
                                                    (rewrite
                                                     "nonempty_add")
                                                    (("1"
                                                      (rewrite
                                                       "add_as_union")
                                                      (("1"
                                                        (rewrite
                                                         "union_commutative")
                                                        (("1"
                                                          (rewrite
                                                           "union_empty")
                                                          (("1"
                                                            (rewrite
                                                             "choose_singleton")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand*
                                                       "new_gvds"
                                                       "new_mva_vars_gvds")
                                                      (("2"
                                                        (auto-rewrite
                                                         ("add"
                                                          "member"
                                                          "union"
                                                          "emptyset"))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (iff)
                                                            (("2"
                                                              (expand
                                                               "get_MVAVarDecl")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "defined?")
                                                                              (("1"
                                                                                (typepred
                                                                                 "cp(mp!1)")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "new_cps_gvds")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "name_of(mp!1)(q!1)")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (typepred
                                                                                 "v!1")
                                                                                (("3"
                                                                                  (typepred
                                                                                   "mp!1")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "wf_MP")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_MVA")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "wf_vdsA")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -3
                                                                                             "choose({vd: MVAVarDecl[CP, Name] |
                                                                                        vdsA(mva(mp!1))(vd) AND name(vd) = n!1})"
                                                                                             "v!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (apply-extensionality
                                                                                                   1
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "nonempty?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?
                                                                                 3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("2"
                                                (auto-rewrite
                                                 ("union"
                                                  "add"
                                                  "member"
                                                  "emptyset"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "getGhostDecls")
                                                    (("2"
                                                      (typepred "mp!1")
                                                      (("2"
                                                        (expand
                                                         "compatible")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "MVA_aut_vars_are_not_prog_vars")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "down(get_MVAVarDecl(n!1, mva(mp!1)))")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "get_MVAVarDecl")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "ext_declared_var_names")
                                                                            (("2"
                                                                              (expand
                                                                               "getGhostDecls")
                                                                              (("2"
                                                                                (expand
                                                                                 "var_names")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       4
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("2"
                                              (auto-rewrite
                                               "add"
                                               "union"
                                               "emptyset"
                                               "member")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (iff)
                                                  (("2"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (use " ann_program_preserves_var_decls")
                  (("4" (flatten)
                    (("4" (apply-extensionality :hide? t)
                      (("1" (expand "get_FieldDecl")
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil)
                       ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (use " ann_program_preserves_var_decls")
                  (("5" (flatten)
                    (("5" (apply-extensionality :hide? t)
                      (("1" (lift-if)
                        (("1" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (skosimp*)
                            (("2" (assert)
                              (("2"
                                (expand "get_LocalDecl")
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*) (("2" (assert) nil nil)) nil)
                       ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (use " ann_program_preserves_var_decls")
                          (("2" (flatten)
                            (("2" (auto-rewrite "subset?" "member")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "get_GhostDecl")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "nonempty_exists")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (typepred "x!1")
                                                    (("1"
                                                      (inst -5 "x!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (rewrite
                                                               "ann_program_add_ghost_var_decls")
                                                              (("1"
                                                                (case-replace
                                                                 " {g_1: FieldDecl[Name] | union(getGhostDecls(program(mp!1)), new_gvds(mp!1))(g_1)
                                                    AND name(g_1) = n!1} = {g_1: FieldDecl[Name] |
                                                   getGhostDecls(program(mp!1))(g_1)
                                                    AND name(g_1) = n!1}"
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (auto-rewrite
                                                                       "union"
                                                                       "member")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (iff)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "wf_new_vars")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (auto-rewrite
                                                                                         "disjoint?"
                                                                                         "intersection"
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -5
                                                                                             "n!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "var_names")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "declared_var_names")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "var_names")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         3
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (rewrite
                                                               "nonempty_exists")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "x!1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((related_states const-decl "boolean" Equivalence nil)
    (wf_initial_MP_state formula-decl nil MonitoredProgramSemantics
     nil)
    (wf_initial_AP_state formula-decl nil AnnotatedProgramSemantics
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (initial_MVA_state const-decl "AState" MVASemantics nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (This const-decl "Name" Program nil)
    (get_LocalDecl const-decl "lift[LocalVarDecl]" ProgramFunctions
     nil)
    (ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bottom adt-constructor-decl "(Bottom?)" Val_adt nil)
    (get_FieldDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (n!1 skolem-const-decl "Name" CorrectnessAnnProgram nil)
    (choose const-decl "(p)" sets nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (get_MVAVarDecl const-decl "lift[MVAVarDecl]" MVASemantics nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (q!1 skolem-const-decl "CP" CorrectnessAnnProgram nil)
    (singleton_as_add formula-decl nil sets_lemmas nil)
    (nonempty_add formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     CorrectnessAnnProgram nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (only_JMLExc const-decl "bool" WfSetStmts nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (subset? const-decl "bool" sets nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (up adt-constructor-decl "[T -> (up?)]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (get_GhostDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (initial_Program_state const-decl "PState" State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (CP formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   44049 31840 t nil)
  (initial_states_are_equivalent-1 nil 3394358076 3396612304
   ("" (skosimp*)
    ((""
      (expand* "initial_MP_state" "initial_AP_state"
       "initial_MVA_state" "initial_Program_state" "related_states"
       "MP_modeled?" "MVA_modeled?" "Program_modeled?")
      (("" (split 1)
        (("1" (expand "MVA_cp_modeled?")
          (("1"
            (case-replace
             "get_GhostDecl(cp(mp!1), ann_program(mp!1)) = up((# jtype := IntType, name := cp(mp!1), init_val := Int(unique(init_cp(mva(mp!1)))) #))"
             :hide? t)
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (expand "get_GhostDecl")
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (rewrite "ann_program_add_ghost_var_decls")
                      (("2"
                        (case "defined?[Name](Int[Name](unique[CP, Name](init_cp(mva(mp!1)))))")
                        (("1"
                          (case-replace "{g: FieldDecl[Name] |
                      union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                           (g)
                       AND name(g) = cp(mp!1)} = union({g: FieldDecl[Name] |
                            (getGhostDecls(program(mp!1))(g) AND name(g) = cp(mp!1))}, {g: FieldDecl[Name] |
                            (new_gvds(mp!1)(g) AND
                             name(g) = cp(mp!1))})" :hide? t)
                          (("1"
                            (case-replace "{g_1: FieldDecl[Name] |
                                    (getGhostDecls(program(mp!1))(g_1) AND
                                      name(g_1) = cp(mp!1))} = emptyset[FieldDecl[Name]]"
                             :hide? t)
                            (("1" (rewrite "union_commutative")
                              (("1"
                                (rewrite "union_empty")
                                (("1"
                                  (case-replace
                                   "{g: FieldDecl[Name] |
                                      (new_gvds(mp!1)(g) AND name(g) = cp(mp!1))} = add((# jtype := IntType, name := cp(mp!1),
                             init_val := Int(unique(init_cp(mva(mp!1)))) #), union({gd : FieldDecl | EXISTS (q : (cps(mva(mp!1)))) :
                                                name(gd) = name_of(mp!1)(q) AND
                                                jtype(gd) = IntType AND
                                                init_val(gd) = Int(unique(q)) AND name(gd) = cp(mp!1)},
                            {gd : FieldDecl | EXISTS (v : (vdsA(mva(mp!1)))) :
                                                name(gd) = name(v) AND
                                                jtype(gd) = jtype(v) AND
                                                init_val(gd) = init_val(v) AND name(gd) = cp(mp!1)}))"
                                   :hide?
                                   t)
                                  (("1"
                                    (case-replace
                                     "{gd: FieldDecl |
                                            EXISTS (q: (cps(mva(mp!1)))):
                                              name(gd) = name_of(mp!1)(q) AND
                                               jtype(gd) = IntType AND
                                                init_val(gd) = Int(unique(q)) AND
                                                 name(gd) = cp(mp!1)} = emptyset[FieldDecl[Name]]"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{gd_1: FieldDecl |
                                              EXISTS (v: (vdsA(mva(mp!1)))):
                                                name(gd_1) = name(v) AND
                                                 jtype(gd_1) = jtype(v) AND
                                                  init_val(gd_1) = init_val(v) AND
                                                   name(gd_1) = cp(mp!1)} = emptyset[FieldDecl[Name]]")
                                      (("1"
                                        (rewrite "union_empty")
                                        (("1"
                                          (expand "nonempty?")
                                          (("1"
                                            (rewrite
                                             "nonempty_add[FieldDecl[Name]]")
                                            (("1"
                                              (rewrite "add_as_union")
                                              (("1"
                                                (rewrite
                                                 "union_commutative")
                                                (("1"
                                                  (rewrite
                                                   "union_empty")
                                                  (("1"
                                                    (rewrite
                                                     "choose_singleton")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (apply-extensionality
                                           :hide?
                                           t)
                                          (("2"
                                            (expand "emptyset")
                                            (("2"
                                              (use "wf_new_vars")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (typepred "v!1")
                                                    (("2"
                                                      (inst? -3)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case-replace
                                                           "x!1 = v!1")
                                                          (("2"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "emptyset")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (use "wf_new_vars")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite "new_gvds_as_union")
                                      (("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (auto-rewrite
                                           ("add" "union" "member"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil)
                                                 ("3" (assert) nil nil)
                                                 ("4"
                                                  (assert)
                                                  (("4"
                                                    (skosimp*)
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5" (assert) nil nil)
                                                 ("6"
                                                  (skosimp*)
                                                  (("6"
                                                    (inst? 3)
                                                    (("6"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (skosimp*)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (apply-extensionality :hide? t)
                                (("2"
                                  (expand "emptyset")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (typepred "cp(mp!1)")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (apply-extensionality :hide? t)
                              (("2"
                                (auto-rewrite ("add" "union" "member"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (iff)
                                    (("2" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "every") (("3" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "MVA_cps_modeled?")
          (("2" (skosimp*)
            (("2"
              (case-replace
               "get_GhostDecl(name_of(mp!1)(q!1), ann_program(mp!1)) = up((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #))"
               :hide? t)
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand "get_GhostDecl")
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (rewrite "ann_program_add_ghost_var_decls")
                        (("2"
                          (case-replace "{g: FieldDecl[Name] |
                      union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                           (g)
                       AND name(g) = name_of(mp!1)(q!1)} = union({g: FieldDecl[Name] |
                      getGhostDecls(program(mp!1))(g) AND name(g) = name_of(mp!1)(q!1)}, {g: FieldDecl[Name] |
                      new_gvds(mp!1)
                           (g)
                       AND name(g) = name_of(mp!1)(q!1)})" :hide? t)
                          (("1"
                            (case-replace "{g: FieldDecl[Name] |
                            getGhostDecls(program(mp!1))(g) AND
                             name(g) = name_of(mp!1)(q!1)} = emptyset[FieldDecl[Name]]"
                             :hide? t)
                            (("1" (rewrite "union_commutative")
                              (("1"
                                (rewrite "union_empty")
                                (("1"
                                  (rewrite "new_gvds_as_union")
                                  (("1"
                                    (case-replace
                                     "{g_1: FieldDecl[Name] |
                      add((# jtype := IntType,
                             name := cp(mp!1),
                             init_val
                               := Int(unique(init_cp(mva(mp!1)))) #),
                          union({gd: FieldDecl[Name] |
                                   EXISTS (q: (cps(mva(mp!1)))):
                                     name(gd) = name_of(mp!1)(q) AND
                                      jtype(gd) = IntType AND
                                       init_val(gd) = Int(unique(q))},
                                {gd: FieldDecl[Name] |
                                   EXISTS (v: (vdsA(mva(mp!1)))):
                                     name(gd) = name(v) AND
                                      jtype(gd) = jtype(v) AND
                                       init_val(gd) = init_val(v)}))
                         (g_1)
                       AND name(g_1) = name_of(mp!1)(q!1)} = {gd: FieldDecl[Name] |
                                     name(gd) = name_of(mp!1)(q!1) AND
                                      jtype(gd) = IntType AND
                                       init_val(gd) = Int(unique(q!1))}"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{gd: FieldDecl[Name] |
                      name(gd) = name_of(mp!1)(q!1) AND
                       jtype(gd) = IntType AND
                        init_val(gd) = Int(unique(q!1))} = add((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #), emptyset[FieldDecl[Name]])"
                                       :hide?
                                       t)
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (rewrite "nonempty_add")
                                          (("1"
                                            (rewrite
                                             "singleton_as_add"
                                             :dir
                                             rl)
                                            (("1"
                                              (rewrite
                                               "choose_singleton")
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil))
                                      nil)
                                     ("2" (postpone) nil nil)
                                     ("3" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (postpone) nil nil))
              nil))
            nil))
          nil)
         ("3" (postpone) nil nil) ("4" (postpone) nil nil)
         ("5" (postpone) nil nil) ("6" (postpone) nil nil)
         ("7" (postpone) nil nil))
        nil))
      nil))
    nil)
   unfinished nil 203163 4418 t shostak))
 (derive_preserves_related_states_for_unchanged_program_TCC1 0
  (derive_preserves_related_states_for_unchanged_program_TCC1-2 nil
   3409334817 3410851850
   ("" (skosimp)
    (("" (expand "id")
      (("" (use "ann_program_preserves_wf_body") nil nil)) nil))
    nil)
   proved
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (CP formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil))
   929 880 nil nil)
  (derive_preserves_related_states_for_unchanged_program_TCC1-1 nil
   3409334743 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
 (derive_preserves_related_states_for_unchanged_program 0
  (derive_preserves_related_states_for_unchanged_program-1 nil
   3409334641 3410851972
   ("" (skosimp)
    (("" (auto-rewrite "id")
      ((""
        (lemma
         "wf_induction[[nat, nat], LAMBDA(i, j : [nat, nat]) : proj_1(i) < proj_1(j) AND proj_2(i) < proj_2(j)]")
        (("1"
          (inst -1
           "LAMBDA(n1, n2 : nat) : FORALL (b: (wf_Body(program(mp!1))), v1, v2: Val)
                                                                         (sMP1, sMP2: MPState, sAP1, sAP2: APState):
                                                                      well_behaved_MVA(mp!1) IMPLIES   subset?(var_names(b), ext_declared_var_names(program(mp!1))) IMPLIES
                                                                       related_states(mp!1)(sMP1, sAP1) IMPLIES
                                                                        derive(mp!1)(b, sMP1, v1, sMP2)(n1) IMPLIES
                                                                         derive(ann_program(mp!1))(b, sAP1, v2, sAP2)(n2) IMPLIES legal_Program(ann_program(mp!1)) IMPLIES legal_Body(ann_program(mp!1))(b) IMPLIES
                                                                          related_states(mp!1)(sMP2, sAP2) AND (NOT cp (astate(sMP2)) = halted IMPLIES v1 = v2)")
          (("1" (assert)
            (("1" (split -1)
              (("1" (skosimp*)
                (("1" (inst -1 "(n1!1, n2!1)")
                  (("1" (apply (repeat (inst?)))
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp*)
                  (("2" (use "related_states_implies_same_exception")
                    (("2" (assert)
                      (("2" (split -1)
                        (("1" (expand "derive" -6)
                          (("1" (expand "derive" -7)
                            (("1" (replace -1)
                              (("1"
                                (apply
                                 (branch
                                  (split -6)
                                  ((then
                                    (flatten)
                                    (assert)
                                    (flatten)
                                    (assert)))))
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (apply
                                     (branch
                                      (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("1"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst-cp -7 "(m1!1, m1!2)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat
                                                (inst?
                                                 -8
                                                 :where
                                                 (-3 -13))))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -8)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "cp(astate(tau!1)) = halted")
                                                      (("1"
                                                        (lemma
                                                         "derive_never_leaves_halted")
                                                        (("1"
                                                          (lemma
                                                           "derive_yields_wf_state_MP")
                                                          (("1"
                                                            (lemma
                                                             "derive_yields_wf_state_AP")
                                                            (("1"
                                                              (inst?
                                                               -1
                                                               :where
                                                               -19)
                                                              (("1"
                                                                (inst?
                                                                 -2
                                                                 :where
                                                                 -10)
                                                                (("1"
                                                                  (inst?
                                                                   -3
                                                                   :where
                                                                   -10)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "related_states"
                                                                       (-5
                                                                        3))
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "derive"
                                                                             -22)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "ann_program_preserves_wf_body")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -9
                                                           "(m2!1, m2!2)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -9
                                                                 :where
                                                                 (-6
                                                                  -15))))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -9)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand*
                                                                             "check_for_exception_final"
                                                                             "check_for_exception")
                                                                            (("1"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "related_states_implies_same_exception")
                                                                                (assert)
                                                                                (replace
                                                                                 -1)
                                                                                (assert)))
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -10)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "legal_Body_preserved_by_proper_subterm"
                                                                     ("b2"
                                                                      "b2(b!2)"
                                                                      "b1"
                                                                      "b!2"))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "<<")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "subterm_subset_of_var"
                                                                       ("b1"
                                                                        "b!2"
                                                                        "b2"
                                                                        "b2(b!2)"))
                                                                      (expand
                                                                       "<<")
                                                                      (assert)
                                                                      (assert)))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "legal_Body_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "b1(b!2)"
                                                        "b1"
                                                        "b!2"))
                                                      (expand "<<")
                                                      (assert)
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b1" "b!2"))
                                                      (expand "<<")
                                                      (assert)
                                                      (assert)))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (use
                                             "related_states_implies_same_lookup")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (inst
                                                     -8
                                                     "varname(b!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "var_names")
                                                        (("1"
                                                          (expand
                                                           "singleton")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst
                                                   -6
                                                   "(x!1`1 -1, x!1`2 -1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -6
                                                         :where
                                                         (-3 -11))))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand*
                                                                     "check_for_exception_final"
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "related_states_implies_same_exception")
                                                                        (assert)
                                                                        (replace
                                                                         -1)))
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -7)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "legal_Body_preserved_by_proper_subterm"
                                                               ("b2"
                                                                "b(b!2)"
                                                                "b1"
                                                                "b!2"))
                                                              (expand
                                                               "<<")
                                                              (assert)
                                                              (assert)))
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (apply
                                                             (then
                                                              (use
                                                               "subterm_subset_of_var"
                                                               ("b1"
                                                                "b!2"))
                                                              (expand
                                                               "<<")
                                                              (assert)
                                                              (assert)))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp
                                                     -7
                                                     "(m1!1, m1!2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -8
                                                           :where
                                                           (-3 -13))))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -8)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand*
                                                                 "check_for_exception_final"
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "cp(astate(tau!1)) = halted")
                                                                    (("1"
                                                                      (expand
                                                                       "related_states"
                                                                       (-2
                                                                        8))
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "derive_never_leaves_halted")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "derive_yields_wf_state_MP")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "derive_yields_wf_state_AP")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1
                                                                                         :where
                                                                                         -21)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -13)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("1"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -1)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -7
                                                                                                 :where
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -6
                                                                                                   :where
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "ann_program_preserves_wf_body")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "related_states_implies_same_exception")
                                                                          (assert)
                                                                          (replace
                                                                           -1)
                                                                          (assert)))
                                                                        (("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -7)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (inst
                                                                               -13
                                                                               "(m2!1, m2!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -13
                                                                                     :where
                                                                                     (-3
                                                                                      -19))))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -13)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "related_states_implies_same_exception")
                                                                                                  (assert)
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (assert)))
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     -7)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "legal_Body_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "b2(b!2)"
                                                                                          "b1"
                                                                                          "b!2"))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "<<")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b1"
                                                                                            "b!2"
                                                                                            "b2"
                                                                                            "b2(b!2)"))
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -18)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "legal_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "b1(b!2)"
                                                                  "b1"
                                                                  "b!2"))
                                                                (expand
                                                                 "<<")
                                                                (assert)
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "subterm_subset_of_var"
                                                                 ("b1"
                                                                  "b!2"))
                                                                (expand
                                                                 "<<")
                                                                (assert)
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst-cp
                                                       -7
                                                       "(m1!1, m1!2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -8
                                                             :where
                                                             (-3
                                                              -13))))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -8)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "cp(astate(tau!1)) = halted")
                                                                  (("1"
                                                                    (lemma
                                                                     "derive_never_leaves_halted")
                                                                    (("1"
                                                                      (lemma
                                                                       "derive_yields_wf_state_MP")
                                                                      (("1"
                                                                        (lemma
                                                                         "derive_yields_wf_state_AP")
                                                                        (("1"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           -19)
                                                                          (("1"
                                                                            (inst?
                                                                             -2
                                                                             :where
                                                                             -10)
                                                                            (("1"
                                                                              (inst?
                                                                               -3
                                                                               :where
                                                                               -10)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "related_states"
                                                                                   (-5
                                                                                    9))
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "derive"
                                                                                         -22)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "ann_program_preserves_wf_body")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -9
                                                                       "(m2!1, m2!2)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -9
                                                                             :where
                                                                             (-6
                                                                              -15))))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -9)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         "check_for_exception_final"
                                                                                         "check_for_exception")
                                                                                        (("1"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "related_states_implies_same_exception")
                                                                                            (assert)
                                                                                            (replace
                                                                                             -1)
                                                                                            (assert)))
                                                                                          (("1"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -10)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "legal_Body_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "b2(b!2)"
                                                                                  "b1"
                                                                                  "b!2"))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "<<")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "subterm_subset_of_var"
                                                                                   ("b1"
                                                                                    "b!2"
                                                                                    "b2"
                                                                                    "b2(b!2)"))
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "legal_Body_preserved_by_proper_subterm"
                                                                   ("b1"
                                                                    "b!2"
                                                                    "b2"
                                                                    "b1(b!2)"))
                                                                  (expand
                                                                   "<<")
                                                                  (assert)
                                                                  (assert)))
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "subterm_subset_of_var"
                                                                   ("b1"
                                                                    "b!2"))
                                                                  (expand
                                                                   "<<")
                                                                  (assert)
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (use
                                                         "related_states_implies_same_lookup")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -8
                                                                 "varname(b!2)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "var_names")
                                                                    (("1"
                                                                      (expand
                                                                       "singleton")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (use
                                                             "get_address_same_in_related_states")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "get_dynamic_type_name_same_in_related_states")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (inst
                                                               -6
                                                               "(x!1`1 -1, x!1`2 -1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -6
                                                                     :where
                                                                     (-3
                                                                      -11))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -6)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -6)
                                                                            (("1"
                                                                              (replace
                                                                               -13)
                                                                              (("1"
                                                                                (case
                                                                                 "cp(astate(tau!1)) = halted")
                                                                                (("1"
                                                                                  (expand
                                                                                   "related_states"
                                                                                   (-2
                                                                                    13))
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "update_PState"
                                                                                             13
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "update_PState"
                                                                                               13
                                                                                               2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 13)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "wf_update_PState"
                                                                                                     ("p"
                                                                                                      "mp!1"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_update")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "derive_bottom_iff_exception_step"
                                                                                                               ("p"
                                                                                                                "mp!1"))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "related_states_implies_same_exception")
                                                                                    (assert)
                                                                                    (replace
                                                                                     -1)))
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         14)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "related_states"
                                                                                             (-2
                                                                                              2))
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "wf_update_PState"
                                                                                                     ("p"
                                                                                                      "mp!1"))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_update")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "derive_bottom_iff_exception_step"
                                                                                                               ("p"
                                                                                                                "mp!1"))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "wf_update_PState"
                                                                                                     ("p"
                                                                                                      "ann_program(mp!1)"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_update")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "derive_bottom_iff_exception_step"
                                                                                                               ("p"
                                                                                                                "ann_program(mp!1)"))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (replace
                                                                                                       -5)
                                                                                                      (("4"
                                                                                                        (use
                                                                                                         "MP_modeled_preserved_by_update")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          (("4"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "update_local")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_field")
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand*
                                                                                                                   "is_local"
                                                                                                                   "is_field"
                                                                                                                   "update_local"
                                                                                                                   "update_field")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "legal_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "source(b!2)"
                                                                            "b1"
                                                                            "b!2"))
                                                                          (expand
                                                                           "<<")
                                                                          (assert)
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b1"
                                                                            "b!2"
                                                                            "b2"
                                                                            "source(b!2)"))
                                                                          (expand
                                                                           "<<")
                                                                          (assert)
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split
                                                               -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "(x!1`1 -1, x!1`2 -1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     (-3
                                                                      -10))))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -5)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "legal_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "b(b!2)"
                                                                            "b1"
                                                                            "b!2"))
                                                                          (expand
                                                                           "<<")
                                                                          (assert)
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b1"
                                                                            "b!2"
                                                                            "b2"
                                                                            "b(b!2)"))
                                                                          (expand
                                                                           "<<")
                                                                          (assert)
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "(m1!1, m1!2)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         (-3
                                                                          -13))))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -8)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (case
                                                                               "cp(astate(tau!1)) = halted")
                                                                              (("1"
                                                                                (expand
                                                                                 "related_states"
                                                                                 (-2
                                                                                  15))
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "check_for_exception")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -10)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "derive_never_leaves_halted")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "derive_yields_wf_state_MP")
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -1
                                                                                                     :where
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -2
                                                                                                       :where
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                                           ("b1"
                                                                                                            "b!2"))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "<<")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                                             ("b1"
                                                                                                              "b!2"
                                                                                                              "b2"
                                                                                                              "then_expr(b!2)"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                                           ("b1"
                                                                                                            "b!2"
                                                                                                            "b2"
                                                                                                            "else_expr(b!2)"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skosimp*)
                                                                                                      (("3"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                                           ("b1"
                                                                                                            "b!2"
                                                                                                            "b2"
                                                                                                            "then_expr(b!2)"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_for_exception")
                                                                                  (("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "related_states_implies_same_exception")
                                                                                      (assert)
                                                                                      (replace
                                                                                       -1)))
                                                                                    (("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -7)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("2"
                                                                                        (replace
                                                                                         -5)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -10
                                                                                           "(m2!1, m2!2)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -10
                                                                                                 :where
                                                                                                 (-2
                                                                                                  -16))))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "legal_Body_preserved_by_proper_subterm"
                                                                                                         ("b1"
                                                                                                          "b!2"
                                                                                                          "b2"
                                                                                                          "then_expr(b!2)"))
                                                                                                        (assert)
                                                                                                        (expand
                                                                                                         "<<")))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "legal_Body_preserved_by_proper_subterm"
                                                                                                         ("b1"
                                                                                                          "b!2"
                                                                                                          "b2"
                                                                                                          "else_expr(b!2)"))
                                                                                                        (assert)
                                                                                                        (expand
                                                                                                         "<<")))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("6"
                                                                                                    (lift-if)
                                                                                                    (("6"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "subterm_subset_of_var"
                                                                                                             ("b1"
                                                                                                              "b!2"
                                                                                                              "b2"
                                                                                                              "then_expr(b!2)"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "subterm_subset_of_var"
                                                                                                             ("b1"
                                                                                                              "b!2"
                                                                                                              "b2"
                                                                                                              "else_expr(b!2)"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                                     ("b1"
                                                                                                      "b!2"
                                                                                                      "b2"
                                                                                                      "else_expr(b!2)"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                                     ("b1"
                                                                                                      "b!2"
                                                                                                      "b2"
                                                                                                      "then_expr(b!2)"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "legal_Body_preserved_by_proper_subterm"
                                                                               ("b1"
                                                                                "b!2"
                                                                                "b2"
                                                                                "test(b!2)"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "subterm_subset_of_var"
                                                                               ("b1"
                                                                                "b!2"
                                                                                "b2"
                                                                                "test(b!2)"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split
                                                                   -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (use
                                                                     "method_call_lemma")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               2)
                                                                              ((then
                                                                                (skosimp*)
                                                                                (assert)))))
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("5"
                                                                          (skosimp*)
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("6"
                                                                          (skosimp*)
                                                                          (("6"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               2)
                                                                              ((then
                                                                                (skosimp*)
                                                                                (assert)))))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "md!2")
                                                                      (("2"
                                                                        (expand
                                                                         "id")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "(x!1`1 - 1,x!1`2 -1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -5
                                                                           :where
                                                                           (-3
                                                                            -10))))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "legal_Body_preserved_by_proper_subterm"
                                                                                 ("b1"
                                                                                  "b!2"
                                                                                  "b2"
                                                                                  "n(b!2)"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "subterm_subset_of_var"
                                                                                 ("b1"
                                                                                  "b!2"
                                                                                  "b2"
                                                                                  "n(b!2)"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "(x!1`1 - 1,x!1`2 -1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -5
                                                                             :where
                                                                             (-3
                                                                              -10))))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -5)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "legal_Body_preserved_by_proper_subterm"
                                                                                   ("b1"
                                                                                    "b!2"
                                                                                    "b2"
                                                                                    "r(b!2)"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "subterm_subset_of_var"
                                                                                   ("b1"
                                                                                    "b!2"
                                                                                    "b2"
                                                                                    "r(b!2)"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("1"
                                                                          (expand
                                                                           "extend")
                                                                          (("1"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -3)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -11)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -2)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("1"
                                                                                    (inst
                                                                                     -12
                                                                                     "(x!1`1 - 1, x!1`2 - 1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -12
                                                                                           :where
                                                                                           (-2
                                                                                            -7))))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -12)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "legal_Body")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -24
                                                                                                   "b1!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -24)
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (repeat
                                                                                                          (inst?
                                                                                                           -1
                                                                                                           :where
                                                                                                           (-5
                                                                                                            -6
                                                                                                            -8))))
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "subterm"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "some_is_exists")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "subterm"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   2
                                                                                                                   "car(branches(b!2))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (inst
                                                                                                                   2
                                                                                                                   "car(branches(b!2))")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (rewrite
                                                                                                                   "subterm"
                                                                                                                   -1)
                                                                                                                  (("3"
                                                                                                                    (rewrite
                                                                                                                     "some_is_exists")
                                                                                                                    (("3"
                                                                                                                      (skosimp*)
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         2
                                                                                                                         "x!2")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "member"
                                                                                                                           2)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand*
                                                                                               "subset?"
                                                                                               "member")
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (auto-rewrite
                                                                                                       "union"
                                                                                                       "member")
                                                                                                      (("3"
                                                                                                        (rewrite
                                                                                                         "var_names"
                                                                                                         21)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (flatten)
                                                                                                            (("3"
                                                                                                              (rewrite
                                                                                                               "var_names"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -8
                                                                             "(m1!1, m1!2)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -9
                                                                                   :where
                                                                                   (-4
                                                                                    -15))))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -9)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "check_for_exception")
                                                                                        (("1"
                                                                                          (case
                                                                                           "cp(astate(tau!1)) = halted")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "related_states"
                                                                                             (-2
                                                                                              20))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (branch
                                                                                                          (split
                                                                                                           -11)
                                                                                                          ((then
                                                                                                            (flatten)
                                                                                                            (assert)
                                                                                                            (flatten)
                                                                                                            (assert)))))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "derive_never_leaves_halted")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "derive_yields_wf_state_MP")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -2
                                                                                                                 :where
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (apply
                                                                                                                     (then
                                                                                                                      (use
                                                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                                                       ("b1"
                                                                                                                        "b!2"
                                                                                                                        "b2"
                                                                                                                        "else_stmt(b!2)"))
                                                                                                                      (assert)
                                                                                                                      (expand
                                                                                                                       "<<")))
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (skosimp*)
                                                                                                                  (("3"
                                                                                                                    (apply
                                                                                                                     (then
                                                                                                                      (use
                                                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                                                       ("b1"
                                                                                                                        "b!2"
                                                                                                                        "b2"
                                                                                                                        "then_stmt(b!2)"))
                                                                                                                      (assert)
                                                                                                                      (expand
                                                                                                                       "<<")))
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (use
                                                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                                                     ("b1"
                                                                                                                      "b!2"
                                                                                                                      "b2"
                                                                                                                      "else_stmt(b!2)"))
                                                                                                                    (assert)
                                                                                                                    (expand
                                                                                                                     "<<")))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (apply
                                                                                                                   (then
                                                                                                                    (use
                                                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                                                     ("b1"
                                                                                                                      "b!2"
                                                                                                                      "b2"
                                                                                                                      "then_stmt(b!2)"))
                                                                                                                    (assert)
                                                                                                                    (expand
                                                                                                                     "<<")))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "related_states_implies_same_exception")
                                                                                                (assert)
                                                                                                (replace
                                                                                                 -1)))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -8)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -12
                                                                                                   "(m2!1, m2!2)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (apply
                                                                                                         (repeat
                                                                                                          (inst?
                                                                                                           -11
                                                                                                           :where
                                                                                                           (-2
                                                                                                            -18))))
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -11)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (apply
                                                                                                                 (then
                                                                                                                  (use
                                                                                                                   "legal_Body_preserved_by_proper_subterm"
                                                                                                                   ("b1"
                                                                                                                    "b!2"
                                                                                                                    "b2"
                                                                                                                    "then_stmt(b!2)"))
                                                                                                                  (assert)
                                                                                                                  (expand
                                                                                                                   "<<")))
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (skosimp*)
                                                                                                              (("3"
                                                                                                                (apply
                                                                                                                 (then
                                                                                                                  (use
                                                                                                                   "legal_Body_preserved_by_proper_subterm"
                                                                                                                   ("b1"
                                                                                                                    "b!2"
                                                                                                                    "b2"
                                                                                                                    "else_stmt(b!2)"))
                                                                                                                  (assert)
                                                                                                                  (expand
                                                                                                                   "<<")))
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("5"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("6"
                                                                                                              (lift-if)
                                                                                                              (("6"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (then
                                                                                                                      (use
                                                                                                                       "subterm_subset_of_var"
                                                                                                                       ("b1"
                                                                                                                        "b!2"
                                                                                                                        "b2"
                                                                                                                        "then_stmt(b!2)"))
                                                                                                                      (assert)
                                                                                                                      (expand
                                                                                                                       "<<")))
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (apply
                                                                                                                     (then
                                                                                                                      (use
                                                                                                                       "subterm_subset_of_var"
                                                                                                                       ("b1"
                                                                                                                        "b!2"
                                                                                                                        "b2"
                                                                                                                        "else_stmt(b!2)"))
                                                                                                                      (assert)
                                                                                                                      (expand
                                                                                                                       "<<")))
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                                               ("b1"
                                                                                                                "b!2"
                                                                                                                "b2"
                                                                                                                "else_stmt(b!2)"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                                               ("b1"
                                                                                                                "b!2"
                                                                                                                "b2"
                                                                                                                "then_stmt(b!2)"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "legal_Body_preserved_by_proper_subterm"
                                                                                         ("b1"
                                                                                          "b!2"
                                                                                          "b2"
                                                                                          "test(b!2)"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "subterm_subset_of_var"
                                                                                         ("b1"
                                                                                          "b!2"
                                                                                          "b2"
                                                                                          "test(b!2)"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -8
                                                                               "(m1!1, m1!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -9
                                                                                     :where
                                                                                     (-4
                                                                                      -15))))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -9)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -9
                                                                                         "(m2!1, m2!2)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -10
                                                                                                 :where
                                                                                                 (-8
                                                                                                  -
                                                                                                  18))))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (use
                                                                                                       "legal_Body_preserved_by_proper_subterm"
                                                                                                       ("b1"
                                                                                                        "b!2"
                                                                                                        "b2"
                                                                                                        "s2(b!2)"))
                                                                                                      (assert)
                                                                                                      (expand
                                                                                                       "<<")))
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (use
                                                                                                       "subterm_subset_of_var"
                                                                                                       ("b1"
                                                                                                        "b!2"
                                                                                                        "b2"
                                                                                                        "s2(b!2)"))
                                                                                                      (assert)
                                                                                                      (expand
                                                                                                       "<<")))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "legal_Body_preserved_by_proper_subterm"
                                                                                           ("b1"
                                                                                            "b!2"
                                                                                            "b2"
                                                                                            "s1(b!2)"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")))
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b1"
                                                                                            "b!2"
                                                                                            "b2"
                                                                                            "s1(b!2)"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (expand
                                                                               "execute_set")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst
                                                                                   -8
                                                                                   "(x!1`1 -1, x!1`2 -1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -8
                                                                                         :where
                                                                                         (-4
                                                                                          -14))))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -8)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -16)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "cp(astate(tau!1)) = halted")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "related_states"
                                                                                                     (-2
                                                                                                      22))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "related_states_implies_same_exception")
                                                                                                        (assert)
                                                                                                        (replace
                                                                                                         -1)))
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_GhostVars"
                                                                                                             23
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "return_of_stmt")
                                                                                                              (("2"
                                                                                                                (apply
                                                                                                                 (branch
                                                                                                                  (split
                                                                                                                   -6)
                                                                                                                  ((then
                                                                                                                    (flatten)
                                                                                                                    (assert)
                                                                                                                    (flatten)
                                                                                                                    (assert)))))
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "related_states")
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "b!2")
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         24)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "wf_update_GhostVars"
                                                                                                                           ("p"
                                                                                                                            "mp!1"))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "wf_ghoststate")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "wf_Body")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -3
                                                                                                                                       "b!2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "subterm")
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_GhostVars")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "vn!1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "is_ghost")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "update_store")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (use
                                                                                                                                                                 "derive_bottom_iff_exception_step"
                                                                                                                                                                 ("p"
                                                                                                                                                                  "mp!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "defined?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (prop)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (use
                                                                                                                           "wf_update_GhostVars"
                                                                                                                           ("p"
                                                                                                                            "ann_program(mp!1)"))
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "ann_program_preserves_wf_body")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "wf_Body"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "wf_ghoststate")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "is_ghost")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update_GhostVars")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "update_store")
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -3
                                                                                                                                                       "b!2")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "subterm")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "derive_bottom_iff_exception_step"
                                                                                                                                                             ("p"
                                                                                                                                                              "ann_program(mp!1)"))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "defined?")
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?
                                                                                                                                                       -3)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (expand
                                                                                                                           "update_GhostVars")
                                                                                                                          (("3"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (skosimp*)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             "MP_modeled?")
                                                                                                                            (("4"
                                                                                                                              (use
                                                                                                                               "wf_new_vars")
                                                                                                                              (("4"
                                                                                                                                (flatten)
                                                                                                                                (("4"
                                                                                                                                  (auto-rewrite
                                                                                                                                   "disjoint?"
                                                                                                                                   "intersection"
                                                                                                                                   "union"
                                                                                                                                   "member"
                                                                                                                                   "empty?"
                                                                                                                                   "subset?")
                                                                                                                                  (("4"
                                                                                                                                    (assert)
                                                                                                                                    (("4"
                                                                                                                                      (inst
                                                                                                                                       -21
                                                                                                                                       "target(b!2)")
                                                                                                                                      (("4"
                                                                                                                                        (split
                                                                                                                                         -21)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -5
                                                                                                                                           "target(b!2)")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -5
                                                                                                                                             "target(b!2)")
                                                                                                                                            (("1"
                                                                                                                                              (expand*
                                                                                                                                               "ext_declared_var_names"
                                                                                                                                               "declared_var_names")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   4)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "MVA_modeled?")
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "MVA_cp_modeled?")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "update_GhostVars")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "update_store")
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (use
                                                                                                                                                                       "cp_new_ghostvar")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -3)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("4"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "reserved_words")
                                                                                                                                                                                (("4"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "MVA_cps_modeled?")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "update_GhostVars")
                                                                                                                                                          (("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "update_store")
                                                                                                                                                              (("2"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case
                                                                                                                                                                           "var_names(new_gvds(mp!1))(target(b!2))")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 -4)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("4"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "reserved_words")
                                                                                                                                                                                  (("4"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "new_gvds")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "add_as_union")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "var_names_union")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "var_names_union")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "new_cps_gvds")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "var_names")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             1
                                                                                                                                                                                             "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "defined?")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst?
                                                                                                                                                                           -12)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (expand
                                                                                                                                                         "MVA_vars_modeled?")
                                                                                                                                                        (("3"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "update_GhostVars")
                                                                                                                                                            (("3"
                                                                                                                                                              (expand
                                                                                                                                                               "update_store")
                                                                                                                                                              (("3"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "var_names(new_gvds(mp!1))(target(b!2))")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -4)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("4"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "reserved_words")
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "new_gvds")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "add_as_union")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "var_names_union")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (rewrite
                                                                                                                                                                                     "var_names_union")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "new_mva_vars_gvds")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "var_names"
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "wf_state"
                                                                                                                                                                                               -10)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "wf_AState")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "wf_Store")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -11
                                                                                                                                                                                                       "n!1")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "var_names")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               2
                                                                                                                                                                                                               "f!1")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   2
                                                                                                                                                                                                                   "f!1")
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -13)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "Program_modeled?")
                                                                                                                                                    (("2"
                                                                                                                                                      (split
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "update_GhostVars")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "Program_gvs_modeled?")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "update_GhostVars")
                                                                                                                                                          (("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "update_store")
                                                                                                                                                              (("2"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst?
                                                                                                                                                                           -13)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (rewrite
                                                                                                                                           "var_names"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "add")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "legal_Body_preserved_by_proper_subterm"
                                                                                               ("b1"
                                                                                                "b!2"
                                                                                                "b2"
                                                                                                "source(b!2)"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "subterm_subset_of_var"
                                                                                               ("b1"
                                                                                                "b!2"
                                                                                                "b2"
                                                                                                "source(b!2)"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (expand
                                                                                 "return_of_stmt")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -1)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -6
                                                                                     "(x!1`1 - 1, x!1`2 -1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -6
                                                                                           :where
                                                                                           (-4
                                                                                            -12))))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -6)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "return_of_stmt")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "related_states_implies_same_exception")
                                                                                                            (assert)
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (assert)))
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (branch
                                                                                                              (split
                                                                                                               -6)
                                                                                                              ((then
                                                                                                                (flatten)
                                                                                                                (assert)
                                                                                                                (flatten)
                                                                                                                (assert)))))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "legal_Body_preserved_by_proper_subterm"
                                                                                                 ("b1"
                                                                                                  "b!2"
                                                                                                  "b2"
                                                                                                  "expr(b!2)"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")))
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b1"
                                                                                                  "b!2"
                                                                                                  "b2"
                                                                                                  "expr(b!2)"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "return_of_stmt")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -12)
                                                                                          (("1"
                                                                                            (use
                                                                                             "related_states_preserved_by_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState"
                                                                                                 (-4
                                                                                                  -12))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "raise"
                                                                                                   (-4
                                                                                                    -12))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "related_states"
                                                                                                         -10)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -1)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (copy
                                                                                         -11)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "(m1!1, m1!2)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -1
                                                                                                 :where
                                                                                                 (-5
                                                                                                  -18))))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -26)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "legal_Body"
                                                                                                         -27)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -27)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subterm")
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "ann_program_preserves_wf_body")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst?
                                                                                                                   -28
                                                                                                                   :where
                                                                                                                   (-21
                                                                                                                    -23))
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -28
                                                                                                                     "sAP1!1"
                                                                                                                     "sAP2!1"
                                                                                                                     "v2!2"
                                                                                                                     "v1!4"
                                                                                                                     "v2!4"
                                                                                                                     "x!1`2"
                                                                                                                     "m1!2"
                                                                                                                     "m2!2")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "cp(astate(tau1!1)) = halted")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "related_states"
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "cp(astate(tau2!1)) = halted AND wf_state(mp!1)(tau2!1)")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "derive_never_leaves_halted")
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_yields_wf_state_MP")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -19)
                                                                                                                                              (("1"
                                                                                                                                                (inst?
                                                                                                                                                 -2
                                                                                                                                                 :where
                                                                                                                                                 -19)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -21)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "related_states")
                                                                                                                                                          (("1"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState"
                                                                                                                                                                 26
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState"
                                                                                                                                                                   26
                                                                                                                                                                   2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case
                                                                                                                                                                     "wf_state(ann_program(mp!1))(sAP2!1)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (split
                                                                                                                                                                         26)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("p"
                                                                                                                                                                              "mp!1"))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_state")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_field")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "is_local")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "derive_yields_wf_state_AP")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "wf_state(ann_program(mp!1))(tau2!2)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?
                                                                                                                                                                           -2
                                                                                                                                                                           :where
                                                                                                                                                                           -33)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -35)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (use
                                                                                                                                                                                         "wf_update_PState"
                                                                                                                                                                                         ("p"
                                                                                                                                                                                          "ann_program(mp!1)"))
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "wf_state")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "is_field")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "is_local")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                 ("p"
                                                                                                                                                                                  "ann_program(mp!1)"))
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (use
                                                                                                                                                                                         "wf_state_catch")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                                                                                                               ("b1"
                                                                                                                                                                                "b!2"
                                                                                                                                                                                "b2"
                                                                                                                                                                                "finally(b!2)"))
                                                                                                                                                                              (assert)
                                                                                                                                                                              (expand
                                                                                                                                                                               "<<")))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (branch
                                                                                                                                                                            (split
                                                                                                                                                                             -31)
                                                                                                                                                                            ((then
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (assert)
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (assert)))))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst?
                                                                                                                                                                             -4
                                                                                                                                                                             :where
                                                                                                                                                                             -2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                 ("p"
                                                                                                                                                                                  "ann_program(mp!1)"))
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (use
                                                                                                                                                                                         "wf_state_catch")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                                                                                                                 ("b1"
                                                                                                                                                                                  "b!2"
                                                                                                                                                                                  "b2"
                                                                                                                                                                                  "catch(b!2)"))
                                                                                                                                                                                (assert)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "<<")))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "update_PState")
                                                                                                                                                        (("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (use
                                                                                                                                                       "wf_update_PState"
                                                                                                                                                       ("p"
                                                                                                                                                        "mp!1"))
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "update_PState")
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "wf_state_catch")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (apply
                                                                                                                                         (branch
                                                                                                                                          (split
                                                                                                                                           -14)
                                                                                                                                          ((then
                                                                                                                                            (flatten)
                                                                                                                                            (assert)
                                                                                                                                            (flatten)
                                                                                                                                            (assert)))))
                                                                                                                                        (("2"
                                                                                                                                          (use
                                                                                                                                           "derive_never_leaves_halted")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (use
                                                                                                                                               "derive_yields_wf_state_MP")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "update_PState")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (use
                                                                                                                                                     "wf_update_PState"
                                                                                                                                                     ("p"
                                                                                                                                                      "mp!1"))
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")
                                                                                                                                                          (("2"
                                                                                                                                                            (use
                                                                                                                                                             "wf_state_catch")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (use
                                                                                                                           "related_states_implies_same_exception")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (branch
                                                                                                                                  (split
                                                                                                                                   -24)
                                                                                                                                  ((then
                                                                                                                                    (flatten)
                                                                                                                                    (assert)
                                                                                                                                    (flatten)
                                                                                                                                    (assert)))))
                                                                                                                                (("1"
                                                                                                                                  (inst-cp
                                                                                                                                   -21
                                                                                                                                   "(m2!1, m2!2)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (apply
                                                                                                                                       (repeat
                                                                                                                                        (inst?
                                                                                                                                         -22
                                                                                                                                         :where
                                                                                                                                         (-3
                                                                                                                                          -15))))
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -22)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "cp(astate(tau2!1)) = halted")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "related_states"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "derive_never_leaves_halted")
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "derive_yields_wf_state_MP")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "derive_yields_wf_state_AP")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1
                                                                                                                                                                   :where
                                                                                                                                                                   -38)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -2
                                                                                                                                                                     :where
                                                                                                                                                                     -26)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst?
                                                                                                                                                                       -3
                                                                                                                                                                       :where
                                                                                                                                                                       -26)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (split
                                                                                                                                                                             -2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState"
                                                                                                                                                                               -3)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "related_states")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -28)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "update_PState"
                                                                                                                                                                                           27
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "update_PState"
                                                                                                                                                                                             27
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "wf_state(ann_program(mp!1))(sAP2!1)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   27)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (use
                                                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                                                       ("p"
                                                                                                                                                                                                        "mp!1"))
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "update_PState")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "wf_state")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "is_field")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "is_local")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   -39)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (use
                                                                                                                                                                                                         "wf_update_PState"
                                                                                                                                                                                                         ("p"
                                                                                                                                                                                                          "ann_program(mp!1)"))
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "update_PState")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "wf_state")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "is_field")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "is_local")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (propax)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                               ("p"
                                                                                                                                                                                "mp!1"))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (use
                                                                                                                                                                                       "wf_state_catch")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("p"
                                                                                                                                                                              "ann_program(mp!1)"))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "wf_state_catch")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (use
                                                                                                                                                                     "ann_program_preserves_wf_body")
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (use
                                                                                                                                                 "related_states_implies_same_exception")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -24
                                                                                                                                                       "(m3!1, m3!2)")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (apply
                                                                                                                                                           (repeat
                                                                                                                                                            (inst?
                                                                                                                                                             -24
                                                                                                                                                             :where
                                                                                                                                                             (-32
                                                                                                                                                              -20))))
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (split
                                                                                                                                                               -24)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "cp(astate(tau3!1)) = halted")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "related_states"
                                                                                                                                                                     (28
                                                                                                                                                                      -2))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -28)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState"
                                                                                                                                                                                 28
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState"
                                                                                                                                                                                   28
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "update_PState"
                                                                                                                                                                                     28
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (split
                                                                                                                                                                                       28)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (use
                                                                                                                                                                                           "wf_update_PState"
                                                                                                                                                                                           ("p"
                                                                                                                                                                                            "mp!1"))
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "wf_state")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "is_field")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "is_local")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (use
                                                                                                                                                                     "related_states_implies_same_exception")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "return_of_stmt")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lift-if)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (branch
                                                                                                                                                                                  (split
                                                                                                                                                                                   -25)
                                                                                                                                                                                  ((then
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (assert)))))
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "related_states")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -36)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "update_PState"
                                                                                                                                                                                         30
                                                                                                                                                                                         3)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "update_PState"
                                                                                                                                                                                           30
                                                                                                                                                                                           5)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (split
                                                                                                                                                                                               30)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (use
                                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                                 ("p"
                                                                                                                                                                                                  "mp!1"))
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "wf_state")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "is_field")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "is_local")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (use
                                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                                 ("p"
                                                                                                                                                                                                  "ann_program(mp!1)"))
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "wf_state")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "is_field")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "is_local")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("3"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "MP_modeled?")
                                                                                                                                                                                                (("3"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "MVA_modeled?")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "MVA_cp_modeled?")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "MVA_cps_modeled?")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "MVA_vars_modeled?")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (split
                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "Program_modeled?")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "update_PState")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "Program_gvs_modeled?")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "update_PState")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("4"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "update_PState")
                                                                                                                                                                                                (("4"
                                                                                                                                                                                                  (apply
                                                                                                                                                                                                   (branch
                                                                                                                                                                                                    (split
                                                                                                                                                                                                     -38)
                                                                                                                                                                                                    ((then
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (assert)))))
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "legal_Body_preserved_by_proper_subterm"
                                                                                                                                                                   ("b2"
                                                                                                                                                                    "finally(b!2)"
                                                                                                                                                                    "b1"
                                                                                                                                                                    "b!2"))
                                                                                                                                                                  (expand
                                                                                                                                                                   "<<")
                                                                                                                                                                  (assert)
                                                                                                                                                                  (assert)))
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("3"
                                                                                                                                                                (use
                                                                                                                                                                 "related_states_preserved_by_catch")
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("4"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "subterm_subset_of_var"
                                                                                                                                                                   ("b1"
                                                                                                                                                                    "b!2"
                                                                                                                                                                    "b2"
                                                                                                                                                                    "finally(b!2)"))
                                                                                                                                                                  (assert)
                                                                                                                                                                  (expand
                                                                                                                                                                   "<<")))
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (apply
                                                                                                                                             (then
                                                                                                                                              (use
                                                                                                                                               "legal_Body_preserved_by_proper_subterm"
                                                                                                                                               ("b2"
                                                                                                                                                "catch(b!2)"
                                                                                                                                                "b1"
                                                                                                                                                "b!2"))
                                                                                                                                              (expand
                                                                                                                                               "<<")
                                                                                                                                              (assert)
                                                                                                                                              (assert)))
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (use
                                                                                                                                             "related_states_preserved_by_catch")
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (apply
                                                                                                                                             (then
                                                                                                                                              (use
                                                                                                                                               "subterm_subset_of_var"
                                                                                                                                               ("b1"
                                                                                                                                                "b!2"
                                                                                                                                                "b2"
                                                                                                                                                "catch(b!2)"))
                                                                                                                                              (assert)
                                                                                                                                              (expand
                                                                                                                                               "<<")))
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (apply
                                                                                                                                   (branch
                                                                                                                                    (split
                                                                                                                                     -13)
                                                                                                                                    ((then
                                                                                                                                      (flatten)
                                                                                                                                      (assert)
                                                                                                                                      (flatten)
                                                                                                                                      (assert)))))
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -19
                                                                                                                                     "(m3!1, m3!2)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (inst?
                                                                                                                                           -19
                                                                                                                                           :where
                                                                                                                                           (-15
                                                                                                                                            -27))))
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             -19)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "cp(astate(tau3!1)) = halted")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "related_states"
                                                                                                                                                   (29
                                                                                                                                                    -2))
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -23)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState"
                                                                                                                                                               29
                                                                                                                                                               2)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState"
                                                                                                                                                                 29
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState"
                                                                                                                                                                   29
                                                                                                                                                                   2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       29)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("p"
                                                                                                                                                                              "mp!1"))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_state")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_field")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "is_local")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (use
                                                                                                                                                   "related_states_implies_same_exception")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "return_of_stmt")
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("2"
                                                                                                                                                            (apply
                                                                                                                                                             (branch
                                                                                                                                                              (split
                                                                                                                                                               -31)
                                                                                                                                                              ((then
                                                                                                                                                                (flatten)
                                                                                                                                                                (assert)
                                                                                                                                                                (flatten)
                                                                                                                                                                (assert)))))
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -21)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "related_states")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "update_PState"
                                                                                                                                                                     31
                                                                                                                                                                     3)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState"
                                                                                                                                                                       31
                                                                                                                                                                       5)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           31)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("p"
                                                                                                                                                                              "mp!1"))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_state")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_field")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "is_local")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("p"
                                                                                                                                                                              "ann_program(mp!1)"))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "update_PState")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_state")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "is_field")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "is_local")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (expand
                                                                                                                                                                             "MP_modeled?")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (split
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "MVA_modeled?")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "MVA_vars_modeled?")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "MVA_cp_modeled?")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "MVA_cps_modeled?")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "update_PState")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (split
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (propax)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "Program_modeled?")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (split
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "update_PState")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "Program_gvs_modeled?")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "update_PState")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("4"
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")
                                                                                                                                                                            (("4"
                                                                                                                                                                              (apply
                                                                                                                                                                               (branch
                                                                                                                                                                                (split
                                                                                                                                                                                 -32)
                                                                                                                                                                                ((then
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (assert)))))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (apply
                                                                                                                                               (then
                                                                                                                                                (use
                                                                                                                                                 "legal_Body_preserved_by_proper_subterm"
                                                                                                                                                 ("b2"
                                                                                                                                                  "finally(b!2)"
                                                                                                                                                  "b1"
                                                                                                                                                  "b!2"))
                                                                                                                                                (expand
                                                                                                                                                 "<<")
                                                                                                                                                (assert)
                                                                                                                                                (assert)))
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (use
                                                                                                                                               "related_states_preserved_by_catch")
                                                                                                                                              (("3"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("4"
                                                                                                                                              (apply
                                                                                                                                               (then
                                                                                                                                                (use
                                                                                                                                                 "subterm_subset_of_var"
                                                                                                                                                 ("b1"
                                                                                                                                                  "b!2"
                                                                                                                                                  "b2"
                                                                                                                                                  "finally(b!2)"))
                                                                                                                                                (assert)
                                                                                                                                                (expand
                                                                                                                                                 "<<")))
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (use
                                                                                                       "legal_Body_preserved_by_proper_subterm"
                                                                                                       ("b2"
                                                                                                        "try(b!2)"
                                                                                                        "b1"
                                                                                                        "b!2"))
                                                                                                      (expand
                                                                                                       "<<")
                                                                                                      (assert)
                                                                                                      (assert)))
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (use
                                                                                                       "subterm_subset_of_var"
                                                                                                       ("b1"
                                                                                                        "b!2"
                                                                                                        "b2"
                                                                                                        "try(b!2)"))
                                                                                                      (assert)
                                                                                                      (expand
                                                                                                       "<<")))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "ann_program_preserves_wf_body")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -1)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (inst
                                                                                         -6
                                                                                         "(x!1`1 -1 ,x!1`2 -1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -6
                                                                                               :where
                                                                                               (-4
                                                                                                -12))))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "legal_Body"
                                                                                                   (-13
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "subterm"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -20
                                                                                                           "b1!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -20)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   (-5
                                                                                                                    -6
                                                                                                                    -8))))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (rewrite
                                                                                                                 "subterm"
                                                                                                                 1)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (inst
                                                                                                           -20
                                                                                                           "b1!1")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (split
                                                                                                               -20)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   (-5
                                                                                                                    -6
                                                                                                                    -8))))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (case-replace
                                                                                                                 " While(test(b!2), body(b!2))= b!2")
                                                                                                                (("2"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (expand
                                                                                                           "subterm")
                                                                                                          (("4"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (typepred
                                                                                                   "b!2")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "wf_Body")
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (auto-rewrite
                                                                                                         "subset?"
                                                                                                         "member"
                                                                                                         "union")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (inst?
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (rewrite
                                                                                                                   "var_names"
                                                                                                                   -2)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (split
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "var_names"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case-replace
                                                                                                                         " While(test(b!2), body(b!2))= b!2")
                                                                                                                        (("2"
                                                                                                                          (apply-extensionality
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (rewrite
                                                                                                                         "var_names"
                                                                                                                         -1)
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "emptyset")
                                                                                                                          (("3"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -1)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "execute_assert")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "check_assertion")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "(x!1`1 - 1, x!1`2 -1)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -8
                                                                                                       :where
                                                                                                       (-4
                                                                                                        -14))))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -16)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -7)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "cp(astate(tau1!1)) = halted")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "related_states"
                                                                                                                   (-2
                                                                                                                    28))
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "update_PState"
                                                                                                                         28
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "update_PState"
                                                                                                                           28
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "raise"
                                                                                                                             28
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "update_PState"
                                                                                                                               28
                                                                                                                               3)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "raise"
                                                                                                                                 28
                                                                                                                                 3)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "update_PState"
                                                                                                                                   28
                                                                                                                                   3)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     28)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (apply
                                                                                                                                         (then
                                                                                                                                          (use
                                                                                                                                           "wf_update_PState"
                                                                                                                                           ("p"
                                                                                                                                            "mp!1"))
                                                                                                                                          (assert)
                                                                                                                                          (skosimp*)
                                                                                                                                          (expand
                                                                                                                                           "update_PState")
                                                                                                                                          (use
                                                                                                                                           "wf_state_raise")
                                                                                                                                          (assert)))
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("4"
                                                                                                                                        (apply
                                                                                                                                         (then
                                                                                                                                          (use
                                                                                                                                           "wf_update_PState"
                                                                                                                                           ("p"
                                                                                                                                            "ann_program(mp!1)"))
                                                                                                                                          (assert)
                                                                                                                                          (skosimp*)
                                                                                                                                          (expand
                                                                                                                                           "update_PState")
                                                                                                                                          (use
                                                                                                                                           "wf_state_raise")
                                                                                                                                          (assert)))
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("5"
                                                                                                                                      (lift-if)
                                                                                                                                      (("5"
                                                                                                                                        (assert)
                                                                                                                                        (("5"
                                                                                                                                          (flatten)
                                                                                                                                          (("5"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("6"
                                                                                                                                      (lift-if)
                                                                                                                                      (("6"
                                                                                                                                        (flatten)
                                                                                                                                        (("6"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "return_of_stmt")
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (then
                                                                                                                              (use
                                                                                                                               "related_states_implies_same_exception")
                                                                                                                              (assert)
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (assert)))
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState"
                                                                                                                               -6)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "raise"
                                                                                                                                 -6)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "update_PState"
                                                                                                                                   -8)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "raise"
                                                                                                                                     -8)
                                                                                                                                    (("2"
                                                                                                                                      (apply
                                                                                                                                       (branch
                                                                                                                                        (split
                                                                                                                                         -6)
                                                                                                                                        ((then
                                                                                                                                          (flatten)
                                                                                                                                          (assert)
                                                                                                                                          (flatten)
                                                                                                                                          (assert)))))
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (apply
                                                                                                                                           (branch
                                                                                                                                            (split
                                                                                                                                             -3)
                                                                                                                                            ((then
                                                                                                                                              (flatten)
                                                                                                                                              (assert)
                                                                                                                                              (flatten)
                                                                                                                                              (assert)))))
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (apply
                                                                                                                                         (branch
                                                                                                                                          (split
                                                                                                                                           30)
                                                                                                                                          ((then
                                                                                                                                            (flatten)
                                                                                                                                            (assert)
                                                                                                                                            (flatten)
                                                                                                                                            (assert)))))
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update_PState"
                                                                                                                                           2
                                                                                                                                           3)
                                                                                                                                          (("2"
                                                                                                                                            (use
                                                                                                                                             "related_states_preserved_by_raise")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (apply
                                                                                                                                                 (branch
                                                                                                                                                  (split
                                                                                                                                                   -16)
                                                                                                                                                  ((then
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)
                                                                                                                                                    (flatten)
                                                                                                                                                    (assert)))))
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (apply
                                                                                                                                                       (branch
                                                                                                                                                        (split
                                                                                                                                                         -1)
                                                                                                                                                        ((then
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)))))
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "update_PState")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "raise")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "legal_Body_preserved_by_proper_subterm"
                                                                                                             ("b1"
                                                                                                              "b!2"
                                                                                                              "b2"
                                                                                                              "expr(b!2)"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")))
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "subterm_subset_of_var"
                                                                                                             ("b1"
                                                                                                              "b!2"
                                                                                                              "b2"
                                                                                                              "expr(b!2)"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "derive_never_leaves_halted")
                          (("2" (use "derive_yields_wf_state_MP")
                            (("2" (use "derive_yields_wf_state_AP")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "related_states" (1 -8))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "derive" -13)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "b!2")
                                (("2"
                                  (use "ann_program_preserves_wf_body")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (use "ann_program_preserves_wf_body") nil nil)) nil))
          nil)
         ("2" (lemma "well_founded?_product")
          (("2"
            (inst -1 "LAMBDA(i, j : nat) : i < j"
             "LAMBDA(i, j : nat) : i < j")
            (("2" (assert)
              (("2" (split -1)
                (("1" (use "wf_nat") nil nil)
                 ("2" (use "wf_nat") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((well_founded?_product formula-decl nil WF nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (related_states const-decl "boolean" Equivalence nil)
    (derive def-decl "bool" Semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (mp!1 skolem-const-decl
     "({mp: MonitoredProgram | wf_MP(mp) AND wf_set_stmts(mp)})"
     CorrectnessAnnProgram nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (b1 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                       OR Const?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (derive_yields_wf_state_MP formula-decl nil
     MonitoredProgramSemantics nil)
    (b2 adt-accessor-decl
     "[d: {x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} ->
   {x1: Body |
            IF Plus?(d) THEN Int?(x1) OR Plus?(x1) OR NumVarEval?(x1)
            ELSE IF Conj?(d)
                   THEN     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1)
                         OR Eq?(x1) OR BoolVarEval?(x1)
                 ELSE     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                       OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                       OR Const?(x1)
                 ENDIF
            ENDIF}]" Body_adt nil)
    (b!2 skolem-const-decl "(wf_Body(program(mp!1)))"
     CorrectnessAnnProgram nil)
    (ann_program_preserves_wf_body formula-decl nil
     AnnotateProgramProperties nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (derive_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (legal_Body_preserved_by_proper_subterm formula-decl nil
     LegalProgramRestriction nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (b shared-adt-accessor-decl
     "[{x: Body | BExpr?(x) OR Neg?(x)} -> BoolExpr]" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (v2!2 skolem-const-decl "Val[Name]" CorrectnessAnnProgram nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (is_field const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (update_field const-decl "PState" State nil)
    (update_local const-decl "PState" State nil)
    (MP_modeled_preserved_by_update formula-decl nil
     RelatedStatesProperties nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs
     nil)
    (v1!2 skolem-const-decl "Val[Name]" CorrectnessAnnProgram nil)
    (wf_state_update formula-decl nil State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (update const-decl "PState" State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> BoolExpr]"
     Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil
     WellFormedProgram nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (v1!3 skolem-const-decl "Val[Name]" CorrectnessAnnProgram nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (v1!4 skolem-const-decl "Val[Name]" CorrectnessAnnProgram nil)
    (n adt-accessor-decl "[(NExpr?) -> NumExpr]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (extend const-decl "R" extend nil)
    (union const-decl "set" sets nil)
    (member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (branches adt-accessor-decl
     "[(CaseJML?) -> list[[BoolExpr, Stmt]]]" Body_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl
     "[[BoolExpr, Stmt, Stmt] -> (IfThenElse?)]" Body_adt nil)
    (id_preserves application-judgement "S" identity_props nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (related_states_preserved_by_raise formula-decl nil
     RelatedStatesProperties nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[BoolExpr, Stmt] -> (While?)]"
     Body_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (related_states_preserved_by_catch formula-decl nil
     RelatedStatesProperties nil)
    (catch const-decl "PState" State nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (wf_state_catch formula-decl nil State nil)
    (wf_state const-decl "boolean" State nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (expr adt-accessor-decl
          "[d: {x: Body | Assert?(x) OR StmtExpr?(x)} ->
   {x1: Body |
            IF StmtExpr?(d)
              THEN     Assign?(x1) OR BExpr?(x1) OR CondExpr?(x1)
                    OR MethodCall?(x1) OR NExpr?(x1) OR RExpr?(x1)
                    OR Const?(x1)
            ELSE     TT?(x1) OR FF?(x1) OR Neg?(x1) OR Conj?(x1) OR Eq?(x1)
                  OR BoolVarEval?(x1)
            ENDIF}]" Body_adt nil)
    (return_of_stmt const-decl "Val" Semantics nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (q!1 skolem-const-decl "CP" CorrectnessAnnProgram nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (singleton? const-decl "bool" sets nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (wf_update_GhostVars formula-decl nil AnnotatedProgramSemantics
     nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics
     nil)
    (update_store const-decl "Store" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (v1!3 skolem-const-decl "Val[Name]" CorrectnessAnnProgram nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt
     nil)
    (v1!4 skolem-const-decl "Val[Name]" CorrectnessAnnProgram nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (r adt-accessor-decl "[(RExpr?) -> RefExpr]" Body_adt nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (md!2 skolem-const-decl "(wf_Method(id(ann_program(mp!1))))"
     CorrectnessAnnProgram nil)
    (method_call_lemma formula-decl nil MethodCallsPreserveRelatedState
     nil)
    (get_dynamic_type_name_same_in_related_states formula-decl nil
     RelatedStatesProperties nil)
    (get_address_same_in_related_states formula-decl nil
     RelatedStatesProperties nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (varname shared-adt-accessor-decl
     "[{x: Body | RefVarEval?(x) OR BoolVarEval?(x) OR NumVarEval?(x)} -> Name]"
     Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (related_states_implies_same_lookup formula-decl nil
     RelatedStatesProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (related_states_implies_same_exception formula-decl nil
     RelatedStatesProperties nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil))
   121800 98960 t nil))
 (correctness_of_ann_program 0
  (correctness_of_ann_program-3 nil 3409334687 3410851977
   ("" (skosimp*)
    ((""
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram" "derives")
      (("" (skosimp*)
        (("" (use "initial_states_are_equivalent")
          ((""
            (use "derive_preserves_related_states_for_unchanged_program")
            (("" (assert)
              ((""
                (auto-rewrite "subterm" "var_names" "subset?" "union"
                              "add" "member" "singleton" "emptyset")
                (("" (assert)
                  (("" (split -1)
                    (("1" (expand "legal_Body")
                      (("1" (skosimp*)
                        (("1" (assert)
                          (("1"
                            (apply (branch
                                    (split -1)
                                    ((then (assert)))))
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "ext_declared_var_names")
                        (("2"
                          (expand* "ext_declared_var_names" "union"
                           "member")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil)
    (derives const-decl "bool" Semantics nil)
    (run_FullProgram const-decl "boolean" Semantics nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (initial_states_are_equivalent formula-decl nil
     CorrectnessAnnProgram nil)
    (wf_set_stmts const-decl "bool" WfSetStmts nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (Name formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (id_preserves application-judgement "S" identity_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Body_adt
     nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Body_adt nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (This const-decl "Name" Program nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Body_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (derive_preserves_related_states_for_unchanged_program formula-decl
     nil CorrectnessAnnProgram nil))
   4774 4540 nil nil)
  (correctness_of_ann_program-2 nil 3403446138 3406020327
   ("" (skosimp*)
    ((""
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram" "derives")
      (("" (skosimp*)
        (("" (use "initial_states_are_equivalent")
          ((""
            (use "derive_maintains_related_states_for_unchanged_program")
            (("" (assert)
              ((""
                (auto-rewrite "subterm" "var_names" "subset?" "union"
                              "add" "member" "singleton" "emptyset")
                (("" (assert)
                  (("" (split -1)
                    (("1" (expand "legal_Body")
                      (("1" (skosimp*)
                        (("1" (assert)
                          (("1"
                            (apply (branch
                                    (split -1)
                                    ((then (assert)))))
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "ext_declared_var_names")
                        (("2"
                          (expand* "ext_declared_var_names" "union"
                           "member")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil)
    (derives const-decl "bool" Semantics nil)
    (run_FullProgram const-decl "boolean" Semantics nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (initial_states_are_equivalent formula-decl nil
     CorrectnessAnnProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (Name formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (id_preserves application-judgement "S" identity_props nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Body type-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Body_adt
     nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Body_adt nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (This const-decl "Name" Program nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Body_adt nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   166588 3460 t nil)
  (correctness_of_ann_program-1 nil 3396605549 3403446107
   ("" (skosimp*)
    ((""
      (expand* "run_monitored_program" "run_annotated_program"
       "run_FullProgram" "derives")
      (("" (skosimp*)
        (("" (use "initial_states_are_equivalent")
          (("" (use "ann_method_name")
            (("" (rewrite -1)
              ((""
                (use "derive_maintains_related_states_for_unchanged_program")
                (("" (assert)
                  ((""
                    (auto-rewrite "var_names" "subset?" "union" "add"
                                  "member" "singleton" "emptyset")
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (expand "ext_declared_var_names")
                          ((""
                            (expand* "ext_declared_var_names" "union"
                             "member")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_method_name formula-decl nil AnnotateMethod nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (initial_AP_state const-decl "APState" AnnotatedProgramSemantics
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Body_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (This const-decl "Name" Program nil)
    (RefVarEval adt-constructor-decl "[Name -> (RefVarEval?)]" Body_adt
     nil)
    (RExpr adt-constructor-decl "[RefExpr -> (RExpr?)]" Body_adt nil)
    (RefExpr type-eq-decl nil Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Null? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall adt-constructor-decl
     "[[Expr, Name, Expr] -> (MethodCall?)]" Body_adt nil)
    (StmtExpr adt-constructor-decl "[Expr -> (StmtExpr?)]" Body_adt
     nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Body type-decl nil Body_adt nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (CP formal-nonempty-type-decl nil CorrectnessAnnProgram nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (initial_states_are_equivalent formula-decl nil
     CorrectnessAnnProgram nil)
    (run_monitored_program const-decl "boolean"
     MonitoredProgramSemantics nil)
    (run_FullProgram const-decl "boolean" Semantics nil)
    (derives const-decl "bool" Semantics nil)
    (run_annotated_program const-decl "boolean"
     AnnotatedProgramSemantics nil))
   6771 6070 t nil)))

