(|CorrectnessAnnProgram|
 (|IMP_AnnGenerationLemmas_TCC1| 0
  (|IMP_AnnGenerationLemmas_TCC1-1| NIL 3393590714 3394357838
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |CorrectnessAnnProgram| NIL)) 1 1 T
   NIL))
 (|MP_modeled_implies_same_exception| 0
  (|MP_modeled_implies_same_exception-1| NIL 3393591341 3394357838
   ("" (SKOSIMP)
    (("" (SKOSIMP)
      (("" (EXPAND* "MP_modeled?" "Program_modeled?") (("" (GROUND) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|MP_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_modeled?| CONST-DECL "boolean" |Equivalence| NIL))
   3 3 T NIL))
 (|MP_modeled_implies_cp_not_halted| 0
  (|MP_modeled_implies_cp_not_halted-1| NIL 3393591448 3394357838
   ("" (SKOSIMP)
    (("" (EXPAND* "MP_modeled?" "MVA_modeled?")
      (("" (FLATTEN) (("" (POSTPONE) NIL NIL)) NIL)) NIL))
    NIL)
   UNFINISHED NIL 23 22 T SHOSTAK))
 (|MP_modeled_preserved_by_update| 0
  (|MP_modeled_preserved_by_update-1| NIL 3393591712 3394357838
   ("" (SKOSIMP*)
    (("" (EXPAND "related_states")
      (("" (USE "MP_modeled_implies_cp_not_halted")
        (("" (PROP)
          (("" (EXPAND* "MP_modeled?" "update_PState")
            (("" (PROP)
              (("1" (EXPAND "MVA_modeled?") (("1" (PROPAX) NIL NIL)) NIL)
               ("2" (EXPAND "Program_modeled?") (("2" (GROUND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|related_states| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MP_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |MonitoredProgramSemantics| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |AnnotatedProgramSemantics| NIL)
    (|MP_modeled_implies_cp_not_halted| FORMULA-DECL NIL
     |CorrectnessAnnProgram| NIL)
    (|APState| TYPE-EQ-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   9 10 T NIL))
 (|MP_modeled_implies_same_num_eval| 0
  (|MP_modeled_implies_same_num_eval-1| NIL 3393592500 3394357856
   ("" (SKOLEM!)
    (("" (SKOLEM!)
      (("" (INDUCT "n")
        (("1" (SKOSIMP) (("1" (EXPAND "eval") (("1" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("2" (SKOSIMP)
          (("2" (ASSERT) (("2" (EXPAND "eval" 1) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("3" (SKOSIMP)
          (("3" (ASSERT) (("3" (EXPAND "eval" 1) (("3" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("4" (SKOSIMP*) (("4" (EXPAND "eval" 1) (("4" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("5" (SKOSIMP*)
          (("5" (EXPAND "eval" 1)
            (("5" (LIFT-IF) (("5" (LIFT-IF) (("5" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("6" (SKOSIMP*)
          (("6" (EXPAND* "eval" "lookup")
            (("6" (USE "ann_program_preserves_state_vars")
              (("6" (LEMMA "wf_state_vars_local_or_field")
                (("6" (INST -1 "ap!1" "pstate(sAP!1)" "NumVarEval1_var!1")
                  (("6" (LEMMA "wf_state_vars_local_or_field")
                    (("6"
                      (INST -1 "program(mp!1)" "pstate(sMP!1)"
                       "NumVarEval1_var!1")
                      (("6"
                        (EXPAND* "related_states" "specification_requirements")
                        (("6" (FLATTEN)
                          (("6" (ASSERT)
                            (("6" (EXPAND* "wf_MP")
                              (("6" (EXPAND "wf_state" (-9 -10))
                                (("6" (FLATTEN)
                                  (("6"
                                    (HIDE -9 -10 -11 -12 -13 -14 -15 -16 -17
                                     -18 -19)
                                    (("6" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program_preserves_state_vars| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL) NIL
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    NIL
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|lookup_local| CONST-DECL "Val" |State| NIL)
    (|MP_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|is_local| CONST-DECL "boolean" |State| NIL)
    (|is_field| CONST-DECL "boolean" |State| NIL)
    (|lookup_field| CONST-DECL "Val" |State| NIL)
    (|val2int| CONST-DECL "int" |State| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|specification_requirements| CONST-DECL "boolean" |Equivalence| NIL)
    (|wf_state_vars_local_or_field| FORMULA-DECL NIL |State| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|NumExpr_induction| FORMULA-DECL NIL |NumExpr_adt| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |AnnotatedProgramSemantics| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |AnnotatedProgramSemantics| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|eval| DEF-DECL "int" |Evaluation| NIL)
    (|lookup| CONST-DECL "Val" |SemanticsJML| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |MonitoredProgramSemantics| NIL)
    (|update_GhostVars_type| CONST-DECL "boolean" |SemanticsJMLTypes| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |MonitoredProgramSemantics| NIL)
    (|update_PState_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|Excpt| TYPE-DECL NIL |Excpt_adt| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL)
    (|APState| TYPE-EQ-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|NumExpr| TYPE-DECL NIL |NumExpr_adt| NIL))
   1723 1723 T NIL))
 (|MP_modeled_implies_same_bool_eval| 0
  (|MP_modeled_implies_same_bool_eval-1| NIL 3393595270 3394357935
   ("" (SKOSIMP)
    (("" (SKOSIMP)
      (("" (EXPAND "related_states")
        (("" (INDUCT "b")
          (("1" (EXPAND "eval") (("1" (PROPAX) NIL NIL)) NIL)
           ("2" (EXPAND "eval") (("2" (PROPAX) NIL NIL)) NIL)
           ("3" (SKOSIMP)
            (("3" (EXPAND "eval" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)
           ("4" (SKOSIMP)
            (("4" (EXPAND "eval" 1)
              (("4" (ASSERT)
                (("4" (REPLACE -1)
                  (("4" (REPLACE -2) (("4" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("5" (SKOSIMP)
            (("5" (ASSERT)
              (("5" (EXPAND "eval" 1)
                (("5" (REPLACE -1)
                  (("5" (REPLACE -2) (("5" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("6" (SKOSIMP)
            (("6" (USE "MP_modeled_implies_same_num_eval")
              (("6" (LEMMA "MP_modeled_implies_same_num_eval")
                (("6" (INST -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Lt2_var!1")
                  (("6" (EXPAND "related_states")
                    (("6" (ASSERT)
                      (("6" (EXPAND "eval" 1)
                        (("6" (REPLACE -1)
                          (("6" (REPLACE -2) (("6" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("7" (SKOSIMP)
            (("7" (USE "MP_modeled_implies_same_num_eval")
              (("7" (LEMMA "MP_modeled_implies_same_num_eval")
                (("7" (INST -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Le2_var!1")
                  (("7" (EXPAND "related_states")
                    (("7" (ASSERT)
                      (("7" (EXPAND "eval" 1)
                        (("7" (REPLACE -1)
                          (("7" (REPLACE -2) (("7" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("8" (SKOSIMP)
            (("8" (USE "MP_modeled_implies_same_num_eval")
              (("8" (LEMMA "MP_modeled_implies_same_num_eval")
                (("8" (INST -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Eq2_var!1")
                  (("8" (EXPAND "related_states")
                    (("8" (ASSERT)
                      (("8" (EXPAND "eval" 1)
                        (("8" (REPLACE -1)
                          (("8" (REPLACE -2) (("8" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("9" (SKOSIMP)
            (("9" (USE "MP_modeled_implies_same_num_eval")
              (("9" (LEMMA "MP_modeled_implies_same_num_eval")
                (("9" (INST -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Neq2_var!1")
                  (("9" (EXPAND "related_states")
                    (("9" (ASSERT)
                      (("9" (EXPAND "eval" 1)
                        (("9" (REPLACE -1)
                          (("9" (REPLACE -2) (("9" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("10" (SKOSIMP)
            (("10" (USE "MP_modeled_implies_same_num_eval")
              (("10" (LEMMA "MP_modeled_implies_same_num_eval")
                (("10" (INST -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Ge2_var!1")
                  (("10" (EXPAND "related_states")
                    (("10" (ASSERT)
                      (("10" (EXPAND "eval" 1)
                        (("10" (REPLACE -1)
                          (("10" (REPLACE -2) (("10" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("11" (SKOSIMP)
            (("11" (USE "MP_modeled_implies_same_num_eval")
              (("11" (LEMMA "MP_modeled_implies_same_num_eval")
                (("11" (INST -1 "mp!1" "ap!1" "sMP!1" "sAP!1" "Gt2_var!1")
                  (("11" (EXPAND "related_states")
                    (("11" (ASSERT)
                      (("11" (EXPAND "eval" 1)
                        (("11" (REPLACE -1)
                          (("11" (REPLACE -2) (("11" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("12" (SKOSIMP)
            (("12" (EXPAND* "eval" "val2bool" "lookup")
              (("12" (USE "ann_program_preserves_state_vars")
                (("12" (LEMMA "wf_state_vars_local_or_field")
                  (("12"
                    (INST -1 "program(mp!1)" "pstate(sMP!1)"
                     "BoolVarEval1_var!1")
                    (("12"
                      (EXPAND* "related_states" "specification_requirements"
                       "wf_MP")
                      (("12" (FLATTEN)
                        (("12" (ASSERT)
                          (("12" (EXPAND "wf_state" (-9 -10))
                            (("12" (FLATTEN)
                              (("12" (ASSERT)
                                (("12"
                                  (HIDE -8 -9 -10 -11 -12 -13 -14 -15 -16 -17
                                   -18)
                                  (("12" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("13" (EXPAND "specification_requirements")
            (("13" (FLATTEN) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|BoolExpr| TYPE-DECL NIL |BoolExpr_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|APState| TYPE-EQ-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|MP_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Excpt| TYPE-DECL NIL |Excpt_adt| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|update_PState_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |MonitoredProgramSemantics| NIL)
    (|update_GhostVars_type| CONST-DECL "boolean" |SemanticsJMLTypes| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |MonitoredProgramSemantics| NIL)
    (|lookup| CONST-DECL "Val" |SemanticsJML| NIL)
    (|eval| DEF-DECL "bool" |Evaluation| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |AnnotatedProgramSemantics| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |AnnotatedProgramSemantics| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL) NIL
    (|specification_requirements| CONST-DECL "boolean" |Equivalence| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|BoolExpr_induction| FORMULA-DECL NIL |BoolExpr_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|NumExpr| TYPE-DECL NIL |NumExpr_adt| NIL)
    (|MP_modeled_implies_same_num_eval| FORMULA-DECL NIL
     |CorrectnessAnnProgram| NIL)
    (|val2bool| CONST-DECL "bool" |State| NIL)
    (|wf_state_vars_local_or_field| FORMULA-DECL NIL |State| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|is_field| CONST-DECL "boolean" |State| NIL)
    (|is_local| CONST-DECL "boolean" |State| NIL)
    (|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|MVA_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|lookup_field| CONST-DECL "Val" |State| NIL)
    (|lookup_local| CONST-DECL "Val" |State| NIL)
    (|cp| CONST-DECL "string" |AnnotateProgram| NIL)
    (|ann_program_preserves_state_vars| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL))
   7979 7976 T NIL))
 (|MP_modeled_preserved_by_assertion_checking_TCC1| 0
  (|MP_modeled_preserved_by_assertion_checking_TCC1-1| NIL 3393591169
   3394357944 ("" (SUBTYPE-TCC) NIL NIL) UNCHECKED
   ((|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL)
    (|MP_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_AState| CONST-DECL "boolean" |MVASemantics| NIL)
    (|wf_Store| CONST-DECL "boolean" |MVASemantics| NIL)
    (|specification_requirements| CONST-DECL "boolean" |Equivalence| NIL)
    (|well_behaved_MP| CONST-DECL "boolean" |Equivalence| NIL)
    (|well_behaved_MVA| CONST-DECL "boolean" |Equivalence| NIL)
    (|eval_action_behavior| CONST-DECL "boolean" |Equivalence| NIL)
    (|guard_to_expression_behavior| CONST-DECL "boolean" |Equivalence| NIL)
    (|on_method_entry| CONST-DECL "(on_method_event_type)" |SemanticsJML| NIL)
    (|on_method_exit_normal| CONST-DECL "(on_method_event_type)" |SemanticsJML|
     NIL)
    (|on_method_exit_exceptional| CONST-DECL "(on_method_event_type)"
     |SemanticsJML| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|APState| TYPE-EQ-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |AnnotatedProgramSemantics| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |AnnotatedProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL)
    (|is_local| CONST-DECL "boolean" |State| NIL)
    (|is_field| CONST-DECL "boolean" |State| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|well_behaved_Program| CONST-DECL "boolean" |Semantics| NIL)
    (|proper_subterm_set_clause| CONST-DECL "boolean" |ProgramFunctions| NIL)
    (|deriv_expr| CONST-DECL "bool" |Semantics| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|Excpt| TYPE-DECL NIL |Excpt_adt| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|update_PState_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |MonitoredProgramSemantics| NIL)
    (|update_GhostVars_type| CONST-DECL "boolean" |SemanticsJMLTypes| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |MonitoredProgramSemantics| NIL)
    (|lookup| CONST-DECL "Val" |SemanticsJML| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|deriv_stmt_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|deriv_stmt_rec_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|deriv_expr_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|deriv_expr_rec_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|execute_set_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|execute_set| CONST-DECL "(execute_set_type)" |SemanticsJML| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|execute_CaseJML_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|execute_CaseJML| CONST-DECL "(execute_CaseJML_type)" |SemanticsJML| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|on_method_event_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|on_method_entry_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|on_method_exit_normal_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|on_method_exit_exceptional_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|wf_new_vars| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|reserved_words| CONST-DECL "finite_set[string]" |AnnotateProgram| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL)
    (|disjoint_model_vars| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|invariants_are_booleans| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Guard| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL) NIL
    (|member| CONST-DECL "bool" |sets| NIL) NIL
    (|wf_vdsP| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL))
   828 828 NIL NIL))
 (|MP_modeled_preserved_by_assertion_checking_TCC2| 0
  (|MP_modeled_preserved_by_assertion_checking_TCC2-1| NIL 3393591169
   3394357952 ("" (SUBTYPE-TCC) NIL NIL) UNCHECKED
   ((|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|deriv_expr_rec| CONST-DECL "deriv_expr_type(n)" |Semantics| NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL)
    (|MP_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_AState| CONST-DECL "boolean" |MVASemantics| NIL)
    (|wf_Store| CONST-DECL "boolean" |MVASemantics| NIL)
    (|specification_requirements| CONST-DECL "boolean" |Equivalence| NIL)
    (|well_behaved_MP| CONST-DECL "boolean" |Equivalence| NIL)
    (|well_behaved_MVA| CONST-DECL "boolean" |Equivalence| NIL)
    (|eval_action_behavior| CONST-DECL "boolean" |Equivalence| NIL)
    (|guard_to_expression_behavior| CONST-DECL "boolean" |Equivalence| NIL)
    (|on_method_entry| CONST-DECL "(on_method_event_type)" |SemanticsJML| NIL)
    (|on_method_exit_normal| CONST-DECL "(on_method_event_type)" |SemanticsJML|
     NIL)
    (|on_method_exit_exceptional| CONST-DECL "(on_method_event_type)"
     |SemanticsJML| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|APState| TYPE-EQ-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |AnnotatedProgramSemantics| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |AnnotatedProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL)
    (|is_local| CONST-DECL "boolean" |State| NIL)
    (|is_field| CONST-DECL "boolean" |State| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|well_behaved_Program| CONST-DECL "boolean" |Semantics| NIL)
    (|proper_subterm_set_clause| CONST-DECL "boolean" |ProgramFunctions| NIL)
    (|deriv_expr| CONST-DECL "bool" |Semantics| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|Excpt| TYPE-DECL NIL |Excpt_adt| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|update_PState_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |MonitoredProgramSemantics| NIL)
    (|update_GhostVars_type| CONST-DECL "boolean" |SemanticsJMLTypes| NIL)
    (|update_GhostVars| CONST-DECL "(update_GhostVars_type)"
     |MonitoredProgramSemantics| NIL)
    (|lookup| CONST-DECL "Val" |SemanticsJML| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|deriv_stmt_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|deriv_stmt_rec_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|deriv_expr_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|deriv_expr_rec_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|execute_set_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|execute_set| CONST-DECL "(execute_set_type)" |SemanticsJML| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|execute_CaseJML_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|execute_CaseJML| CONST-DECL "(execute_CaseJML_type)" |SemanticsJML| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|on_method_event_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|on_method_entry_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|on_method_exit_normal_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|on_method_exit_exceptional_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|wf_new_vars| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|reserved_words| CONST-DECL "finite_set[string]" |AnnotateProgram| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL)
    (|disjoint_model_vars| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|invariants_are_booleans| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Guard| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL) NIL
    (|member| CONST-DECL "bool" |sets| NIL) NIL
    (|wf_vdsP| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL))
   826 823 NIL NIL))
 (|MP_modeled_preserved_by_assertion_checking| 0
  (|MP_modeled_preserved_by_assertion_checking-2| NIL 3393591227 3394357957
   ("" (SKOSIMP*)
    (("" (EXPAND* "related_states" "check_assertion")
      (("" (FLATTEN)
        (("" (SKOSIMP*)
          (("" (INST -6 "v!1" "v!2" "tau1!1" "tau1!2")
            (("" (ASSERT)
              (("" (FLATTEN)
                (("" (LIFT-IF)
                  (("" (GROUND)
                    (("" (USE "MP_modeled_preserved_by_update")
                      (("" (EXPAND "related_states")
                        (("" (LEMMA "MP_modeled_implies_same_exception")
                          (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 481 481 T NIL)
  (|MP_modeled_preserved_by_assertion_checking-1| NIL 3393591178 3393591212
   ("" (SKOSIMP*)
    (("" (EXPAND* "related_states" "check_assertion")
      (("" (FLATTEN)
        (("" (SKOSIMP*)
          (("" (INST -6 "v!1" "v!2" "tau1!1" "tau1!2")
            (("" (ASSERT)
              (("" (FLATTEN)
                (("" (LIFT-IF)
                  (("" (GROUND)
                    (("" (USE "MP_modeled_preserved_by_update2")
                      (("" (EXPAND "related_states")
                        (("" (LEMMA "MP_modeled_implies_same_exception")
                          (("" (INST -1 "tau1!1" "tau1!2")
                            (("" (ASSERT) NIL))))))))))))))))))))))))))
    NIL)
   UNFINISHED NIL 31813 660 T NIL))
 (|on_method_entry_for_ann_method_equivalence_TCC1| 0
  (|on_method_entry_for_ann_method_equivalence_TCC1-1| NIL 3393591169
   3394357957
   ("" (SKOSIMP)
    (("" (EXPAND* "related_states" "specification_requirements")
      (("" (PROP) NIL NIL)) NIL))
    NIL)
   UNCHECKED
   ((|specification_requirements| CONST-DECL "boolean" |Equivalence| NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL))
   3 3 T NIL))
 (|initial_states_are_equivalent| 0
  (|initial_states_are_equivalent-1| NIL 3394358076 3394359787
   ("" (SKOSIMP*)
    (("" (AUTO-REWRITE "ann_program_preserves_locals_eq")
      (("" (AUTO-REWRITE "ann_program_preserves_fields_eq")
        (("" (EXPAND "MP_modeled?")
          (("" (SPLIT 1)
            (("1" (EXPAND "MVA_modeled?")
              (("1" (SPLIT 1)
                (("1" (EXPAND "initial_MP_state")
                  (("1" (EXPAND "initial_MVA_state")
                    (("1" (EXPAND "initial_AP_state")
                      (("1" (LIFT-IF)
                        (("1" (ASSERT)
                          (("1" (SPLIT 1)
                            (("1" (EXPAND "ann_program")
                              (("1" (EXPAND "get_GhostDecl")
                                (("1" (EXPAND "getGhostDecls")
                                  (("1" (LIFT-IF)
                                    (("1" (ASSERT)
                                      (("1" (SPLIT -1)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (REWRITE "nonempty_exists")
                                          (("1"
                                            (INST 1
                                             "(# name := cp, jtype := IntType, init_val :=  Int(unique(init_cp(mva(mp!1)))) #)")
                                            (("1" (ALL-TYPEPREDS)
                                              (("1" (EXPAND "compatible")
                                                (("1" (SKOSIMP*)
                                                  (("1"
                                                    (INST 1
                                                     "ann_class(mp!1)(c!1)")
                                                    (("1" (SPLIT 1)
                                                      (("1" (INST?) NIL NIL)
                                                       ("2"
                                                        (EXPAND "ann_class")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "union")
                                                            (("2"
                                                              (EXPAND "member")
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "new_gvds")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (EXPAND
                                                       "ann_program_pre")
                                                      (("2" (FLATTEN)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "defined?")
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (EXPAND "ann_program_pre")
                                              (("2" (FLATTEN)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (EXPAND "ann_program")
                                (("2" (EXPAND "get_GhostDecl")
                                  (("2" (LIFT-IF)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT 1)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "getGhostDecls")
                                            (("1" (POSTPONE) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*) (("2" (POSTPONE) NIL NIL)) NIL)
                 ("3" (POSTPONE) NIL NIL))
                NIL))
              NIL)
             ("2" (POSTPONE) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 71019 7058 T SHOSTAK))
 (|deriv_expr_maintains_equivalence| 0
  (|deriv_expr_maintains_equivalence-1| NIL 3393591001 3394357959
   ("" (SKOSIMP)
    (("" (INDUCT E)
      (("1" (SKOSIMP*)
        (("1" (EXPAND "related_states")
          (("1" (FLATTEN)
            (("1" (EXPAND "deriv_expr" (-7 -8))
              (("1" (EXPAND "deriv_expr" (-7 -8))
                (("1" (USE "MP_modeled_implies_same_exception")
                  (("1" (ASSERT)
                    (("1" (CASE "up?(ex(pstate(sMP1!1)))")
                      (("1" (GROUND) NIL)
                       ("2" (ASSERT)
                        (("2" (FLATTEN)
                          (("2" (SKOSIMP*)
                            (("2"
                              (INST -2 "v1!1" "v2!1" "sMP1!1" "tau!1" "sAP1!1"
                               "tau!2" "n1!1 - 1" "n2!1 - 1")
                              (("1" (EXPAND "deriv_expr" -2)
                                (("1" (ASSERT)
                                  (("1" (LIFT-IF)
                                    (("1"
                                      (LEMMA
                                       "MP_modeled_implies_same_exception")
                                      (("1" (INST -1 "tau!1" "tau!2")
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1"
                                              (CASE "up?(ex(pstate(tau!1)))")
                                              (("1" (ASSERT) NIL)
                                               ("2" (ASSERT)
                                                (("2"
                                                  (USE
                                                   "MP_modeled_preserved_by_update")
                                                  (("2"
                                                    (EXPAND "related_states")
                                                    (("2"
                                                      (LEMMA
                                                       "related_states_implies_wf_mp_and_ap")
                                                      (("2"
                                                        (INST -1 "mp!1" "ap!1"
                                                         "sMP1!1" "sAP1!1")
                                                        (("2"
                                                          (EXPAND
                                                           "related_states")
                                                          (("2"
                                                            (LEMMA
                                                             "deriv_expr_yields_wf_state_MP")
                                                            (("2"
                                                              (INST -1 "mp!1"
                                                               "Assign2_var!1"
                                                               "v1!1" "sMP1!1"
                                                               "tau!1"
                                                               "n1!1 -1")
                                                              (("2"
                                                                (LEMMA
                                                                 "deriv_expr_yields_wf_state_AP")
                                                                (("2"
                                                                  (INST -1
                                                                   "ap!1"
                                                                   "Assign2_var!1"
                                                                   "v2!1"
                                                                   "sAP1!1"
                                                                   "tau!2"
                                                                   "n2!1 -1")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -10)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "deriv_expr"
                                                                         (-1
                                                                          -2))
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL)))))))))))))))))))))))))))))))))))))))))))
                               ("2" (ASSERT) NIL)
                               ("3" (ASSERT) NIL)))))))))))))))))))))))))
       ("2" (SKOSIMP*)
        (("2" (EXPAND* "related_states" "deriv_expr")
          (("2" (EXPAND "deriv_expr")
            (("2" (FLATTEN)
              (("2" (USE "MP_modeled_implies_same_exception")
                (("2" (ASSERT)
                  (("2" (CASE "up?(ex(pstate(sMP1!1)))")
                    (("1" (GROUND) NIL)
                     ("2" (ASSERT)
                      (("2" (PROP)
                        (("1" (USE "MP_modeled_implies_same_bool_eval")
                          (("1" (ASSERT)
                            (("1" (EXPAND "related_states")
                              (("1" (PROPAX) NIL)))))))
                         ("2" (ASSERT) NIL)))))))))))))))))))
       ("3" (SKOSIMP*)
        (("3" (EXPAND "related_states")
          (("3" (FLATTEN)
            (("3" (EXPAND "deriv_expr" (-9 -10))
              (("3" (EXPAND "deriv_expr" (-9 -10))
                (("3" (USE "MP_modeled_implies_same_exception")
                  (("3" (ASSERT)
                    (("3" (CASE "up?(ex(pstate(sMP1!1)))")
                      (("1" (GROUND) NIL)
                       ("2" (ASSERT)
                        (("2" (SKOSIMP*)
                          (("2"
                            (INST -2 "v1!2" "v1!3" "sMP1!1" "tau!1" "sAP1!1"
                             "tau!2" "m1!1" "m1!2")
                            (("2" (EXPAND "deriv_expr" -2)
                              (("2" (ASSERT)
                                (("2" (FLATTEN)
                                  (("2" (LEMMA "deriv_expr_yields_wf_state_MP")
                                    (("2"
                                      (INST -1 "mp!1" "CondExpr1_var!1" "v1!2"
                                       "sMP1!1" "tau!1" "m1!1")
                                      (("2"
                                        (LEMMA "deriv_expr_yields_wf_state_AP")
                                        (("2"
                                          (INST -1 "ap!1" "CondExpr1_var!1"
                                           "v1!3" "sAP1!1" "tau!2" "m1!2")
                                          (("2" (EXPAND "deriv_expr" (-1 -2))
                                            (("2"
                                              (USE
                                               "ann_program_yields_wf_program")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (EXPAND "ann_program_pre")
                                                  (("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (HIDE -4 -10 -12 -13
                                                         -14 -15 -16 -19 1)
                                                        (("2" (LIFT-IF)
                                                          (("2" (SPLIT)
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (INST -8
                                                                   "v1!1"
                                                                   "v2!1"
                                                                   "tau!1"
                                                                   "sMP2!1"
                                                                   "tau!2"
                                                                   "sAP2!1"
                                                                   "m2!1"
                                                                   "m2!2")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "deriv_expr"
                                                                     -8)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL)))))))))
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (INST -8
                                                                   "v1!1"
                                                                   "v2!1"
                                                                   "tau!1"
                                                                   "sMP2!1"
                                                                   "tau!2"
                                                                   "sAP2!1"
                                                                   "m2!1"
                                                                   "m2!2")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "deriv_expr"
                                                                     -8)
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("4" (SKOSIMP*)
        (("4" (EXPAND "related_states")
          (("4" (FLATTEN)
            (("4" (EXPAND "deriv_expr" (-8 -9))
              (("4" (EXPAND "deriv_expr" (-8 -9))
                (("4" (USE "MP_modeled_implies_same_exception")
                  (("4" (ASSERT)
                    (("4" (CASE "up?(ex(pstate(sMP1!1)))")
                      (("1" (GROUND) NIL)
                       ("2" (ASSERT)
                        (("2" (SKOSIMP*)
                          (("2"
                            (INST -2 "a!1" "a!2" "sMP1!1" "tau1!1" "sAP1!1"
                             "tau1!2" "m1!1" "m1!2")
                            (("2" (EXPAND "deriv_expr" -2)
                              (("2" (ASSERT)
                                (("2" (FLATTEN)
                                  (("2"
                                    (INST -4 "pv!1" "pv!2" "tau1!1" "tau2!1"
                                     "tau1!2" "tau2!2" "m2!1" "m2!2")
                                    (("2" (EXPAND "deriv_expr" -4)
                                      (("2" (ASSERT)
                                        (("2"
                                          (LEMMA
                                           "deriv_expr_yields_wf_state_MP")
                                          (("2"
                                            (INST -1 "mp!1" "MethodCall1_var!1"
                                             "a!1" "sMP1!1" "tau1!1" "m1!1")
                                            (("2"
                                              (LEMMA
                                               "deriv_expr_yields_wf_state_AP")
                                              (("2"
                                                (INST -1 "ap!1"
                                                 "MethodCall1_var!1" "a!2"
                                                 "sAP1!1" "tau1!2" "m1!2")
                                                (("2"
                                                  (LEMMA
                                                   "related_states_implies_wf_mp_and_ap")
                                                  (("2"
                                                    (INST -1 "mp!1" "ap!1"
                                                     "sMP1!1" "sAP1!1")
                                                    (("2"
                                                      (EXPAND "related_states")
                                                      (("2" (FLATTEN)
                                                        (("2"
                                                          (EXPAND "deriv_expr"
                                                                  (-3 -4))
                                                          (("2" (ASSERT)
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (HIDE -5 -12
                                                                 -13 -14 -15
                                                                 -16 -27 -28)
                                                                (("2"
                                                                  (LEMMA
                                                                   "deriv_expr_yields_wf_state_MP")
                                                                  (("2"
                                                                    (INST -1
                                                                     "mp!1"
                                                                     "MethodCall3_var!1"
                                                                     "pv!1"
                                                                     "tau1!1"
                                                                     "tau2!1"
                                                                     "m2!1")
                                                                    (("2"
                                                                      (LEMMA
                                                                       "deriv_expr_yields_wf_state_AP")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "ap!1"
                                                                         "MethodCall3_var!1"
                                                                         "pv!2"
                                                                         "tau1!2"
                                                                         "tau2!2"
                                                                         "m2!2")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "deriv_expr"
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (HIDE
                                                                             -5
                                                                             -6
                                                                             -8
                                                                             -13
                                                                             -23
                                                                             1)
                                                                            (("2"
                                                                              (CASE
                                                                                  "MP_modeled?(tau3!1, tau3!2)")
                                                                              (("1"
                                                                                (CASE
                                                                                    "wf_state(mp!1)(tau3!1) AND wf_state(ap!1)(tau3!2)")
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -4
                                                                                     -5
                                                                                     -10
                                                                                     -13
                                                                                     -22)
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "IF name(down(get_class(program(mp!1))(a!1, pstate(tau3!1)))) = class_name(mva(mp!1)) THEN md!2 = ann_method(mp!1)(md!1) ELSE md!2 = md!1 ENDIF")
                                                                                      (("1"
                                                                                        (SPLIT)
                                                                                        (("1"
                                                                                          (FLATTEN)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             -12
                                                                                             -20)
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "MP_modeled?(tau4!1, tau4!2)")
                                                                                              (("1"
                                                                                                (POSTPONE)
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (LEMMA
                                                                                                 "on_method_entry_for_ann_method_equivalence")
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "mp!1"
                                                                                                   "ap!1"
                                                                                                   "tau3!1"
                                                                                                   "tau4!1"
                                                                                                   "tau3!2"
                                                                                                   "tau4!2"
                                                                                                   "md!1"
                                                                                                   "md!2"
                                                                                                   "a!1"
                                                                                                   "m3!1"
                                                                                                   "m3!2"
                                                                                                   "LAMBDA (p_1: MonitoredProgram[CP, string])
                                                                                (s: Stmt[string],
                                                                                 sigma1_1, sigma2_1: MPState[CP, string])
                                                                                (m_1: below(1 + m3!1)):
                                                                           deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (p: MonitoredProgram[CP, string])
                                                                                (c: Expr[string],
                                                                                 sigma1: MPState[CP, string], v: Val,
                                                                                 sigma2: MPState[CP, string])
                                                                                (m: below(1 + m3!1)):
                                                                           deriv_expr(p)
                                                                                     (c, sigma1, v, sigma2)
                                                                                     (m)
                                                                                     (LAMBDA
                                                                                      (p_1: MonitoredProgram[CP, string])
                                                                                      (s: Stmt[string],
                                                                                       sigma1_1,
                                                                                       sigma2_1: MPState[CP, string])
                                                                                      (m_1: below(m)):
                                                                                      deriv_stmt
                                                                                      (p_1)(s, sigma1_1, sigma2_1)(m_1))"
                                                                                                   "LAMBDA (p_1: Program[string])
                                                                                (s: Stmt[string],
                                                                                 sigma1_1, sigma2_1: APState[string])
                                                                                (m_1: below(1 + m3!2)):
                                                                           deriv_stmt(p_1)(s, sigma1_1, sigma2_1)(m_1)"
                                                                                                   "LAMBDA (p: Program[string])
                                                                                (c: Expr[string], sigma1: APState[string],
                                                                                 v: Val, sigma2: APState[string])
                                                                                (m: below(1 + m3!2)):
                                                                           deriv_expr(p)
                                                                                     (c, sigma1, v, sigma2)
                                                                                     (m)
                                                                                     (LAMBDA
                                                                                      (p_1: Program[string])
                                                                                      (s: Stmt[string],
                                                                                       sigma1_1, sigma2_1: APState[string])
                                                                                      (m_1: below(m)):
                                                                                      deriv_stmt
                                                                                      (p_1)(s, sigma1_1, sigma2_1)(m_1))")
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "related_states"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL)))))))))))))
                                                                                         ("2"
                                                                                          (FLATTEN)
                                                                                          (("2"
                                                                                            (POSTPONE)
                                                                                            NIL)))))
                                                                                       ("2"
                                                                                        (USE
                                                                                         "lookup_mthd_ann_program")
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -11)
                                                                                          (("1"
                                                                                            (SPLIT
                                                                                             -19)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "id")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL)))))
                                                                                             ("2"
                                                                                              (PROPAX)
                                                                                              NIL)))
                                                                                           ("2"
                                                                                            (PROPAX)
                                                                                            NIL)))))
                                                                                       ("3"
                                                                                        (USE
                                                                                         "get_class_definedness")
                                                                                        (("3"
                                                                                          (ASSERT)
                                                                                          (("3"
                                                                                            (EXPAND
                                                                                             "wf_state"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (PROPAX)
                                                                                              NIL)))))))))))))
                                                                                 ("2"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-2
                                                                                    -3
                                                                                    -4
                                                                                    -5
                                                                                    -11
                                                                                    -20
                                                                                    1))
                                                                                  (("2"
                                                                                    (SPLIT)
                                                                                    (("1"
                                                                                      (USE
                                                                                       "wf_update_state_MP")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           -4
                                                                                           -5
                                                                                           -7)
                                                                                          (("1"
                                                                                            (LIFT-IF)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               -4)
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (SKOSIMP*)
                                                                                                    (("1"
                                                                                                      (GRIND)
                                                                                                      NIL)))))))
                                                                                               ("2"
                                                                                                (ASSERT)
                                                                                                NIL)))))))))))
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -5)
                                                                                      (("2"
                                                                                        (LIFT-IF)
                                                                                        (("2"
                                                                                          (SPLIT)
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (USE
                                                                                               "wf_update_state_AP")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (SKOLEM!)
                                                                                                  (("1"
                                                                                                    (GRIND)
                                                                                                    NIL)))))))))
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            NIL)))))))))))))
                                                                               ("2"
                                                                                (HIDE
                                                                                 -6
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 -15
                                                                                 -16
                                                                                 -17
                                                                                 -18
                                                                                 -20
                                                                                 -21
                                                                                 -22
                                                                                 -23
                                                                                 -24
                                                                                 -25
                                                                                 -26
                                                                                 -27
                                                                                 2)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "MP_modeled_implies_same_exception")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "tau2!1"
                                                                                     "tau2!2")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "bottom?(ex(pstate(tau2!1))) AND Null?(a!1)")
                                                                                        (("1"
                                                                                          (FLATTEN)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (USE
                                                                                               "MP_modeled_preserved_by_update")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "related_states")
                                                                                                (("1"
                                                                                                  (PROPAX)
                                                                                                  NIL)))))))))
                                                                                         ("2"
                                                                                          (SPLIT)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       ("5" (SKOSIMP*)
        (("5" (EXPAND* "related_states" "deriv_expr")
          (("5" (EXPAND "deriv_expr")
            (("5" (FLATTEN)
              (("5" (USE "MP_modeled_implies_same_exception")
                (("5" (ASSERT)
                  (("5" (CASE "up?(ex(pstate(sMP1!1)))")
                    (("1" (GROUND) NIL)
                     ("2" (ASSERT)
                      (("2" (PROP)
                        (("1" (USE "MP_modeled_implies_same_num_eval")
                          (("1" (ASSERT)
                            (("1" (EXPAND "related_states")
                              (("1" (PROPAX) NIL)))))))
                         ("2" (ASSERT) NIL)))))))))))))))))))
       ("6" (SKOSIMP*)
        (("6" (EXPAND* "related_states" "deriv_expr")
          (("6" (EXPAND "deriv_expr")
            (("6" (FLATTEN)
              (("6" (USE "MP_modeled_implies_same_exception")
                (("6" (ASSERT)
                  (("6" (CASE "up?(ex(pstate(sMP1!1)))")
                    (("1" (GROUND) NIL)
                     ("2" (ASSERT)
                      (("2" (PROP)
                        (("1" (CASE "RExpr1_var!1 = Null")
                          (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))
                         ("2" (ASSERT) NIL))))))))))))))))))))))
    NIL)
   UNFINISHED NIL 226 226 NIL NIL))
 (|deriv_stmt_maintains_equivalence| 0
  (|deriv_stmt_maintains_equivalence-1| NIL 3394257849 3394357968
   ("" (SKOSIMP)
    (("" (INDUCT "c")
      (("1" (SKOSIMP*)
        (("1" (USE "every_is_forall[[Expr, Stmt]]")
          (("1" (REWRITE -1)
            (("1" (EXPAND "deriv_stmt" (-3 -4))
              (("1" (COPY -2)
                (("1" (EXPAND "related_states" -1)
                  (("1" (FLATTEN)
                    (("1" (USE "MP_modeled_implies_same_exception")
                      (("1" (ASSERT)
                        (("1" (SPLIT)
                          (("1" (GROUND) NIL NIL)
                           ("2" (GROUND)
                            (("2" (EXPAND "execute_CaseJML")
                              (("2" (LIFT-IF)
                                (("2" (GROUND)
                                  (("2" (EXPAND "deriv_stmt" (-2 -5))
                                    (("2" (SKOSIMP*) (("2" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "deriv_stmt" (-4 -5))
          (("2" (COPY -3)
            (("2" (EXPAND "related_states" -1)
              (("2" (USE "MP_modeled_implies_same_exception")
                (("2" (GROUND)
                  (("2" (SKOSIMP*)
                    (("2" (LIFT-IF)
                      (("2" (LEMMA "deriv_expr_maintains_equivalence")
                        (("2"
                          (INST - "mp!1" "ap!1" "IfThenElse1_var!1" "v!2" "v!1"
                           "sMP1!1" "tau!2" "sAP1!1" "tau!1" "m1!2" "m1!1")
                          (("2" (EXPAND "deriv_expr" -1)
                            (("2" (CASE "wf_state(mp!1)(tau!2)")
                              (("1" (CASE "wf_state(ap!1)(tau!1)")
                                (("1" (GROUND)
                                  (("1"
                                    (INST - "tau!2" "sMP2!1" "tau!1" "sAP2!1"
                                     "m2!2" "m2!1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "related_states" 3)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (INST -20 "tau!2" "sMP2!1" "tau!1" "sAP2!1"
                                     "m2!2" "m2!1")
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "related_states" 5)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "deriv_expr_yields_wf_state_AP")
                                  (("2" (HIDE-ALL-BUT (-1 -5 -13 -14 -16 1))
                                    (("2"
                                      (INST - "ap!1" "IfThenElse1_var!1" "v!1"
                                       "sAP1!1" "tau!1" "m1!1")
                                      (("2" (EXPAND "deriv_expr" -1)
                                        (("2" (ASSERT)
                                          (("2"
                                            (USE
                                             "ann_program_yields_wf_program")
                                            (("2"
                                              (EXPAND
                                               "specification_requirements")
                                              (("2" (GROUND)
                                                (("2"
                                                  (LEMMA
                                                   "deriv_stmt_yields_wf_state_AP")
                                                  (("2" (SKOSIMP*)
                                                    (("2" (INST?)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-7 -11 -12 -13 1))
                                (("2" (LEMMA "deriv_expr_yields_wf_state_MP")
                                  (("2" (EXPAND "deriv_expr" -1)
                                    (("2" (INST?)
                                      (("2"
                                        (EXPAND "specification_requirements")
                                        (("2" (GROUND)
                                          (("2" (SKOSIMP*)
                                            (("2"
                                              (LEMMA
                                               "deriv_stmt_yields_wf_state_MP")
                                              (("2" (INST?)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (SKOSIMP*)
        (("3" (EXPAND "deriv_stmt" (-4 -5))
          (("3" (COPY -3)
            (("3" (EXPAND "related_states" -1)
              (("3" (USE "MP_modeled_implies_same_exception")
                (("3" (GROUND)
                  (("3" (SKOSIMP*)
                    (("3"
                      (INST - "sMP1!1" "tau!2" "sAP1!1" "tau!1" "m1!2" "m1!1")
                      (("3"
                        (INST - "tau!2" "sMP2!1" "tau!1" "sAP2!1" "m2!2"
                         "m2!1")
                        (("3" (ASSERT)
                          (("3" (EXPAND "related_states" 3)
                            (("3" (SPLIT)
                              (("1" (USE "deriv_stmt_yields_wf_state_MP")
                                (("1" (EXPAND "specification_requirements")
                                  (("1" (GROUND) NIL NIL)) NIL))
                                NIL)
                               ("2" (USE "deriv_stmt_yields_wf_state_AP")
                                (("2" (ASSERT)
                                  (("2" (USE "ann_program_yields_wf_program")
                                    (("2" (EXPAND "specification_requirements")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("4" (SKOSIMP*)
        (("4" (EXPAND* "deriv_stmt" "related_states")
          (("4" (USE "MP_modeled_implies_same_exception")
            (("4" (GROUND)
              (("4" (EXPAND "execute_set")
                (("4" (SKOSIMP*)
                  (("4" (LEMMA "deriv_expr_maintains_equivalence")
                    (("4" (POSTPONE) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)
       ("7" (POSTPONE) NIL NIL) ("8" (POSTPONE) NIL NIL)
       ("9" (POSTPONE) NIL NIL))
      NIL))
    NIL)
   UNFINISHED NIL 867 867 T SHOSTAK))
 (|correcteness_of_ann_program_TCC1| 0
  (|correcteness_of_ann_program_TCC1-1| NIL 3393590714 3394357968
   ("" (SKOSIMP)
    (("" (EXPAND "specification_requirements") (("" (FLATTEN) NIL NIL)) NIL))
    NIL)
   UNCHECKED
   ((|specification_requirements| CONST-DECL "boolean" |Equivalence| NIL)) 22
   22 T NIL))
 (|correcteness_of_ann_program| 0
  (|correcteness_of_ann_program-1| NIL 3393590728 3394357969
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "run_monitored_program" "run_annotated_program"
       "run_FullProgram" "derives")
      (("" (SKOSIMP*)
        (("" (USE "initial_states_are_equivalent")
          (("" (COPY -2)
            (("" (EXPAND "specification_requirements" -1)
              (("" (GROUND)
                (("" (LEMMA "deriv_stmt_maintains_equivalence")
                  ((""
                    (INST -1 "mp!1" "ann_program(mp!1)" "n!1" "n!2"
                     "StmtExpr(MethodCall(RExpr(RefVarEval(This)), name(main!1), NExpr(Int(arg!1))))"
                     "initial_MP_state(mp!1)(root_object!1)" "sMP!1"
                     "initial_AP_state(ann_program(mp!1))(root_object!1)"
                     "sAP!1")
                    (("" (ASSERT)
                      (("" (EXPAND "related_states")
                        (("" (USE "wf_initial_MP_state")
                          (("" (USE "wf_initial_AP_state")
                            (("" (USE "ann_program_yields_wf_program")
                              (("" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|run_annotated_program| CONST-DECL "boolean" |AnnotatedProgramSemantics|
     NIL)
    (|run_FullProgram| CONST-DECL "boolean" |Semantics| NIL)
    (|run_monitored_program| CONST-DECL "boolean" |MonitoredProgramSemantics|
     NIL)
    (|initial_states_are_equivalent| FORMULA-DECL NIL |CorrectnessAnnProgram|
     NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|deriv_stmt_maintains_equivalence| FORMULA-DECL NIL
     |CorrectnessAnnProgram| NIL)
    (|wf_initial_MP_state| FORMULA-DECL NIL |MonitoredProgramSemantics| NIL)
    (|ann_program_yields_wf_program| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_initial_AP_state| FORMULA-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL)
    (|initial_AP_state| CONST-DECL "APState" |AnnotatedProgramSemantics| NIL)
    (|APState| TYPE-EQ-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|initial_MP_state| CONST-DECL "MPState" |MonitoredProgramSemantics| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |NumExpr_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[NumExpr -> boolean]" |NumExpr_adt| NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Expr_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Expr -> boolean]" |Expr_adt| NIL)
    (|NumExpr| TYPE-DECL NIL |NumExpr_adt| NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|RefVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (RefVarEval?)]" |RefExpr_adt|
     NIL)
    (|RefVarEval?| ADT-RECOGNIZER-DECL "[RefExpr -> boolean]" |RefExpr_adt|
     NIL)
    (|RExpr| ADT-CONSTRUCTOR-DECL "[RefExpr -> (RExpr?)]" |Expr_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Expr -> boolean]" |Expr_adt| NIL)
    (|RefExpr| TYPE-DECL NIL |RefExpr_adt| NIL)
    (|MethodCall| ADT-CONSTRUCTOR-DECL "[[Expr, Name, Expr] -> (MethodCall?)]"
     |Expr_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Expr -> boolean]" |Expr_adt| NIL)
    (|StmtExpr| ADT-CONSTRUCTOR-DECL "[Expr -> (StmtExpr?)]" |Stmt_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Stmt -> boolean]" |Stmt_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|specification_requirements| CONST-DECL "boolean" |Equivalence| NIL))
   144 144 NIL NIL)))

