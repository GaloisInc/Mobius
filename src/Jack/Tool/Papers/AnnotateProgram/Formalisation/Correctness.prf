(|CorrectnessAnnProgram|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3396605539 NIL ("" (ASSUMING-TCC) NIL NIL)
   UNCHECKED NIL NIL NIL NIL NIL))
 (|IMP_Equivalence_TCC1| 0
  (|IMP_Equivalence_TCC1-1| NIL 3396605539 NIL ("" (ASSUMING-TCC) NIL NIL)
   UNCHECKED NIL NIL NIL NIL NIL))
 (|IMP_Equivalence_TCC2| 0
  (|IMP_Equivalence_TCC2-1| NIL 3396605539 NIL ("" (ASSUMING-TCC) NIL NIL)
   UNCHECKED NIL NIL NIL NIL NIL))
 (|MP_modeled_implies_same_exception| 0
  (|MP_modeled_implies_same_exception-1| NIL 3393591341 3394357838
   ("" (SKOSIMP)
    (("" (SKOSIMP)
      (("" (EXPAND* "MP_modeled?" "Program_modeled?") (("" (GROUND) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 3 3 T NIL))
 (|MP_modeled_preserved_by_update_TCC1| 0
  (|MP_modeled_preserved_by_update_TCC1-1| NIL 3396605539 NIL
   ("" (SUBTYPE-TCC) NIL NIL) UNCHECKED NIL NIL NIL NIL NIL))
 (|MP_modeled_preserved_by_update_TCC2| 0
  (|MP_modeled_preserved_by_update_TCC2-1| NIL 3396605539 NIL
   ("" (SUBTYPE-TCC) NIL NIL) UNCHECKED NIL NIL NIL NIL NIL))
 (|MP_modeled_preserved_by_update| 0
  (|MP_modeled_preserved_by_update-1| NIL 3393591712 3395031909
   ("" (SKOSIMP*)
    (("" (EXPAND* "related_states" "halted_implies_JMLExc")
      (("" (PROP)
        (("" (EXPAND* "MP_modeled?" "update_PState")
          (("" (PROP)
            (("1" (EXPAND "MVA_modeled?")
              (("1"
                (EXPAND* "MVA_modeled?" "MVA_cp_modeled?" "MVA_cps_modeled?"
                 "MVA_vars_modeled?")
                NIL NIL))
              NIL)
             ("2" (EXPAND* "Program_modeled?" "Program_gvs_modeled?")
              (("2" (GROUND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|halted_implies_JMLExc| CONST-DECL "boolean" |Equivalence| NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |MonitoredProgramSemantics| NIL)
    (|update_PState| CONST-DECL "(update_PState_type)"
     |AnnotatedProgramSemantics| NIL)
    (|MP_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_gvs_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|Program_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_cp_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_cps_modeled?| CONST-DECL "boolean" |Equivalence| NIL)
    (|MVA_vars_modeled?| CONST-DECL "boolean" |Equivalence| NIL))
   195384 420 T NIL))
 (|MP_modeled_preserved_by_assertion_checking| 0
  (|MP_modeled_preserved_by_assertion_checking-2| NIL 3393591227 3394357957
   ("" (SKOSIMP*)
    (("" (EXPAND* "related_states" "check_assertion")
      (("" (FLATTEN)
        (("" (SKOSIMP*)
          (("" (INST -6 "v!1" "v!2" "tau1!1" "tau1!2")
            (("" (ASSERT)
              (("" (FLATTEN)
                (("" (LIFT-IF)
                  (("" (GROUND)
                    (("" (USE "MP_modeled_preserved_by_update")
                      (("" (EXPAND "related_states")
                        (("" (LEMMA "MP_modeled_implies_same_exception")
                          (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 481 481 T NIL)
  (|MP_modeled_preserved_by_assertion_checking-1| NIL 3393591178 3393591212
   ("" (SKOSIMP*)
    (("" (EXPAND* "related_states" "check_assertion")
      (("" (FLATTEN)
        (("" (SKOSIMP*)
          (("" (INST -6 "v!1" "v!2" "tau1!1" "tau1!2")
            (("" (ASSERT)
              (("" (FLATTEN)
                (("" (LIFT-IF)
                  (("" (GROUND)
                    (("" (USE "MP_modeled_preserved_by_update2")
                      (("" (EXPAND "related_states")
                        (("" (LEMMA "MP_modeled_implies_same_exception")
                          (("" (INST -1 "tau1!1" "tau1!2")
                            (("" (ASSERT) NIL))))))))))))))))))))))))))
    NIL)
   UNFINISHED NIL 31813 660 T NIL))
 (|initial_states_are_equivalent_TCC1| 0
  (|initial_states_are_equivalent_TCC1-1| NIL 3396605901 NIL
   ("" (SUBTYPE-TCC) NIL NIL) UNFINISHED NIL NIL NIL NIL NIL))
 (|initial_states_are_equivalent_TCC2| 0
  (|initial_states_are_equivalent_TCC2-1| NIL 3396605901 NIL
   ("" (SUBTYPE-TCC) NIL NIL) UNFINISHED NIL NIL NIL NIL NIL))
 (|initial_states_are_equivalent| 0
  (|initial_states_are_equivalent-2| NIL 3396612347 3396612956
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "initial_MP_state" "initial_AP_state" "initial_MVA_state"
       "initial_Program_state" "related_states" "MP_modeled?" "MVA_modeled?"
       "Program_modeled?")
      (("" (SPLIT 1)
        (("1" (EXPAND "MVA_cp_modeled?")
          (("1"
            (CASE-REPLACE
             "get_GhostDecl(cp(mp!1), ann_program(mp!1)) = up((# jtype := IntType, name := cp(mp!1), init_val := Int(unique(init_cp(mva(mp!1)))) #))"
             :HIDE? T)
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND "get_GhostDecl")
                (("2" (LIFT-IF)
                  (("2" (ASSERT)
                    (("2" (REWRITE "ann_program_add_ghost_var_decls")
                      (("2"
                        (CASE
                            "defined?[Name](Int[Name](unique[CP, Name](init_cp(mva(mp!1)))))")
                        (("1"
                          (CASE-REPLACE "{g: FieldDecl[Name] |
                                      union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                                           (g)
                                       AND name(g) = cp(mp!1)} = union({g: FieldDecl[Name] |
                                            (getGhostDecls(program(mp!1))(g) AND name(g) = cp(mp!1))}, {g: FieldDecl[Name] |
                                            (new_gvds(mp!1)(g) AND
                                             name(g) = cp(mp!1))})"
                           :HIDE? T)
                          (("1"
                            (CASE-REPLACE "{g_1: FieldDecl[Name] |
                                                        (getGhostDecls(program(mp!1))(g_1) AND
                                                          name(g_1) = cp(mp!1))} = emptyset[FieldDecl[Name]]"
                             :HIDE? T)
                            (("1" (REWRITE "union_commutative")
                              (("1" (REWRITE "union_empty")
                                (("1"
                                  (CASE-REPLACE "{g: FieldDecl[Name] |
                                                              (new_gvds(mp!1)(g) AND name(g) = cp(mp!1))} = add((# jtype := IntType, name := cp(mp!1),
                                                     init_val := Int(unique(init_cp(mva(mp!1)))) #), union({gd : FieldDecl | EXISTS (q : (cps(mva(mp!1)))) :
                                                                        name(gd) = name_of(mp!1)(q) AND
                                                                        jtype(gd) = IntType AND
                                                                        init_val(gd) = Int(unique(q)) AND name(gd) = cp(mp!1)},
                                                    {gd : FieldDecl | EXISTS (v : (vdsA(mva(mp!1)))) :
                                                                        name(gd) = name(v) AND
                                                                        jtype(gd) = jtype(v) AND
                                                                        init_val(gd) = init_val(v) AND name(gd) = cp(mp!1)}))"
                                   :HIDE? T)
                                  (("1"
                                    (CASE-REPLACE "{gd: FieldDecl |
                                                                        EXISTS (q: (cps(mva(mp!1)))):
                                                                          name(gd) = name_of(mp!1)(q) AND
                                                                           jtype(gd) = IntType AND
                                                                            init_val(gd) = Int(unique(q)) AND
                                                                             name(gd) = cp(mp!1)} = emptyset[FieldDecl[Name]]"
                                     :HIDE? T)
                                    (("1"
                                      (CASE-REPLACE "{gd_1: FieldDecl |
                                                                              EXISTS (v: (vdsA(mva(mp!1)))):
                                                                                name(gd_1) = name(v) AND
                                                                                 jtype(gd_1) = jtype(v) AND
                                                                                  init_val(gd_1) = init_val(v) AND
                                                                                   name(gd_1) = cp(mp!1)} = emptyset[FieldDecl[Name]]")
                                      (("1" (REWRITE "union_empty")
                                        (("1" (EXPAND "nonempty?")
                                          (("1"
                                            (REWRITE
                                             "nonempty_add[FieldDecl[Name]]")
                                            (("1" (REWRITE "add_as_union")
                                              (("1"
                                                (REWRITE "union_commutative")
                                                (("1" (REWRITE "union_empty")
                                                  (("1"
                                                    (REWRITE
                                                     "choose_singleton")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                          (("2" (EXPAND "emptyset")
                                            (("2" (USE "wf_new_vars")
                                              (("2" (FLATTEN)
                                                (("2" (SKOSIMP*)
                                                  (("2" (TYPEPRED "v!1")
                                                    (("2" (INST? -3)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (CASE-REPLACE
                                                           "x!1 = v!1")
                                                          (("2"
                                                            (APPLY-EXTENSIONALITY
                                                             :HIDE? T)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("2" (EXPAND "emptyset")
                                          (("2" (SKOSIMP*)
                                            (("2" (USE "wf_new_vars")
                                              (("2" (FLATTEN)
                                                (("2" (INST? -1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (REWRITE "new_gvds_as_union")
                                      (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("2"
                                          (AUTO-REWRITE
                                           ("add" "union" "member"))
                                          (("2" (ASSERT)
                                            (("2" (IFF)
                                              (("2" (PROP)
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT) NIL NIL)
                                                 ("3" (ASSERT) NIL NIL)
                                                 ("4" (ASSERT)
                                                  (("4" (SKOSIMP*)
                                                    (("4" (INST?)
                                                      (("4" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("5" (ASSERT) NIL NIL)
                                                 ("6" (SKOSIMP*)
                                                  (("6" (INST? 3)
                                                    (("6" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("7" (SKOSIMP*) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                (("2" (EXPAND "emptyset")
                                  (("2" (FLATTEN)
                                    (("2" (TYPEPRED "cp(mp!1)")
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                              (("2" (AUTO-REWRITE ("add" "union" "member"))
                                (("2" (ASSERT)
                                  (("2" (IFF) (("2" (PROP) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (EXPAND "every") (("3" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "MVA_cps_modeled?")
          (("2" (SKOSIMP*)
            (("2"
              (CASE-REPLACE
               "get_GhostDecl(name_of(mp!1)(q!1), ann_program(mp!1)) = up((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #))"
               :HIDE? T)
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "get_GhostDecl")
                  (("2" (LIFT-IF)
                    (("2" (ASSERT)
                      (("2" (REWRITE "ann_program_add_ghost_var_decls")
                        (("2"
                          (CASE
                              "defined?[Name](Int[Name](unique[CP, Name](q!1)))")
                          (("1"
                            (CASE-REPLACE "{g: FieldDecl[Name] |
                                  union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                                       (g)
                                   AND name(g) = name_of(mp!1)(q!1)} = union({g: FieldDecl[Name] |
                                  getGhostDecls(program(mp!1))(g) AND name(g) = name_of(mp!1)(q!1)}, {g: FieldDecl[Name] |
                                  new_gvds(mp!1)
                                       (g)
                                   AND name(g) = name_of(mp!1)(q!1)})"
                             :HIDE? T)
                            (("1"
                              (CASE-REPLACE "{g: FieldDecl[Name] |
                                            getGhostDecls(program(mp!1))(g) AND
                                             name(g) = name_of(mp!1)(q!1)} = emptyset[FieldDecl[Name]]"
                               :HIDE? T)
                              (("1" (REWRITE "union_commutative")
                                (("1" (REWRITE "union_empty")
                                  (("1" (REWRITE "new_gvds_as_union")
                                    (("1"
                                      (CASE-REPLACE "{g_1: FieldDecl[Name] |
                                          add((# jtype := IntType,
                                                 name := cp(mp!1),
                                                 init_val
                                                   := Int(unique(init_cp(mva(mp!1)))) #),
                                              union({gd: FieldDecl[Name] |
                                                       EXISTS (q: (cps(mva(mp!1)))):
                                                         name(gd) = name_of(mp!1)(q) AND
                                                          jtype(gd) = IntType AND
                                                           init_val(gd) = Int(unique(q))},
                                                    {gd: FieldDecl[Name] |
                                                       EXISTS (v: (vdsA(mva(mp!1)))):
                                                         name(gd) = name(v) AND
                                                          jtype(gd) = jtype(v) AND
                                                           init_val(gd) = init_val(v)}))
                                             (g_1)
                                           AND name(g_1) = name_of(mp!1)(q!1)} = {gd: FieldDecl[Name] |
                                                         name(gd) = name_of(mp!1)(q!1) AND
                                                          jtype(gd) = IntType AND
                                                           init_val(gd) = Int(unique(q!1))}"
                                       :HIDE? T)
                                      (("1"
                                        (CASE-REPLACE "{gd: FieldDecl[Name] |
                                              name(gd) = name_of(mp!1)(q!1) AND
                                               jtype(gd) = IntType AND
                                                init_val(gd) = Int(unique(q!1))} = add((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #), emptyset[FieldDecl[Name]])"
                                         :HIDE? T)
                                        (("1" (EXPAND "nonempty?")
                                          (("1" (REWRITE "nonempty_add")
                                            (("1"
                                              (REWRITE "singleton_as_add" :DIR
                                               RL)
                                              (("1"
                                                (REWRITE "choose_singleton")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                            (("2" (GRIND)
                                              (("2"
                                                (APPLY-EXTENSIONALITY :HIDE? T)
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                          (("1"
                                            (AUTO-REWRITE
                                             ("add" "union" "member"))
                                            (("1" (ASSERT)
                                              (("1" (IFF)
                                                (("1" (SPLIT 1)
                                                  (("1" (SKOSIMP*)
                                                    (("1" (SPLIT -1)
                                                      (("1" (USE "wf_new_vars")
                                                        (("1" (FLATTEN)
                                                          (("1" (INST?)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKOSIMP*)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (TYPEPRED
                                                             "name_of(mp!1)")
                                                            (("2"
                                                              (EXPAND
                                                               "injective?")
                                                              (("2" (INST?)
                                                                (("2"
                                                                  (INST -1
                                                                   "q!1")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (SKOSIMP*)
                                                        (("3" (ASSERT)
                                                          (("3"
                                                            (USE "wf_new_vars")
                                                            (("3"
                                                              (TYPEPRED "v!1")
                                                              (("3" (FLATTEN)
                                                                (("3"
                                                                  (INST? -4)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    (("3"
                                                                      (INST?
                                                                       -4)
                                                                      (("3"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOSIMP*)
                                                    (("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2" (INST? 2)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (SKOSIMP*)
                                          (("3" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                  (("2" (EXPAND "emptyset")
                                    (("2" (TYPEPRED "name_of(mp!1)(q!1)")
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                (("2" (AUTO-REWRITE ("union" "member"))
                                  (("2" (ASSERT)
                                    (("2" (IFF) (("2" (PROP) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (EXPAND "every") (("3" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("3" (EXPAND "MVA_vars_modeled?") (("3" (POSTPONE) NIL NIL)) NIL)
         ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL)
         ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 59691 3649 T NIL)
  (|initial_states_are_equivalent-1| NIL 3394358076 3396612304
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "initial_MP_state" "initial_AP_state" "initial_MVA_state"
       "initial_Program_state" "related_states" "MP_modeled?" "MVA_modeled?"
       "Program_modeled?")
      (("" (SPLIT 1)
        (("1" (EXPAND "MVA_cp_modeled?")
          (("1"
            (CASE-REPLACE
             "get_GhostDecl(cp(mp!1), ann_program(mp!1)) = up((# jtype := IntType, name := cp(mp!1), init_val := Int(unique(init_cp(mva(mp!1)))) #))"
             :HIDE? T)
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND "get_GhostDecl")
                (("2" (LIFT-IF)
                  (("2" (ASSERT)
                    (("2" (REWRITE "ann_program_add_ghost_var_decls")
                      (("2"
                        (CASE
                            "defined?[Name](Int[Name](unique[CP, Name](init_cp(mva(mp!1)))))")
                        (("1"
                          (CASE-REPLACE "{g: FieldDecl[Name] |
                      union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                           (g)
                       AND name(g) = cp(mp!1)} = union({g: FieldDecl[Name] |
                            (getGhostDecls(program(mp!1))(g) AND name(g) = cp(mp!1))}, {g: FieldDecl[Name] |
                            (new_gvds(mp!1)(g) AND
                             name(g) = cp(mp!1))})"
                           :HIDE? T)
                          (("1"
                            (CASE-REPLACE "{g_1: FieldDecl[Name] |
                                    (getGhostDecls(program(mp!1))(g_1) AND
                                      name(g_1) = cp(mp!1))} = emptyset[FieldDecl[Name]]"
                             :HIDE? T)
                            (("1" (REWRITE "union_commutative")
                              (("1" (REWRITE "union_empty")
                                (("1"
                                  (CASE-REPLACE "{g: FieldDecl[Name] |
                                      (new_gvds(mp!1)(g) AND name(g) = cp(mp!1))} = add((# jtype := IntType, name := cp(mp!1),
                             init_val := Int(unique(init_cp(mva(mp!1)))) #), union({gd : FieldDecl | EXISTS (q : (cps(mva(mp!1)))) :
                                                name(gd) = name_of(mp!1)(q) AND
                                                jtype(gd) = IntType AND
                                                init_val(gd) = Int(unique(q)) AND name(gd) = cp(mp!1)},
                            {gd : FieldDecl | EXISTS (v : (vdsA(mva(mp!1)))) :
                                                name(gd) = name(v) AND
                                                jtype(gd) = jtype(v) AND
                                                init_val(gd) = init_val(v) AND name(gd) = cp(mp!1)}))"
                                   :HIDE? T)
                                  (("1"
                                    (CASE-REPLACE "{gd: FieldDecl |
                                            EXISTS (q: (cps(mva(mp!1)))):
                                              name(gd) = name_of(mp!1)(q) AND
                                               jtype(gd) = IntType AND
                                                init_val(gd) = Int(unique(q)) AND
                                                 name(gd) = cp(mp!1)} = emptyset[FieldDecl[Name]]"
                                     :HIDE? T)
                                    (("1"
                                      (CASE-REPLACE "{gd_1: FieldDecl |
                                              EXISTS (v: (vdsA(mva(mp!1)))):
                                                name(gd_1) = name(v) AND
                                                 jtype(gd_1) = jtype(v) AND
                                                  init_val(gd_1) = init_val(v) AND
                                                   name(gd_1) = cp(mp!1)} = emptyset[FieldDecl[Name]]")
                                      (("1" (REWRITE "union_empty")
                                        (("1" (EXPAND "nonempty?")
                                          (("1"
                                            (REWRITE
                                             "nonempty_add[FieldDecl[Name]]")
                                            (("1" (REWRITE "add_as_union")
                                              (("1"
                                                (REWRITE "union_commutative")
                                                (("1" (REWRITE "union_empty")
                                                  (("1"
                                                    (REWRITE
                                                     "choose_singleton")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                          (("2" (EXPAND "emptyset")
                                            (("2" (USE "wf_new_vars")
                                              (("2" (FLATTEN)
                                                (("2" (SKOSIMP*)
                                                  (("2" (TYPEPRED "v!1")
                                                    (("2" (INST? -3)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (CASE-REPLACE
                                                           "x!1 = v!1")
                                                          (("2"
                                                            (APPLY-EXTENSIONALITY
                                                             :HIDE? T)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("2" (EXPAND "emptyset")
                                          (("2" (SKOSIMP*)
                                            (("2" (USE "wf_new_vars")
                                              (("2" (FLATTEN)
                                                (("2" (INST? -1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (REWRITE "new_gvds_as_union")
                                      (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("2"
                                          (AUTO-REWRITE
                                           ("add" "union" "member"))
                                          (("2" (ASSERT)
                                            (("2" (IFF)
                                              (("2" (PROP)
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT) NIL NIL)
                                                 ("3" (ASSERT) NIL NIL)
                                                 ("4" (ASSERT)
                                                  (("4" (SKOSIMP*)
                                                    (("4" (INST?)
                                                      (("4" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("5" (ASSERT) NIL NIL)
                                                 ("6" (SKOSIMP*)
                                                  (("6" (INST? 3)
                                                    (("6" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("7" (SKOSIMP*) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                (("2" (EXPAND "emptyset")
                                  (("2" (FLATTEN)
                                    (("2" (TYPEPRED "cp(mp!1)")
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                              (("2" (AUTO-REWRITE ("add" "union" "member"))
                                (("2" (ASSERT)
                                  (("2" (IFF) (("2" (PROP) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (EXPAND "every") (("3" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "MVA_cps_modeled?")
          (("2" (SKOSIMP*)
            (("2"
              (CASE-REPLACE
               "get_GhostDecl(name_of(mp!1)(q!1), ann_program(mp!1)) = up((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #))"
               :HIDE? T)
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "get_GhostDecl")
                  (("2" (LIFT-IF)
                    (("2" (ASSERT)
                      (("2" (REWRITE "ann_program_add_ghost_var_decls")
                        (("2"
                          (CASE-REPLACE "{g: FieldDecl[Name] |
                      union(getGhostDecls(program(mp!1)), new_gvds(mp!1))
                           (g)
                       AND name(g) = name_of(mp!1)(q!1)} = union({g: FieldDecl[Name] |
                      getGhostDecls(program(mp!1))(g) AND name(g) = name_of(mp!1)(q!1)}, {g: FieldDecl[Name] |
                      new_gvds(mp!1)
                           (g)
                       AND name(g) = name_of(mp!1)(q!1)})"
                           :HIDE? T)
                          (("1"
                            (CASE-REPLACE "{g: FieldDecl[Name] |
                            getGhostDecls(program(mp!1))(g) AND
                             name(g) = name_of(mp!1)(q!1)} = emptyset[FieldDecl[Name]]"
                             :HIDE? T)
                            (("1" (REWRITE "union_commutative")
                              (("1" (REWRITE "union_empty")
                                (("1" (REWRITE "new_gvds_as_union")
                                  (("1"
                                    (CASE-REPLACE "{g_1: FieldDecl[Name] |
                      add((# jtype := IntType,
                             name := cp(mp!1),
                             init_val
                               := Int(unique(init_cp(mva(mp!1)))) #),
                          union({gd: FieldDecl[Name] |
                                   EXISTS (q: (cps(mva(mp!1)))):
                                     name(gd) = name_of(mp!1)(q) AND
                                      jtype(gd) = IntType AND
                                       init_val(gd) = Int(unique(q))},
                                {gd: FieldDecl[Name] |
                                   EXISTS (v: (vdsA(mva(mp!1)))):
                                     name(gd) = name(v) AND
                                      jtype(gd) = jtype(v) AND
                                       init_val(gd) = init_val(v)}))
                         (g_1)
                       AND name(g_1) = name_of(mp!1)(q!1)} = {gd: FieldDecl[Name] |
                                     name(gd) = name_of(mp!1)(q!1) AND
                                      jtype(gd) = IntType AND
                                       init_val(gd) = Int(unique(q!1))}"
                                     :HIDE? T)
                                    (("1"
                                      (CASE-REPLACE "{gd: FieldDecl[Name] |
                      name(gd) = name_of(mp!1)(q!1) AND
                       jtype(gd) = IntType AND
                        init_val(gd) = Int(unique(q!1))} = add((# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #), emptyset[FieldDecl[Name]])"
                                       :HIDE? T)
                                      (("1" (EXPAND "nonempty?")
                                        (("1" (REWRITE "nonempty_add")
                                          (("1"
                                            (REWRITE "singleton_as_add" :DIR
                                             RL)
                                            (("1" (REWRITE "choose_singleton")
                                              (("1" (GRIND) NIL NIL)) NIL)
                                             ("2" (GRIND) NIL NIL))
                                            NIL)
                                           ("2" (POSTPONE) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (POSTPONE) NIL NIL)
                                       ("3" (POSTPONE) NIL NIL))
                                      NIL)
                                     ("2" (POSTPONE) NIL NIL)
                                     ("3" (POSTPONE) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (POSTPONE) NIL NIL))
                            NIL)
                           ("2" (POSTPONE) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (POSTPONE) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL)
         ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)
         ("7" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 203163 4418 T SHOSTAK))
 (|correctness_of_ann_program| 0
  (|correctness_of_ann_program-1| NIL 3396605549 3396606064
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "run_monitored_program" "run_annotated_program"
       "run_FullProgram" "derives")
      (("" (SKOSIMP*)
        (("" (USE "initial_states_are_equivalent")
          (("" (EXPAND "related_states" 1)
            (("" (USE "derive_maintains_MP_modeled?")
              (("" (USE "wf_initial_MP_state")
                (("" (TYPEPRED "mp!1")
                  (("" (ASSERT)
                    (("" (USE "wf_initial_AP_state")
                      (("" (EXPAND "wf_MP")
                        (("" (FLATTEN)
                          (("" (ASSERT)
                            (("" (USE "ann_program_yields_wf_program")
                              (("" (ASSERT)
                                ((""
                                  (USE "derive_maintains_halted_equivalence")
                                  (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|derives| CONST-DECL "bool" |Semantics| NIL)
    (|run_FullProgram| CONST-DECL "boolean" |Semantics| NIL)
    (|run_annotated_program| CONST-DECL "boolean" |AnnotatedProgramSemantics|
     NIL)
    (|run_monitored_program| CONST-DECL "boolean" |MonitoredProgramSemantics|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |CorrectnessAnnProgram| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|initial_states_are_equivalent| FORMULA-DECL NIL |CorrectnessAnnProgram|
     NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|initial_MP_state| CONST-DECL "MPState" |MonitoredProgramSemantics| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr| ADT-CONSTRUCTOR-DECL "[Expr -> (StmtExpr?)]" |Body_adt| NIL)
    (|MethodCall| ADT-CONSTRUCTOR-DECL "[[Expr, Name, Expr] -> (MethodCall?)]"
     |Body_adt| NIL)
    (|Null?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RefVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RefExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr| ADT-CONSTRUCTOR-DECL "[RefExpr -> (RExpr?)]" |Body_adt| NIL)
    (|RefVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (RefVarEval?)]" |Body_adt|
     NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Body_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Body_adt| NIL)
    (|Unit?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Unit| ADT-CONSTRUCTOR-DECL "(Unit?)" |Val_adt| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|APState| TYPE-EQ-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|initial_AP_state| CONST-DECL "APState" |AnnotatedProgramSemantics| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|derive_maintains_MP_modeled?| FORMULA-DECL NIL |CorrectnessAnnProgram|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|wf_initial_AP_state| FORMULA-DECL NIL |AnnotatedProgramSemantics| NIL)
    (|ann_program_yields_wf_program| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|derive_maintains_halted_equivalence| FORMULA-DECL NIL
     |CorrectnessAnnProgram| NIL)
    (|wf_initial_MP_state| FORMULA-DECL NIL |MonitoredProgramSemantics| NIL)
    (|related_states| CONST-DECL "boolean" |Equivalence| NIL))
   15997 289 T NIL)))

