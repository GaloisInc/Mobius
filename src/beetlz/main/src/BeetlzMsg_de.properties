# This is the Beetlz base properties file
Beetlz.intro = Beetlz: Konsistenz-Prüfer für BON und Java/JML.
Beetlz.autoRecognized=Automatisch erkannte Quell-Dateien sind:\n.bon, .java, Specifikations Dateien werden automatisch erkannt und dürfen NICHT explizit gelistet werden\n
Beetlz.basicsDescription=\ \t\t\t Grundeinstellungen nicht benutzen\n
Beetlz.checkingDirBJ=Prüfrichtung BON -> Java
Beetlz.checkingDirJB=Prüfrichtung Java -> BON
Beetlz.classMapping=Klassen-Mapping: 
Beetlz.comparing=vergleiche: 
Beetlz.couldNotParse=Dateien konnten nicht analysiert werden.
Beetlz.customDescription=\ file \t\t Spezielle Benutzereinstellungen \n
Beetlz.finishedParsing=Analyse der Dateien beendet.
Beetlz.foundBONTypes=Gefundene BON Typen: 
Beetlz.foundJavaTypes=Gefundene Java Typen: 
Beetlz.goingToParse=Starte Analyze der Dateien...
Beetlz.ignoreJmlDescription=\ \t\t\t\t Ignoriere JML und Aussagenlogik \n
Beetlz.ignoreJavaDescription=\ \t\t\t Drucke keine Java Fehler und Warnungen\n
Beetlz.javaErrorsDescription=\ \t\t\t Drucke keine Fehler \n
Beetlz.javaWarningDescription=\ \t\t\t Drucke keine Warnungen \n
Beetlz.jmlOptionsDescription=JML Optionen:\n
Beetlz.mustSpecifyFiles=Sie müssen Quell-Dateien mit -files <Dateien> angeben.
Beetlz.nullityDescription=\ \t\t\t Keine Prüfung von Nullwerten\n
Beetlz.optionsAre=Optionen sind: \n
Beetlz.optionsIncorrent=Die Optionen, die Sie eingegeben haben sind nicht korrekt.
Beetlz.printHelp=\ \t\t\t\t Drucke diese Hilfe \n
Beetlz.pureBonDescription=\ \t\t\t Benutze ursprüngliches BON, nicht erweitert\n
Beetlz.skeletonDescription=\ [dir] \t\t Drucke skeleton code in separate Dateien in Verzeichnis \n
Beetlz.skeletonOneFileDescription = \ \t\t Drucke skeleton code in 1 Datei\n
Beetlz.sourceDescription=\ {bon, java} \t\t Bestimme die Quell-Dateien \n
Beetlz.sourceNeedsArgument=-source erfordert ein Argument
Beetlz.specsDescription=-specs\t\t\tBestimmt den Pfad zu JML Spezifikations-Dateien\n
Beetlz.specsNeedsArgument=-specs erfordert ein Argument
Beetlz.unknownOption=Unbekannte Option: 
Beetlz.usage=Verwendung: beetlz [<options>] -files <Quell-Dateien oder Verzeichnis>\n
Beetlz.userNeedsArgument=-userSettings erfordert ein Argument
Beetlz.verboseDescription=\ \t\t\t Generiere Debug-Informationen \n
Beetlz.generalNotes=-> Allgemeine Anmerkungen:
Beetlz.javaErrors=-> Java Fehler:
Beetlz.javaWarnings=-> Java Warnungen:
Beetlz.jmlErrors=-> Jml Fehler:
Beetlz.jmlWarnings=-> Jml Warnungen:
Beetlz.ioProblem=Problem mit Schreiben von Skelett-Code.
BonFile.addingBonFile=Füge BON Datei zu 
BonFile.bonFiles=BON Datei Inhalt:
BonFile.cannotFindFile=Kann Datei nicht finden 
BonFile.successfullyCompiled=BON Dateien erfolgreich übersetzt.
JmlFile.cannotFindFile=Kann Datei nicht finden
JmlFile.cannotParseJml=Kann Java/JML Quell-Dateien nicht analysieren.
JmlFile.compilError=Schwerwiegender Java Übersetzungsfehler, kann nicht fortfahren.
JmlFile.duplicateFiles=Doppelte Dateien: 
JmlFile.fileFound=Datei gefunden.
JmlFile.javaFileContents=Java Datei Inhalt: 
JmlFile.noClassSymbol=Kein Klassen Symbol für %s. Die Klasse ist wahrscheinlich im Standard-Packet.
JmlFile.skippingNoUnit=Überspringe %s. Keine Kompilationseinheit gefunden. 
JmlFile.problemWithClass=Problem mit Klasse %s. Bitte überprüfen Sie bitte Ihre Eingabe.
JmlParser.javaComplError=Java Kompilation Fehler: 
CCLogManager.assignableDefaultMsg=BON und Java haben verschiedene Standard-Rahmenbedingungen:\n\t\tin BON sind alle Fragen automatisch 'pure',\n \t\bei Java ist der Standard 'assignable \\everything'.
CCLogManager.classNotFoundMsg=Klasse %s nicht gefunden.
CCLogManager.errorStats=\%d Java Fehler, %d Java Warnungen, %d JML Error and %s JML Warnungen gefunden.
CCLogManager.expectedClassModifierMsg=%s erwartet %s.
CCLogManager.expectedEnum=%s erwartet 'enum'.
CCLogManager.expectedFeatureModifierMsg=%s@%s erwartet %s
CCLogManager.expectedInterfaceMsg=%s erwarte interface.
CCLogManager.expectedPublicMsgBon=%s: erwarte alle Methoden public.
CCLogManager.expectedPublicMsgJava=%s: erwarte all Features public.
CCLogManager.genericMethodsNotSupportedMsg=%s@%s is generisch. BON unterstützt keine generischen Methoden.
CCLogManager.historyConstraintMsg=Im Prinzip sollten alle JML 'history constraints', die in Java gefunden werden, zu ALLEN Nachbedingungen angefügt werden.\nBitte beachten Sie, dass nur geprüft wird dass jede Bedingung mindestents EINMAL in der Klasse auftaucht.
CCLogManager.incorrectEnclosingClassMsg=%s hat falsche umfassende Klasse, erwartet %s aber gefunden %s.
CCLogManager.incorrectExportPolicyMsg=%s sollte folgende Export-Police haben: %s aber gefunden %s.
CCLogManager.incorrectFeatureTypeMsg=%s@%s erwartet %s aber gefunden %s.
CCLogManager.incorrectFrameCondMsg=%s@%s hat falsche Rahmenbedingung; erwartet %s, gefunden %s.
CCLogManager.incorrectFrameDefaultMsg=%s@%s hat falsche Default-Rahmenbedingung; erwartet %s, gefunden %s.
CCLogManager.incorrectGenericsMsg=%s erwartet generischen Parameter %s aber gefunden %s
CCLogManager.incorrectGenericsNumberMsg=%s erwartete Anzahl von generischen Parametern %d aber gefunden %d.
CCLogManager.incorrectMappingMsg=Das Mapping für %s ist nicht korrekt.
CCLogManager.incorrectModifierMsg=%s@%s erwartet %s aber gefunden %s.
CCLogManager.incorrectModifierWarningMsg=%s erwartet %s aber gefunden %s.
CCLogManager.incorrectNumberInvariantsMsg=%s hat falsche Anzahl von Invarianten: erwartet %d aber gefunden %d.
CCLogManager.incorrectOverloadedNumberMsg=%s@%s ist überladen, aber die Anzahl der Fälle stimmt nicht überein. 
CCLogManager.incorrectPackageMsgBon=%s hat falsche Anzahl von Clustern; erwartet %s, gefunden %s.
CCLogManager.incorrectPackageMsgJava=%s ist im falschen Packet; erwartet %s, gefunden %s.
CCLogManager.incorrectParameterNullityMsg=%s@%s hat falschen Nullwert für einen/mehrere Parameter.
CCLogManager.incorrectRetrunTypeMsg=%s@%s erwartet Ergebnis Type %s aber gefunden %s.
CCLogManager.incorrectReturnTypeNullityMsg=%s@%s Ergebnis Type erwartet %s, gefunden %s.
CCLogManager.incorrectVisibilityMsg=%s@%s erwartet %s aber gefunden %s.
CCLogManager.libraryClassMissingMsg=Warnung: Bibliotheks Klasse %s fehlt.
CCLogManager.missingConstructorMsg=%s fehlt ein Konstruktor.
CCLogManager.missingEnclosingClassMsg=%s fehlt eine umschliessende Klasse %s.
CCLogManager.missingFeaturesMsg=%s fehlen Methode(n) %s.
CCLogManager.missingFrameConditionMsg=%s@%s fehlt eine Rahmenbedingung: %s.
CCLogManager.missingHistoryConstraintMsg=%s fehlt eine Entwicklungs-Bedingung:\n\t %s.
CCLogManager.missingInterfaceSuperclassMsg=%s fehlt ein Interface oder eine Vorfahrensklasse %s.
CCLogManager.missingInvariantClausesMsg=%s fehlen die Invariaten Klauseln: %s
CCLogManager.missingInvariantMsg=%s fehlt eine Invariante.
CCLogManager.missingMethodsMsg=%s fehlen Methode(n) %s.
CCLogManager.missingParameterTypesMsg=%s@%s fehlen Parameter Type(n) %s.
CCLogManager.missingPostconditionMsg=%s@%s fehlt eine Nachbedingung: %s
CCLogManager.missingPreconditionMsg=%s@%s fehlt eine Vorbedingung: %s
CCLogManager.missingSharedAssociationMsg=%s fehlt eine geteilte Assoziation mit %s.
CCLogManager.missingAggregationMsgBon=%s fehlt die Aggregats-Klasse %s.
CCLogManager.missingAggregationMsgJava=%s fehlt eine Teil-Klasse %s.
CCLogManager.missingSuperclassMsg=%s fehlt eine Vorfahrensklasse %s.
CCLogManager.multiplePotentialMatchesMsg=Fehler: Mehrere potenzielle Übereinstimmungen gefunden für %s.
CCLogManager.noUniqueMatchMsgBon=%s: diese Methoden konnten nicht eindeutig zugeordnet werden:\n%s
CCLogManager.noUniqueMatchMsgJava=%s: diese Methoden konnten nicht eindeutig zugeordnet werden:\n%s
CCLogManager.nullityDefaultMsg=BON und Java haben verschiedene Default-NUllwerte:\n\t\tin BON können alle Typen automatisch null sein,\n\t\twohingegen in Java der Defaultwert ist nicht null.
CCLogManager.privateNotAccessibleMsg=%s ist private und nicht erreichbar.
CCLogManager.redefinedCorrespondenceMsg=Kompatibilitäts Warnung für %s@%s: @Override und 'redefined' stimmen nicht exakt überein. Eine redefinierte Methode kann nicht gleichzeitig deferred sein, aber eine abstrakte Methode in Java kann die Annotation @Override haben.
CCLogManager.redundantConstructorMsg=%s hat einen redundanten Konstruktor.
CCLogManager.redundantEnclosingClassMsg=%s hat eine redundante umschliessende Klasse %s.
CCLogManager.redundantFeaturesMsg=%s hat redundante Methode(n) %s.
CCLogManager.redundantInterfaceMsg=%s ist ein redundantes Interface für %s.
CCLogManager.redundantSharedAssociationMsg=%s hat eine redundante geteilte Assoziation %s.
CCLogManager.redundantAggregationMsgBon=%s hat eine redundante Aggregations Klasse %s.
CCLogManager.redundantAggregationMsgJava=%s hat eine redundante umschliessende Klasse %s.
CCLogManager.shouldNotClassMsg=%s sollte nicht %s sein.
CCLogManager.shouldNotEnum=%s sollte kein enum Type sein.
CCLogManager.shouldNotFeatureMsg=%s@%s sollte nicht %s sein.
CCLogManager.surplusInvariantsMsg=%s hat überflüssige Invarianten: %s
CCLogManager.surplusPostconditionMsg=%s@%s hat überflüssige Nachbedingung(en): %s
CCLogManager.surplusPreconditionMsg=%s@%s hat überflüssige Vorbedingung(en): %s
CCLogManager.tooManyParameterMsg=%s@%s hat unerwartete Argumente %s
BONParser.repeatedInheritanceNotSupported=Java unterstützt keine wiederholte Vererbung. Wiederholte Vorfahrensklass %s in Klasse %s wird ignoriert.
UserProfile.syntaxErrorConfigFile=Syntax Fehler in der Konfigurationsdatei: '-source' muss entweder 'bon' oder 'java' folgen.
SettingIO.cannotCloseSettingsFile=Kann die Konfigurationsdatei nicht schliessen.
SettingIO.customFileSyntaxError=Konfigurationsdatei Fehler. Siehe %s.
SettingIO.customSettingsFileNotFound=Konfigurationsdatei %s nicht gefunden. Bitte checken sie ihre Inputdateien.
SettingIO.errorReadingFile=Fehler beim lesen der Konfigurationsdatei.\n
SettingIO.syntaxErrorClassMapping=Konfigurationsdatei Fehler. Ein Klassen-Mapping muss genau 1 Bon Namen und 1 Java Namen haben. \nSiehe%s.
SettingIO.syntaxErrorFeatureMapping=Konfigurationsdatei Fehler. Ein Methoden-Mapping muss genau 1 Bon Namen und 1 Java Namen haben. \nSiehe %s.
SettingIO.syntaxErrorIgnoreClasses=Konfigurationsdatei Fehler. Eine ignore_class Klausel muss folgendes format haben: ignore_classes {...} {...};. \nSiehe %s.
SettingIO.syntaxErrorIgnorePrefix=Konfigurationsdatei Fehler. Eine ignore_prefix Klausel muss folgendes format haben: ignore_prefix my_ a_ the_ ... ;. \nSiehe %s.
BonPretty.cannotWriteFile=Kann die Datei %s/%s nicht schreiben.
BonPretty.directoryDoesNotExist=Das angebene Verzeichnis für Skeleton Code existiert nicht.
BonPretty.directoryIsNoDirectory=Das angebene Verzeichnis für Skeleton Code ist kein Verzeichnis.
JavaPretty.directoryDoesNotExist=Das angebene Verzeichnis für Skeleton Code existiert nicht.
JavaPretty.directoryIsNotDirectory=Das angebene Verzeichnis für Skeleton Code code ist kein Verzeichnis.
JavaPretty.errorWritingFile=Fehler beim schreiben von Datei %s.
JavaPretty.problemCreatingDirectory=Problem beim ertellen des Verzeichnisses 
ClassCollection.classCollectionHasClasses=Die Klassen Sammlung hat folgende Klassen:
TwoWayMap.twoWayMap=two-way-map: \n

