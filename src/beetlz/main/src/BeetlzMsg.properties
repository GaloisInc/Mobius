# This is the Beetlz base properties file
Beetlz.intro = Beetlz: consistency checker for BON and Java/JML.
Beetlz.autoRecognized=Automatically recognized source file extensions are:\n.bon, .java, specification files are automatically recognised and must NOT be explicitly added\n
Beetlz.basicsDescription=\ \t\t\t Do not use basic settings \n
Beetlz.checkingDirBJ=Checking direction BON -> Java
Beetlz.checkingDirJB=Checking direction Java -> BON
Beetlz.classMapping=Class mapping: 
Beetlz.comparing=comparing: 
Beetlz.couldNotParse=Could not parse input files.
Beetlz.customDescription=\ file \t\t Custom user settings  \n
Beetlz.finishedParsing=Finished parsing files.
Beetlz.foundBONTypes=Found BON types: 
Beetlz.foundJavaTypes=Found Java types: 
Beetlz.goingToParse=Going to parse files...
Beetlz.ignoreJmlDescription=\ \t\t\t\t Do not check and ignore JML and assertion language  \n
Beetlz.ignoreJavaDescription=\ \t\t\t Do not print Java related errors and warnings \n
Beetlz.javaErrorsDescription=\ \t\t\t Do not print errors  \n
Beetlz.javaWarningDescription=\ \t\t\t Do not print warnings  \n
Beetlz.jmlOptionsDescription=JML options:\n
Beetlz.mustSpecifyFiles=You must specify input files with -files <files>
Beetlz.nullityDescription=\ \t\t\t Do not check for correct nullity\n
Beetlz.optionsAre=options are: \n
Beetlz.optionsIncorrent=The options you have entered are incorrect.
Beetlz.printHelp=\ \t\t\t\t Print this help \n
Beetlz.pureBonDescription=\ \t\t\t Only use original, not extended, BON \n
Beetlz.skeletonDescription=\ [dir] \t\t Print skeleton code from source and place into directory \n
Beetlz.skeletonOneFileDescription = \ \t\t Print skeleton code into 1 file.\n
Beetlz.sourceDescription=\ {bon, java} \t\t Which files to use as source \n
Beetlz.sourceNeedsArgument=-source requires an argument
Beetlz.specsDescription=\t\t\t\tSpecifies the directory path to search for specification files
Beetlz.specsNeedsArgument=-specs requires an argument
Beetlz.unknownOption=Unknown option: 
Beetlz.usage=Usage: beetlz [<options>] -files <source files or directories>\n
Beetlz.userNeedsArgument=-userSettings requires an argument
Beetlz.verboseDescription=\ \t\t\t Generate debugging info  \n
Beetlz.generalNotes=-> General Notes:
Beetlz.javaErrors=-> Java Errors:
Beetlz.javaWarnings=-> Java Warnings:
Beetlz.jmlErrors=-> Jml Errors:
Beetlz.jmlWarnings=-> Jml Warnings:
Beetlz.ioProblem=IO problem with pretty printing.
BonFile.addingBonFile=Adding BON file 
BonFile.bonFiles=BON file contents:
BonFile.cannotFindFile=Cannot find file  
BonFile.successfullyCompiled=Successfully compiled BON files.
JmlFile.cannotFindFile=Cannot find file 
JmlFile.cannotParseJml=Could not parse Java/JML input files.
JmlFile.compilError=Severe Java compilation error, cannot continue.
JmlFile.duplicateFiles=Duplicate files: 
JmlFile.fileFound=File found.
JmlFile.javaFileContents=Java file contents: 
JmlFile.noClassSymbol=No class symbol for %s. The class is probably in the default package.
JmlFile.skippingNoUnit=Skipping %s. No compilation unit found. 
JmlFile.problemWithClass=There is a problem with class %s. Please check your input.
JmlParser.javaComplError=Java compilation error: 
CCLogManager.assignableDefaultMsg=BON and Java have different default frame conditions:\n\t\tin BON all queries are automatically pure,\n \t\twhereas in Java the default is 'assignable \\everything'.
CCLogManager.classNotFoundMsg=Class %s not found.
CCLogManager.errorStats=\%d Java errors, %d Java warnings, %d JML errors and %s JML warnings found.
CCLogManager.expectedClassModifierMsg=%s is expected %s.
CCLogManager.expectedEnum=%s is expected to be an enumerated type.
CCLogManager.expectedFeatureModifierMsg=%s@%s is expected %s
CCLogManager.expectedInterfaceMsg=%s is expected to be an interface.
CCLogManager.expectedPublicMsgBon=%s: expected all features public.
CCLogManager.expectedPublicMsgJava=%s: expected all methods public.
CCLogManager.genericMethodsNotSupportedMsg=%s@%s is generic. BON does not support generic methods.
CCLogManager.historyConstraintMsg=Technically history constraints found in Java should be appended to EVERY postcondition in BON.\nPlease note, that it is only being checked that each constraint appears ONCE somewhere in the class.
CCLogManager.incorrectEnclosingClassMsg=%s has incorrect enclosing class, expected %s but found %s.
CCLogManager.incorrectExportPolicyMsg=%s should have export policy %s but found %s.
CCLogManager.incorrectFeatureTypeMsg=%s@%s expected %s but found %s.
CCLogManager.incorrectFrameCondMsg=%s@%s has incorrect frame condition; expected %s, found %s.
CCLogManager.incorrectFrameDefaultMsg=%s@%s has wrong frame condition default; expected %s, found %s.
CCLogManager.incorrectGenericsMsg=%s expected generic parameter %s but found %s
CCLogManager.incorrectGenericsNumberMsg=%s expected number of generic parameters %d but found %d.
CCLogManager.incorrectMappingMsg=The mapping for %s is not correct.
CCLogManager.incorrectModifierMsg=%s@%s expected %s but found %s.
CCLogManager.incorrectModifierWarningMsg=%s expected %s but found %s.
CCLogManager.incorrectNumberInvariantsMsg=%s has wrong number of invariants: expected %d but found %d.
CCLogManager.incorrectOverloadedNumberMsg=%s@%s is overloaded, but the number of instance does not match. 
CCLogManager.incorrectPackageMsgBon=%s has incorrect cluster; expected %s, found %s.
CCLogManager.incorrectPackageMsgJava=%s has incorrect package; expected %s, found %s.
CCLogManager.incorrectParameterNullityMsg=%s@%s has incorrect formal parameter nullity.
CCLogManager.incorrectRetrunTypeMsg=%s@%s expected return type %s but found %s.
CCLogManager.incorrectReturnTypeNullityMsg=%s@%s return value expected %s, found %s.
CCLogManager.incorrectVisibilityMsg=%s@%s expected %s but found %s.
CCLogManager.libraryClassMissingMsg=Warning: Library class %s is missing.
CCLogManager.missingConstructorMsg=%s is missing a constructor.
CCLogManager.missingEnclosingClassMsg=%s is missing enclosing class %s.
CCLogManager.missingFeaturesMsg=%s is missing feature(s) %s.
CCLogManager.missingFrameConditionMsg=%s@%s is missing a frame condition: %s.
CCLogManager.missingHistoryConstraintMsg=%s is missing a history constraint:\n\t %s.
CCLogManager.missingInterfaceSuperclassMsg=%s is missing interface or super class %s.
CCLogManager.missingInvariantClausesMsg=%s is missing these invariant clauses: %s
CCLogManager.missingInvariantMsg=%s is missing an invariant.
CCLogManager.missingMethodsMsg=%s is missing method(s) %s.
CCLogManager.missingParameterTypesMsg=%s@%s is missing parameter type(s) %s.
CCLogManager.missingPostconditionMsg=%s@%s is missing postcondition: %s
CCLogManager.missingPreconditionMsg=%s@%s is missing precondition: %s
CCLogManager.missingSharedAssociationMsg=%s is missing a shared association with %s.
CCLogManager.missingAggregationMsgBon=%s is missing aggregation class %s.
CCLogManager.missingAggregationMsgJava=%s is missing member class %s.
CCLogManager.missingSuperclassMsg=%s is missing super class %s.
CCLogManager.multiplePotentialMatchesMsg=Error: Multiple potential matches have been found for %s.
CCLogManager.noUniqueMatchMsgBon=%s: these features cannot be matched uniquely:\n%s
CCLogManager.noUniqueMatchMsgJava=%s: these methods cannot be matched uniquely:\n%s
CCLogManager.nullityDefaultMsg=BON and Java have different default nullity:\n\t\tin BON all types are automatically nullable,\n\t\twhereas in Java the default is non-null.
CCLogManager.privateNotAccessibleMsg=%s is private and not accessible.
CCLogManager.redefinedCorrespondenceMsg=Compatibility warning for %s@%s: @Override and 'redefined' do not correspond exactly. A redefined feature cannot be deferred, whereas an abstract method may have annotation @Override.
CCLogManager.redundantConstructorMsg=%s has a redundant constructor.
CCLogManager.redundantEnclosingClassMsg=%s has a redundant enclosing class %s.
CCLogManager.redundantFeaturesMsg=%s has redundant feature(s) %s.
CCLogManager.redundantInterfaceMsg=%s is a redundant interface for %s.
CCLogManager.redundantSharedAssociationMsg=%s has a redundant shared association %s.
CCLogManager.redundantAggregationMsgBon=%s has a redundant aggregation class %s.
CCLogManager.redundantAggregationMsgJava=%s has a redundant enclosing class %s.
CCLogManager.shouldNotClassMsg=%s should not be %s.
CCLogManager.shouldNotEnum=%s should not be an enumerated type.
CCLogManager.shouldNotFeatureMsg=%s@%s should not be %s.
CCLogManager.surplusInvariantsMsg=%s has a surplus invariants: %s
CCLogManager.surplusPostconditionMsg=%s@%s has a surplus postcondition(s): %s
CCLogManager.surplusPreconditionMsg=%s@%s has a surplus precondition(s): %s
CCLogManager.tooManyParameterMsg=%s@%s has unexpected arguments %s
BONParser.repeatedInheritanceNotSupported=Java does not support repeated inheritance. Repeated parent class %s in class %s will be ignored.
UserProfile.syntaxErrorConfigFile=Options syntax error: '-source' must be followed by either 'bon' or 'java' or 'both'.
SettingIO.cannotCloseSettingsFile=Cannot close input custom setting file, please check
SettingIO.customFileSyntaxError=Custom file syntax error. See %s.
SettingIO.customSettingsFileNotFound=Custom setting file %s not found. Please check your input files.
SettingIO.errorReadingFile=Error reading custom setting file.\n
SettingIO.syntaxErrorClassMapping=Custom file syntax error. A class mapping must have exactly 1 bon name and 1 java name. \nSee %s.
SettingIO.syntaxErrorFeatureMapping=Custom file syntax error. A feature mapping must have exactly 1 bon name and 1 java name. \nSee %s.
SettingIO.syntaxErrorIgnoreClasses=Custom file syntax error. A ignore_class clause must have following format: ignore_classes {...} {...};. \nSee %s.
SettingIO.syntaxErrorIgnorePrefix=Custom file syntax error. A ignore_prefix clause must have following format: ignore_prefix my_ a_ the_ ... ;. \nSee %s.
BonPretty.cannotWriteFile=Cannot write file %s/%s.
BonPretty.directoryDoesNotExist=The directory you specified for your skeleton code does not exists.
BonPretty.directoryIsNoDirectory=The directory you specified for the skeleton code is not a directory.
JavaPretty.directoryDoesNotExist=The directory you specified for your skeleton code does not exists.
JavaPretty.directoryIsNotDirectory=The directory you specified for the skeleton code is not a directory.
JavaPretty.errorWritingFile=Error while writing file %s.
JavaPretty.problemCreatingDirectory=Problem creating directory 
ClassCollection.classCollectionHasClasses=The class collection has following classes:
TwoWayMap.twoWayMap=two-way-map: \n

