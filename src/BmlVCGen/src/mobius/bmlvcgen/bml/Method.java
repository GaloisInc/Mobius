package mobius.bmlvcgen.bml;

import java.util.EnumSet;

/**
 * Method declaration.
 * @author Tadeusz Sznuk (tsznuk@mimuw.edu.pl)
 */
public interface Method {
  /**
   * Method access flags.
   */
  enum AccessFlag {
    /** 
     * Declared public; may be accessed from outside its package. 
     * */
    ACC_PUBLIC(0x0001), 
    /**
     * Declared private; accessible only within the defining class.
     */
    ACC_PRIVATE(0x0002), 
    /**
     * Declared protected; may be accessed within subclasses.
     */
    ACC_PROTECTED(0x0004), 
    /**
     * Declared static.
     */
    ACC_STATIC(0x0008), 
    /**
     * Declared final; must not be overridden.
     */
    ACC_FINAL(0x0010), 
    /**
     * Declared synchronized. 
     * Invocation is wrapped in a monitor lock.
     */
    ACC_SYNCHRONIZED(0x0020), 
    /**
     * A bridge method, generated by the compiler.
     */
    ACC_BRIDGE(0x0040), 
    /**
     * Declared with variable number of arguments.
     */
    ACC_VARARGS(0x0080), 
    /**
     * Declared native; Implemented in a language other than Java.
     */
    ACC_NATIVE(0x0100), 
    /**
     * Declared abstract; No implementation is provided.
     */
    ACC_ABSTRACT(0x0400), 
    /**
     * Declared strictfp; Floating-point mode is FP-strict
     */
    ACC_STRICT(0x0800), 
    /**
     * Declared synthetic; Not present in the source code.
     */
    ACC_SYNTHETIC(0x1000);
    
    private final int value;
    
    AccessFlag(final int value) {
      this.value = value;
    }
    
    /**
     * Convert mask to set of method AccessFlag values.
     * @param mask Mask.
     */
    public static EnumSet<AccessFlag> fromMask(final int mask) {
      final EnumSet<AccessFlag> result = 
        EnumSet.noneOf(AccessFlag.class);
      for (final AccessFlag flag : AccessFlag.values()) {
        if ((flag.value & mask) != 0) {
          result.add(flag);
        }
      }
      return result;
    }
    
    /** 
     * Get value associated with this flag.
     * @return Flag value (as defined in JSR202).
     */
    public int getValue() {
      return value;
    }
  }
  /**
   * Visit this method declaration.
   * @param v Visitor.
   */
  void accept(MethodVisitor v);
}
