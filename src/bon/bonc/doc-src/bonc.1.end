.SH USAGE
The tool parses and typechecks the input, and reports any errors. If
the tool does not output any messages, then no errors were found.

You can read from standard input by adding the option "-" (single-dash). This
can be given as a file, or an option. For example, the following three
commands will all produce the same result:
.PD 0
.P
.RS 4
bonc - file1 file2
.P
bonc file1 - file2
.P
bonc file1 file2 -
.P
.RE
.PD 1

.SH PRINTING

.SS CLASS DICTIONARY GENERATION 

It is possible to automatically generate a class dictionary for the given input. 
In order to print the generated textual BON to stdout(1), or to a file(2)
use the following:
.PD 0
.P
.RS 4
(1) bonc -p dic file1 [file2 ...]
.P
(2) bonc -p dic -po <output-file> file1 [file2 ...]
.P
.RE
.PD 1

Class dictionaries can also be computed on the fly and included when 
performing other printing operations. In fact, this is the default behaviour.
To prevent automatic class dictionary generation, provide the option
"-ngcd"/"--no-gen-class-dic". For example:
.PD 0
.P
.RS 4
bonc -ngcd -p <print-type> [-po <output-file>] file1 [file2 ...]
.P
.RE
.PD 1

.SS HTML PRINTING

This printing option generates a fancy XHTML version of the informal charts
included in the input. It will generate a single HTML page, with the charts
styled to emulate those given in the BON book. To generate the HTML to 
stdout(1), or to a file(2) use the following:
.PD 0
.P
.RS 4
(1) bonc -p html file1 [file2 ...]
.P
(2) bonc -p html -po <output-file> file1 [file2 ...]
.P
.RE
.PD 1

.SS GRAPH PRINTING

It is possible to create graphs representing the clustering and inheritance
relationships in the given BON source. For the chosen graph type, the output
will be in the DOT language (see http://www.graphviz.org/doc/info/lang.html).
  
The available graph printing options currently are:
.PD 0
.P
.RS 4
(1) icg - Informal cluster graph
.PD 0
.P
.RS 10
A graph showing the cluster hierarchy from the system cluster
down to the leaf cluters. This graph will also show which 
cluster(s) each class is contained in.
.P
.RE
.PD 1
.P
(2) iig - Informal inheritance graph
.PD 0
.P
.RS 10
A graph showing the class hierarchy for the given system.
.P
.RE
.PD 1

An example of printing one of these graphs (subsititute print-type for other 
graph types):
.PD 0
.P
.RS 4
bonc -i -p icg -po icg.dot file1 [file2 ...]
.P
.RE
.PD 1

There are numerous pieces of software available for viewing/working with .dot
files. Some of the most popular of these are available from Graphviz 
(http://www.graphviz.org/).

For those working on Ubuntu, simply install the "graphviz" package (should be
similarly available on other linux flavours. For an example of usage, assume
we have created a graph "graph.dot". We can use the graphviz to convert to 
svg:
.PD 0
.P
.RS 4
dot -Tsvg -o graph.svg graph.dot
.P
.RE
.PD 1

The above will create an svg file "graph.svg" that can be viewed/used as you 
wish. The dot command can also output to postscript, png, and several other 
types. See the graphviz documentation for more information (or "man dot").  

.SH BUG REPORTS
Bug tracking is handled on the Mobius Trac (https://mobius.ucd.ie/). 

To create a new ticket either complete the form at:
.PD 0
.P
.RS 4
https://mobius.ucd.ie/newticket?component=BON
.P
.RE
or send an email to:
.P
.RS 4
bon-ticket@mobius.ucd.ie
.RE
.PD 1


Please include the following details (where possible):
.RS 2
.PD 0
.IP \(bu 2
The command-line arguments with which you invoked the tool (e.g. "bonc -i test.bon").
.IP \(bu 2
The operating system and Java VM version you are using.
.IP \(bu 2 
Any input files used to recreate the bug.  
.IP \(bu 2 
The output generated when you detected the bug.
.PD 1
.RE
.LP
Filing bugs will help to improve this software, so if you notice something amiss please do report it!

.SH AUTHOR
Fintan Fairmichael <fintan dot fairmichael at ucd dot ie> 

