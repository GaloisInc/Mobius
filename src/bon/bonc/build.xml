<!-- 
###
# Copyright (c) 2007, Fintan Fairmichael, University College Dublin under the BSD licence.
# See LICENCE.TXT for details.
###
-->


<project name="BON" default="compile" basedir=".">
  <description>BON Build File</description>

  <property name="src" location="src"/>
  <property name="src-parser" value="${src}/ie/ucd/bon/parser"/>
  <property name="src-tests" value="${src}/ie/ucd/bon/tests"/>

  <property name="docs" location="docs"/>
  <property name="doc-src" location="doc-src"/>
  <property name="aux-src" location="aux-src"/>
  <property name="api-docs" value="${docs}/api"/>
  <property name="manual-docs" value="${docs}/manual"/>

  <property name="build" location="bin"/>
  <property name="dist"  location="dist"/>
  <property name="release"  location="release"/>
  <property name="lib"  location="lib"/>
  <property name="antlr-src" value="BON"/>
  <property name="antlr-pp-src" value="BONSTTreeWalker"/>
  <property name="antlr-tc-src" value="BONTCTreeWalker"/>
  <property name="antlr-tester-src" value="Tester"/>
  
  <property name="astgen-dir" location="astgen"/>
  <property name="astgen-target" location="src/ie/ucd/bon/ast"/>
  <property name="astgen-base" value="AstNode"/>
  <property name="astgen-pkg" value="ie.ucd.bon.ast"/>
  <property name="astgen-tpl-dir" location="astgen/tpl"/>

  <property name="unit-test-dir"  location="test/unittests"/>
  <property name="unit-test-file"  location="test/clops-tests"/>
  
  <property name="java-target-version" value="1.5"/>
  <property name="release-name" value="bonc"/>
  <property name="release-version" value="0.1.6"/>

  <property name="debian" value="debian"/>

  <!-- Paths -->
  <path id="base.path">
    <filelist dir="${lib}">
      <file name="stringtemplate.jar"/>
      <file name="CommandlineParser.jar"/>
      <file name="antlr-2.7.7.jar"/>
    	<file name="prefuse.jar"/>
    </filelist>
  </path>
	
  <path id="antlr.path">
  	<path refid="base.path"/>
    <filelist dir="${lib}" files="antlr-3.1.3.jar"/>
  </path>
	
	<path id="antlr-mod.path">
    <path refid="base.path"/>
    <filelist dir="${lib}" files="antlr-3.1.3-mod.jar antlr-3.1.3.jar"/>
  </path>
	
  <path id="test.path">
    <path refid="base.path"/>
    <filelist dir="${lib}" files="antlr-runtime-3.1.3.jar clops-runtime.jar"/>
    <pathelement location="${build}"/>
  </path>
  
  <path id="test-interface.path">
    <path refid="test.path"/>
    <filelist dir="${lib}" files="clops.jar junit-4.6.jar"/>
  </path>
	
	<path id="compile.path">
		<path refid="test.path"/>
  </path>
	
  <path id="dist.path">
    <fileset dir="${dist}/lib" includes="*.jar"/>
  </path>
	
  <target name="init">
    <echo message="Creating timestamp"/>
    <tstamp/>
    <mkdir dir="${build}"/>
  </target>

	
	<!-- Build targets -->

  <target name="compile" depends="all-src" description="compile the source">
    <javac srcdir="${src}" destdir="${build}" target="${java-target-version}">
      <classpath refid="compile.path"/>
    </javac>
  </target>

  <target name="javadocs" depends="all-src" description="Generate javadocs">
    <javadoc packagenames="*" sourcepath="src" defaultexcludes="yes" destdir="docs/api"
             author="true" version="true" use="true" windowtitle="BON API" classpathref="libs">
    </javadoc>
  </target>

  <target name="test-parser" depends="compile">
    <java fork="yes" dir="${build}" classname="ie.ucd.bon.tests.ParsingTester">
      <classpath refid="test.path"/>
    </java>
  </target>
	
  <target name="test-prettyprinter" depends="compile">
    <java fork="yes" dir="${build}" classname="ie.ucd.bon.tests.PrettyPrinterTester">
      <classpath refid="test.path"/>
    	<arg value="timing=true"/>
    </java>
  </target>
	
  <target name="test-dotgen" depends="compile">
    <java fork="yes" dir="${build}" classname="ie.ucd.bon.tests.DotGeneratorTester">
      <classpath refid="test.path"/>
  	<arg value="timing=true"/>
    </java>
  </target>

  <target name="test-commandline" depends="compile">
    <java fork="yes" dir="${build}" classname="ie.ucd.bon.tests.CommandlineTester">
      <classpath refid="test.path"/>
    </java>
  </target>

  <target name="test-dist" depends="dist">
    <java fork="yes" dir="." classname="ie.ucd.bon.tests.Tester">
      <classpath refid="dist.path"/>
      <arg value="test/test-cases/"/>
      <arg value="test/test-cases/tests"/>
    </java>
  </target>
	
  <target name="test-cases" depends="compile">
    <java fork="yes" dir="${build}" classname="ie.ucd.bon.tests.Tester">
      <classpath refid="test.path"/>
      <arg value="../test/test-cases/"/>
      <arg value="../test/test-cases/tests"/>
      <arg value="../test/test-cases/test-cases.log"/>
    </java>
  </target>


  <target name="dist" depends="compile" description="Generate the distribution">
    <mkdir dir="${dist}/lib"/>
  	
    <mkdir dir="${build}/templates"/>
    <copy todir="${build}/templates">
      <fileset dir="templates/" includes="*"/> 
    </copy>
  	
  	<echo message="${release-name}-${release-version}" file="${build}/version"/>
  	
  	<copy todir="${dist}">
  	  <fileset dir="" includes="bonc,bonc.bat,update,my-bonc.example"/>
  	</copy>
  	
    <jar jarfile="${dist}/lib/BON.jar" basedir="${build}"/>
  	
    <mkdir dir="${dist}/lib"/>
    <copy todir="${dist}/lib">
    	<fileset dir="${lib}/" includes="antlr-runtime-3.1.3.jar,antlr-2.7.7.jar,clops-runtime.jar,stringtemplate.jar,prefuse.jar"/>
    </copy>
  	
    <chmod perm="a+x">
    	<filelist dir="${dist}" files="bonc my-bonc.example update"/>
    </chmod>

    <echo message="${release-name}-${release-version}" file="${dist}/version"/>
  </target>

  <target name="clean-release">
    <delete>
      <fileset dir="${release}/" includes="${release-name}-${release-version}.*"/>
    </delete>
  </target>
	
  <target name="release" depends="dist,docs,debian-release" description="Generate a release">
  	<copy todir="${dist}">
  	  <fileset dir="" includes="bonc,bonc.bat,update,my-bonc.example"/> 
  	  <fileset dir="doc-src/" includes="README.txt,INSTALLATION.txt,FAQ.txt,LICENCE.txt,RELEASE_NOTES.txt"/>
  	  <fileset dir="${doc-src}/changelog/" includes="changelog"/>
  	</copy>
  	
    <exec executable="./release.sh" dir=".">
      <arg value="${release-name}-${release-version}"/>
    </exec>
  	<copy todir="${release}">
  		<fileset dir="${doc-src}" includes="README.txt,FAQ.txt,INSTALLATION.txt,LICENCE.txt,RELEASE_NOTES.txt"/>
  		<fileset dir="${doc-src}/changelog/" includes="changelog"/>
  		<fileset file="update"/>
  	</copy>
    <chmod perm="a+x" file="${release}/update"/>
    <echo message="${release-name}-${release-version}" file="${release}/version"/>
  </target>
	
	<target name="actual-release" depends="release" description="Do a final release.">
		<!-- Do a release, move changelogs to old changelogs, and clear latest-changes -->
	  <delete file="${doc-src}/changelog/old-changelog"/>
		<delete file="${doc-src}/changelog/old-changelog.Debian"/>
		<move file="${doc-src}/changelog/changelog" tofile="${doc-src}/changelog/old-changelog"/>
		<move file="${doc-src}/changelog/changelog.Debian" tofile="${doc-src}/changelog/old-changelog.Debian"/>
		<delete file="${doc-src}/changelog/latest-changes"/>
		<touch file="${doc-src}/changelog/latest-changes"/>
	</target>
	
	<!-- Antlr targets -->
		
  <target name="checkAntlrParserBuildUpToDate">
 	  <echo message="Checking if the ANTLR parser generated files are up to date"/>
  	<condition property="antlrParserBuild.required">
		  <not>
  		  <uptodate srcfile="${src}/${antlr-src}.g" targetfile="${src-parser}/${antlr-src}Lexer.java"/>
 		  </not>
  	</condition>
	</target>
	
	<target name="checkAntlrPrinterBuildUpToDate">
	 	<echo message="Checking if the ANTLR printer generated files are up to date"/>
		<condition property="antlrPrinterBuild.required">
			<or>
				<isset property="antlrParserBuild.required"/>
				<not>
					<uptodate srcfile="${src}/${antlr-pp-src}.g" targetfile="${src-parser}/${antlr-pp-src}.java"/>
				</not>
			</or>
		</condition>
  </target>
	
	<target name="checkAntlrTypeCheckerBuildUpToDate">
		<echo message="Checking if the ANTLR printer generated files are up to date"/>
		<condition property="antlrTypeCheckerBuild.required">
			<or>
				<isset property="antlrParserBuild.required"/>
				<not>
					<uptodate srcfile="${src}/${antlr-tc-src}.g" targetfile="${src-parser}/${antlr-tc-src}.java"/>
				</not>
			</or>
		</condition>
  </target>
	
	<target name="checkAntlrTesterBuildUpToDate">
		<echo message="Checking if the ANTLR printer generated files are up to date"/>
		<condition property="antlrTesterBuild.required">
			<not>
		    <uptodate srcfile="${src}/${antlr-tester-src}.g" targetfile="${src-tests}/${antlr-tester-src}Lexer.java"/>
			</not>
		</condition>
  </target>
	
	<!-- <target name="checkAntlrBuildUpToDate" depends="checkAntlrParserBuildUpToDate,checkAntlrPrinterBuildUpToDate,checkAntlrTypeCheckerBuildUpToDate,checkAntlrTesterBuildUpToDate"/> -->
	
	<target name="buildAntlrParser" depends="checkAntlrParserBuildUpToDate" if="antlrParserBuild.required">
		<antcall target="clean-antlr-parser"/>
		<echo message="Building Parser"/>
  	<java fork="yes" dir="${src}" classname="org.antlr.Tool">      
		  <classpath refid="antlr-mod.path" />
			<arg value="-o"/>
			<arg value="${src}/ie/ucd/bon/parser"/>
			<arg value="${antlr-src}.g"/>
	  </java>
	</target>

	<target name="buildAntlrPrinter" depends="buildAntlrParser,checkAntlrPrinterBuildUpToDate" if="antlrPrinterBuild.required">
		<antcall target="clean-antlr-printer"/>
		<echo message="Building Printer"/>
		<java fork="yes" dir="${src}" classname="org.antlr.Tool">      
	    <classpath refid="antlr.path" />
	    <arg value="-lib"/>
	    <arg value="${src-parser}"/>
	    <arg value="-o"/>
	    <arg value="${src}/ie/ucd/bon/parser"/>
	    <arg value="${antlr-pp-src}.g"/>
	  </java>
	</target>
	
	<target name="buildAntlrTypeChecker" depends="buildAntlrParser,checkAntlrTypeCheckerBuildUpToDate" if="antlrTypeCheckerBuild.required">
			<antcall target="clean-antlr-type-checker"/>
			<echo message="Building Type Checker"/>
			<java fork="yes" dir="${src}" classname="org.antlr.Tool">      
		    <classpath refid="antlr.path" />
		    <arg value="-lib"/>
		    <arg value="${src-parser}"/>
		    <arg value="-o"/>
		    <arg value="${src}/ie/ucd/bon/parser"/>
		    <arg value="${antlr-tc-src}.g"/>
		  </java>
	</target>
	
	<target name="buildAntlrTester" depends="checkAntlrTesterBuildUpToDate" if="antlrTesterBuild.required">
	  <antcall target="clean-antlr-tester"/>
	  <echo message="Building Tester"/>
		<java fork="yes" dir="${src}" classname="org.antlr.Tool">      
		  <classpath refid="antlr.path" />
			<arg value="-lib"/>
			<arg value="${src-parser}"/>
			<arg value="-o"/>
			<arg value="${src-tests}"/>
			<arg value="${antlr-tester-src}.g"/>
	  </java>
  </target>
		
	
	<target name="clean-antlr-type-checker" description="Clean up antlr printer generated files">
		<echo message="Deleting printer generated files"/>
		<delete file="${src-parser}/${antlr-tc-src}.java"/>
		<delete file="${src-parser}/${antlr-tc-src}.tokens"/>
	</target>	
	
	<target name="clean-antlr-printer" description="Clean up antlr printer generated files">
		<echo message="Deleting printer generated files"/>
		<delete file="${src-parser}/${antlr-pp-src}.java"/>
		<delete file="${src-parser}/${antlr-pp-src}.tokens"/>
	</target>	
		
	<target name="clean-antlr-parser" description="Clean up antlr parser generated files">
		<echo message="Deleting parser generated files"/>
		<delete file="${src-parser}/${antlr-src}.tokens"/>
		<delete file="${src-parser}/${antlr-src}__.g"/>
		<delete file="${src-parser}/${antlr-src}Parser.java"/>
		<delete file="${src-parser}/${antlr-src}Lexer.java"/>
	</target>
	
	<target name="clean-antlr-tester" description="Clean up antlr tester generated files">
			<echo message="Deleting parser generated files"/>
			<delete file="${src-tests}/${antlr-tester-src}.tokens"/>
			<delete file="${src-tests}/${antlr-tester-src}__.g"/>
			<delete file="${src-tests}/${antlr-tester-src}Parser.java"/>
			<delete file="${src-tests}/${antlr-tester-src}Lexer.java"/>
		</target>
	
	<target name="antlr">
		<parallel>
			<antcall target="buildAntlrParser"></antcall>
			<antcall target="buildAntlrTester"></antcall>
		</parallel>
		<parallel>
			<antcall target="buildAntlrPrinter"></antcall>
			<antcall target="buildAntlrTypeChecker"></antcall>
		</parallel>
	</target>
			
		
	<target name="clean-antlr" depends="clean-antlr-parser,clean-antlr-printer,clean-antlr-type-checker,clean-antlr-tester"/>
	
  <target name="clean-all" depends="clean-build,clean-antlr,clean-release,clean-debian-release" description="clean up"/>
	
	<target name="clean-build" description="Clean up the build">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
		<delete dir="${docs}"/>
	</target>
	
	<target name="docs" depends="manpage,changelogs" description="Generate all documentation">
		<delete file="${doc-src}/README.txt"/>
		<copy tofile="${doc-src}/README.txt" file="${doc-src}/README.txt.start"/>
		<java fork="yes" classname="ie.ucd.bon.Main" output="${doc-src}/README.txt" append="true">
		  <classpath refid="dist.path"/>
		  <arg value="--print-readme"/>
		</java>
		<concat destfile="${doc-src}/README.txt" append="true">
		  <fileset file="${doc-src}/README.txt.end"/>
		</concat>
	</target>
	
	<!-- High-level targets -->
  <target name="all-tests" depends="test-parser,test-prettyprinter,test-commandline,test-dist" description="Run all tests"/>
  
  <target name="all-src" depends="init,antlr" description="Create all source files"/>
  
  <target name="all" depends="clean,all-src,compile,dist,all-tests"/>
  <target name="clean" depends="clean-all"/>

	<target name="clean-changelogs">
	  <delete file="${doc-src}/changelog/changelog"/>
		<delete file="${doc-src}/changelog/changelog.Debian"/>	
	</target>
	
	<target name="changelogs" depends="clean-changelogs">
		<!-- Setup properties with the timestamps we want -->
		<tstamp>
			<format property="DEB_RLS_TIME" pattern="E, dd MMM yyyy HH:mm:ss Z"/>
			<format property="STD_RLS_TIME" pattern="yyyy-MM-dd HH:mm"/>
		</tstamp>
		
		<!-- ****** changelog.Debian ****** -->
		<!-- Add new entry -->
    <copy tofile="${doc-src}/changelog/changelog.Debian" file="${doc-src}/changelog/changelog.Debian-entryformat">
      <filterset begintoken="[[" endtoken="]]">
		    <filter token="version" value="${release-version}"/>
		    <filter token="name" value="${release-name}"/>
      	<filter token="distributions" value="unstable"/>
		    <filter token="urgency" value="low"/>
		  </filterset>
		</copy>
		<!-- Append changes for this entry -->
		<concat destfile="${doc-src}/changelog/changelog.Debian" append="true" fixlastline="true">
		  <fileset file="${doc-src}/changelog/latest-changes"/>
		</concat>
		<!-- Add developer info and date/time -->
		<concat destfile="${doc-src}/changelog/changelog.Debian" append="true" fixlastline="true">
		  <fileset file="${doc-src}/changelog/changelog.Debian-develtimeformat"/>
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
				  <param type="token" name="developer" value="Fintan Fairmichael"/>
					<param type="token" name="email" value="fintan.fairmichael@ucd.ie"/>
					<param type="token" name="date-time" value="${DEB_RLS_TIME}"/>
				</filterreader>
		  </filterchain>
		</concat>
		<!-- Append all previous entries -->
		<concat destfile="${doc-src}/changelog/changelog.Debian" append="true" fixlastline="true">
		  <fileset file="${doc-src}/changelog/old-changelog.Debian"/>
		</concat>		
		
		<!-- ****** changelog ****** -->
		<!-- Add entry -->
		<copy tofile="${doc-src}/changelog/changelog" file="${doc-src}/changelog/changelog-entryformat">
			<filterset begintoken="[[" endtoken="]]">
			  <filter token="version" value="${release-version}"/>
				<filter token="name" value="${release-name}"/>
				<filter token="date-time" value="${STD_RLS_TIME}"/>
			</filterset>
		</copy>
		<!-- Append changes for this entry -->
		<concat destfile="${doc-src}/changelog/changelog" append="true" fixlastline="true">
		  <fileset file="${doc-src}/changelog/latest-changes"/>
		</concat>	
		<!-- Two blank lines -->
		<echo file="${doc-src}/changelog/changelog" append="true" message="${line.separator}${line.separator}"/>
		<!-- Append all previous entries -->
		<concat destfile="${doc-src}/changelog/changelog" append="true" fixlastline="true">
		  <fileset file="${doc-src}/changelog/old-changelog"/>
		</concat>
		
	</target>
	
	<target name="manpage" depends="dist">
		<delete file="${doc-src}/bonc.1"/>
		<copy tofile="${doc-src}/bonc.1" file="${doc-src}/bonc.1.start"/>
	  <java fork="yes" classname="ie.ucd.bon.Main" output="${doc-src}/bonc.1" append="true">
	  	<classpath refid="dist.path"/>
	  	<arg value="--print-man"/>
		</java>
		<concat destfile="${doc-src}/bonc.1" append="true">
			<fileset file="${doc-src}/bonc.1.end"/>
		</concat>
	</target>

  <target name="clean-debian-release">
    <delete>
      <fileset dir="${debian}/src/usr/share/bonc" includes="bonc,bonc-debian"/>
      <fileset dir="${debian}/src/usr/share/bonc/lib" includes="*.jar"/>
      <fileset dir="${debian}/src/usr/share/doc/bonc" includes="changelog.*,copyright"/>
      <fileset dir="${debian}/src/usr/share/man/man1" includes="bonc.*"/>
    </delete>
  </target>
	
  <target name="debian-release" depends="dist,changelogs,manpage">
    <taskdef resource="org/vafer/jdeb/ant/antlib.xml"> 
      <classpath>
        <pathelement location="${lib}/jdeb-0.6-mod.jar"/>
      </classpath>
    </taskdef>

  	<java fork="yes" classname="ie.ucd.bon.Main" output="${debian}/src/etc/bash_completion.d/bonc_completion" append="false">
  	  <classpath refid="dist.path"/>
  	  <arg value="--print-bash-completion"/>
  	</java>
  	
    <copy todir="${debian}/src/usr/share/bonc"> 
      <fileset dir="." includes="bonc,bonc-debian"/>
    </copy>

    <copy todir="${debian}/src/usr/share/bonc/lib">
      <fileset dir="${dist}/lib/" includes="*.jar"/>
    </copy>
  	
    <gzip destfile="${debian}/src/usr/share/doc/bonc/changelog.Debian.gz" src="${doc-src}/changelog/changelog.Debian"/>
    <gzip destfile="${debian}/src/usr/share/doc/bonc/changelog.gz" src="${doc-src}/changelog/changelog"/>
    <gzip destfile="${debian}/src/usr/share/man/man1/bonc.1.gz" src="${doc-src}/bonc.1"/>
    <copy tofile="${debian}/src/usr/share/doc/bonc/copyright" file="${doc-src}/copyright.Debian"/>
  	
		<copy tofile="${debian}/src/usr/share/mime/packages/bon.xml" file="${aux-src}/bon.xml"/>
		<copy tofile="${debian}/src/usr/share/gtksourceview-2.0/language-specs/bon.lang" file="${aux-src}/bon.lang"/>
  	
    <chmod perm="a+x">
      <fileset dir="${debian}/src/usr/share/bonc" includes="bonc,bonc-debian"/>
    </chmod>

    <!-- Copy the control file, and fill in the release version. -->
    <delete file="${debian}/control/control"/>
    <copy todir="${debian}/control" file="${debian}/control-src/control">
      <filterset begintoken="[[" endtoken="]]">
        <filter token="version" value="${release-version}"/>
        <filter token="name" value="${release-name}"/>
      </filterset>
    </copy>

    <!-- Create release tar file -->
    <exec executable="./build-deb-release-tar.sh" dir="."/>

    <jdeb destfile="${release}/${release-name}_${release-version}_all.deb" control="${debian}/control" changesIn="${doc-src}/changelog/latest-changes" changesOut="${debian}/${release-name}.changes">
      <data src="${debian}/src/deb-release.tgz"/>
    </jdeb>
  	
    <copy todir="${release}" file="${debian}/${release-name}.changes"/>
  </target>

  <target name="astgen" depends="init" description="generates AST">
    <echo message="Running AST Gen"/>
    <java fork="yes" dir="${astgen-target}" jar="lib/astgen.jar">
      <arg value="-b"/>
      <arg value="${astgen-base}"/>
      <arg value="-Dpkg=${astgen-pkg}" />
      <arg value="${astgen-dir}/BON.ag" />
      <arg value="${astgen-tpl-dir}/abstract_classes.tpl" />
      <arg value="${astgen-tpl-dir}/normal_classes.tpl" />
    </java>
  </target>
  
	<!-- CLOPS -->
	<property name="clops-file" location="bonc.clo"/>
	<property name="clops-target" location="${src}/ie/ucd/bon/clinterface"/>
	<property name="clops-pkg" value="ie.ucd.bon.clinterface"/>
	<property name="clops-src" location="clops"/>
	<property name="clops-html-output" location="bonc.html"/>
	<path id="clops.path">
	  <filelist dir="${lib}" files="clops.jar"/>
		<file name="velocity-1.6.2.jar"/>
		<file name="velocity-1.6.2-dep.jar"/>
	</path>
	
	<target name="update-interface" depends="init" description="Clops generations">
	  <echo message="Using ${clops-file}"/>
	  <java fork="yes" jar="lib/clops.jar">
	    <assertions><enable/></assertions>
	    <classpath refid="clops.path"/>
	    <arg value="-v"/>
	    <arg value="-p"/>
	    <arg value="${clops-pkg}"/>
	    <arg value="-o"/>
	    <arg value="${clops-target}"/>
      <arg value="${clops-file}"/>
    </java>
  </target>
  
  <target name="test-interface" description="Unit test the command line interface">
    <delete dir="${unit-test-dir}"/>
    <mkdir dir="${unit-test-dir}"/>
    <java classname="ie.ucd.clops.test.Main" fork="true">
      <classpath>
        <pathelement path="${toString:test-interface.path}"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${unit-test-dir}"/>
      </classpath>
      <arg value="${unit-test-file}"/>
      <arg value="-o"/>
      <arg value="${unit-test-dir}"/>
    </java>
  </target>
  
</project>
