Complete informal checking - 
Check all things to do with inheritence (cycles, etc.)
Check all classes in a cluster - DONE
Check all clusters in another cluster or system - DONE
Check all other informal charts (dictionary etc) do the right thing
Add -informal switch - DONE
Use informal switch!


Check for cannot have self as superclass! (anywhere in chain) - Done for formal, do for informal and clusters?
Cluster hierarchy and containment tests (similar to inheritance - no self in ancestor, but also must have an immediate containment)

For correspondance between formal/informal, check containment of classes in clusters and clusters in clusters.

Differentiate (in static diagrams) between  class X and class X with parts to it. Similarly, for clusters?
(esp for warning for duplicate formal defs of class/cluster) (test7 dup_class)

Easy places to check valid class name etc (start with class_name in EBON.g)

Finish typechecking.

Predefined types - BOOL, VALUE, SET, LIST, etc

Effective class etc. Handle renaming!

Can't inherit from same class twice with different generics.

Move typechecking logic to "TypeChecker" and not in TypingInformation

Re-write bon.bat file to work like bon bash script?

Improve use of "stdin" psuedo filename

Improve recovery from parse errors!
  *** Cover every (...)+ with an alternative that produces a parse error. Seems to be required to prevent the death from StreamRewrite problems...
  *** Detect when there is a parse error, that we cannot insert or delete to recover from (do not typecheck! for now anyway, until we can do something a bit cleverer here)
  If RewriteEmptyStreamException, stop? Some way to carry on?
  Other Exceptions for Tree?
  Output - error: The type-check is incomplete due to a parse error. Is this always the case?

Features optional in class interface? *** (or recover properly from no features given...)

Finish giving all imaginary nodes real tokens so they have line numbers etc.

Escape sequences (see BONCASE...)

Revisit parse error severity. Not binary (severe/not severe), but varying degrees? Missing file should completely stop typechecking? 

Revisit inherits relation... (talk to Joe?)

In future - allow prefix/infix of items?

At some stage - warn when using multi-line text blocks (when shouldn't)

Fix " Missing at least one chart, diagram, or dictionary in file" error message, to say something more sensible when file just starts wrong

Long term - 1 pass parsing & typechecking? Pass records all tests that must be performed?

Disallow anything from the built-in types as class names, etc.

Clean up build script, remove unnecessary main methods...

Set target to 1.5 for builds of bon and commandlineparser - DONE
Change tarring/zipping in ant to preserve file permissions. - DONE
CommandLineParser - FileOption - with options for can exist/must exist - DONE
Consistency of class_chart versus class definition - DONE
Consistency of cluster_chart versus cluster definition - DONE
Finish tests. - DONE
commandlineparser - typechecking by default and -ntc switch - DONE
Supress "BR.recover..." output - DONE
Change BONProblem hierarchy, output error/warning summary - DONE
Re-visit error output messages - remove "Error:"/"Warning:" - DONE
Simplified Error messages - DONE
If a certain number of parse errors, do not continue with type-checking or printing, etc. - DONE
Severity - Label errors with a severity rating: 1 = real problem, 2=more minor (e.g. missing semi) - DONE
Joe's Input... - DONE
superclass from various inherits... + error + test - DONE
consistency of inheritence hierarchy for formal/informal - DONE
Some util method that checks debugness, and provide "logdebug" method instead of each bit of code having to check. - DONE
Check for valid informal class when looking at inherits clause of class_chart - DONE
URL for resources being loaded? Testing to run from jar? Worth it? - DONE
CommandLineParser - multiple names for an option (e.g. --help, -h, -help) - DONE
Lexer - Abstract lexer type, and integrate with problem framework - DONE
Informal: Check cluster is in system or some other cluster. Check each class is in a cluster. - DONE
Move packages to use bon instead of ebon. - DONE

Test cases to write:

Some MissingElementParseError tests
Test for class/cluster inconsistency (prescence)
Test for inheritence inconsistency
Tests that pass are supposed to...

Talk to Joe:

Naming of classes (globally unique?). Must be at informal level. 
Allow classes to be in multiple clusters?
Warnings of "invalid class type", say nothing if formal or informal present? (will still have no corresponding formal/informal if desired)
Revisit inherits relation... (what does it mean?) (multiplicity?)
Correspondance informal vs. formal
class X vs. class X with interface (can/should both appear in same BON system)
Differentiate (in static diagrams) between  class X and class X with parts to it. Similarly, for clusters?
Can we have more than one system? Is this wise/necessary?
Indexing of a source file? I think good idea.
Built-in types. Esp. VALUE - is this the only thing we will allow to be compared? Chars...? Other objects, leaving "equals method up to them"? If we allow other objects, then we must require that the objects are same type or one is supertype of other. Allow extending of built-ins? If so, must we allow them to be comparable etc?
Allow overloading? Currently no. Preferably not (due to ease of typechecking without), but a possibility.
Renaming - feat a { CLASS_A.x } - do we require that CLASS_A is the exact class that declares x?
Typechecking of renaming?

Built-ins:
  VALUE
  SET
  BOOL
  STRING
  CHAR
  Void

Towards release:
  In mobius SVN
  On Mobius Trac
  Commenting/cleaning
  Documenting how to use
  Some improvement to parsing error handling
  Clean up build script, remove unnecessary main methods...
  Licence file, licencing in all source...
  
CommandLineParser - MultiFileOption - like FileOption but with min file args, and max file args
CommandLineParser - Problems like in bon, allowing multiple problems to be highlighted (stores - text and arg). Instead of "print Error string", printing these errors. Carry on after single error. Choose output input with ^ to indicate position or not - desirable for some (invalid file etc.), but not for others (invalid arg "a" probably doesn't need pointed out?)
CommandLineParser - Wildcards in File paths. (See File.listFiles and FileFilter). Automatic in bash? How about windows?
CommandLineParser - Ignore duplicate files... Use set?
CommandLineParser - default usage string for non-boolean options.
CommandLineParser - File requirements as constraints and not just part of the option?
CommandLineParser - String options with prescribed choices (e.g. -p txt/pdf etc.)
CommandLineParser - Hidden options (not printed in help). Add one for running test-cases and graphing?
CommandLineParser - Reassess constructor vs. setters for setting various parts of options
CommandLineParser - Split help string so it fits in a 80char-wide terminal.
