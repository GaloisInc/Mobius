
BonSourceFile = List<SpecificationElement>! bonSpecification, Indexing indexing;
SpecificationElement :> InformalChart, ClassDictionary, StaticDiagram, DynamicDiagram, NotationalTuning;

Indexing = List<IndexClause>! indexes;
IndexClause = String! id, List<String>! indexTerms;

InformalChart :> ClusterChart, ClassChart, EventChart, ScenarioChart, CreationChart;

ClassDictionary = String! systemName, List<DictionaryEntry>! entries, Indexing indexing, String explanation, String part; 
DictionaryEntry = String! name, List<String>! clusters, String! description;

//SystemChart = String! name, List<ClusterEntry>! clusters, Indexing indexing, String explanation, String part;
ClusterChart = String! name, Boolean! isSystem, List<ClassEntry>! classes, List<ClusterEntry>! clusters, Indexing indexing, String explanation, String part;
ClassChart = ClassName! name, List<ClassName>! inherits, List<String>! queries, List<String>! commands, List<String>! constraints, Indexing indexing, String explanation, String part;

ClusterEntry = String! name, String! description;
ClassEntry = String! name, String! description;
 
EventChart = String! systemName, Boolean! incoming, Boolean! outgoing, List<EventEntry>! entries, Indexing indexing, String explanation, String part; 
EventEntry = String! description, List<String>! involved;

ScenarioChart = String! systemName, List<ScenarioEntry>! entries, Indexing indexing, String explanation, String part;
ScenarioEntry = String! name, String! description;

CreationChart = String! name, List<CreationEntry>! entries, Indexing indexing, String explanation, String part;
CreationEntry = ClassName! name, List<String>! types;

StaticDiagram = List<StaticComponent>! components, String extendedID, String comment;

StaticComponent :> Cluster, Clazz, StaticRelation;
Cluster = String! name, List<StaticComponent>! components, Boolean! reused, String comment; 
//Can root, deferred, effective be an enum? Similarly reused, persistent, interfaced?
Clazz = ClassName! name, List<FormalGeneric> generics,
        enum(Mod: ROOT, DEFERRED, EFFECTIVE, NONE) mod, ClassInterface classInterface,  
        Boolean! reused, Boolean! persistent, Boolean! interfaced, String comment;
StaticRelation :> InheritanceRelation, ClientRelation;

InheritanceRelation = StaticRef! child, StaticRef! parent, Multiplicity multiplicity, String semanticLabel;
ClientRelation = StaticRef! client, StaticRef! supplier, ClientEntityExpression clientEntities, TypeMark typeMark, String semanticLabel;
StaticRef = List<StaticRefPart>! prefix, StaticRefPart! name;
StaticRefPart = String! name;
ClientEntityExpression :> ClientEntityList, Multiplicity;
ClientEntityList = List<ClientEntity>! entities;
Multiplicity = Integer! multiplicity;
ClientEntity :> Infix, Prefix, SupplierIndirection, ParentIndirection;
SupplierIndirection = IndirectionFeaturePart indirectionFeaturePart, GenericIndirection! genericIndirection;
IndirectionFeaturePart :> FeatureName, IndirectionFeatureList;
IndirectionFeatureList = List<FeatureName>! featureNames;
FeatureName = String! name;
ParentIndirection = GenericIndirection! genericIndirection;
GenericIndirection = IndirectionElement! indirectionElement;
NamedIndirection = ClassName! className, List<IndirectionElement>! indirectionElements; 
IndirectionElement :> NamedIndirection, ClassName, CompactedIndirectionElement;
TypeMark = enum(Mark: NONE, HASTYPE, AGGREGATE, SHAREDMARK) mark, Integer multiplicity;
ClassName = String! name;
ClassInterface = List<Feature>! features, List<Type>! parents, List<Expression> invariant, Indexing indexing;  
Feature = List<FeatureSpecification>! featureSpecifications, List<ClassName> selectiveExport, String comment;
FeatureSpecification = enum(Modifier: NONE, DEFERRED, EFFECTIVE, REDEFINED) modifier, List<FeatureName>! featureNames, List<FeatureArgument>! arguments, ContractClause! contracts, HasType hasType, RenameClause renaming, String comment;
HasType = TypeMark! mark, Type! type;
ContractClause = List<Expression> preconditions, List<Expression> postconditions;


RenameClause = ClassName! className, FeatureName! featureName;

FeatureArgument = String identifier, Type! type;
FormalGeneric = String! identifier, Type type;

Type = String! identifier, List<Type>! actualGenerics;

Expression :> Quantification, BinaryExp, UnaryExp, CallExp, Constant;

CallExp = Expression qualifier, List<UnqualifiedCall>! callChain; 
UnqualifiedCall = String! id, List<Expression>! args;

Quantification = enum(Quantifier: FORALL, EXISTS) quantifier, List<VariableRange> variableRanges, Expression restriction, Expression! proposition;
VariableRange :> MemberRange, TypeRange;
MemberRange = List<String>! identifiers, Expression! expression;
TypeRange =  List<String>! identifiers, Type! type;

BinaryExp = enum(Op: ADD, SUB, MUL, DIV, INTDIV, MOD, POW, EQUIV, IMPLIES, AND, OR, XOR, LT, LE, GE, GT, EQ, NEQ, MEMBEROF, NOTMEMBEROF, HASTYPE) op, 
            Expression! left, Expression! right;

UnaryExp = enum(Op: NOT, DELTA, OLD, ADD, SUB) op, Expression! expression;

Constant :> ManifestConstant, KeywordConstant;
KeywordConstant = enum(Constant: CURRENT, VOID, RESULT) constant;
ManifestConstant :> BooleanConstant, IntegerConstant, RealConstant, CharacterConstant, StringConstant, SetConstant;

BooleanConstant = Boolean! value;
IntegerConstant = Integer! value;
RealConstant = Double! value;
CharacterConstant = Character! value;
StringConstant = String! value;
SetConstant = List<EnumerationElement> enumerations;
EnumerationElement :> Expression, Interval;
Interval :> IntegerInterval, CharacterInterval;
IntegerInterval = Integer! start, Integer! stop;
CharacterInterval = Character! start, Character! stop;


DynamicDiagram = List<DynamicComponent>! components, String extendedId, String comment;
DynamicComponent :> ScenarioDescription, ObjectGroup, ObjectStack, ObjectInstance, MessageRelation;
ScenarioDescription = String! name, List<LabelledAction>! actions, String comment;
LabelledAction = String! label, String! description;

ObjectGroup = enum(Nameless: NAMELESS, NOTNAMELESS) nameless, String! name, List<DynamicComponent>! components, String comment;
ObjectStack = ObjectName! name, String comment;
ObjectInstance = ObjectName! name, String comment;
ObjectName = ClassName! className, String extendedId;