<!-- 
###
# Copyright (c) 2007-2009, Fintan Fairmichael, University College Dublin under the BSD licence.
# See LICENCE.TXT for details.
###
-->

<project name="BON" default="compile" basedir=".">
  <description>BON Build File</description>

  <property file="bonc-ant.properties"/>

  <!-- Paths -->
  <path id="base.path">
    <filelist dir="${lib}">
      <file name="${lib-prefuse}"/>
      <file name="${lib-google-collect}"/>
    </filelist>
  </path>

  <path id="antlr.path">
    <path refid="base.path"/>
    <filelist dir="${lib}" files="${lib-antlr}"/>
  </path>
 
  <path id="antlr-mod.path">
    <path refid="base.path"/>
    <filelist dir="${lib}" files="${lib-antlr-mod} ${lib-antlr}"/>
  </path>
 
  <path id="test.path">
    <path refid="base.path"/>
    <filelist dir="${lib}" files="${lib-antlr-runtime} ${lib-clops-runtime} ${lib-freemarker}"/>
    <pathelement location="${build}"/>
  </path>
  
  <path id="test-interface.path">
    <path refid="test.path"/>
    <filelist dir="${lib}" files="${lib-clops} ${lib-junit}"/>
  </path>
 
  <path id="compile.path">
    <path refid="test.path"/>
  </path>
 
  <path id="dist.path">
    <fileset dir="${dist}/lib" includes="*.jar"/>
  </path>
 
  <taskdef resource="org/vafer/jdeb/ant/antlib.xml" classpath="${lib-jdeb}"/>
  <taskdef resource="org/apache/tools/ant/antlr/antlib.xml" classpath="${lib-antlr-task}"/>

  <target name="init">
    <echo message="Creating timestamp"/>
    <tstamp/>
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <javac srcdir="${src-java}" destdir="${build}" target="${java-target-version}" classpathref="compile.path"/>
  </target>

  <target name="javadocs" depends="init" description="Generate javadocs">
    <javadoc packagenames="*" sourcepath="${src-java}" defaultexcludes="yes" destdir="docs/api"
             author="true" version="true" use="true" windowtitle="BONc API" classpathref="compile.path"/>
  </target>

  <target name="test-dist" depends="dist">
    <java fork="yes" dir="." classname="ie.ucd.bon.tests.Tester" classpathref="dist.path">
      <arg value="test/"/>
      <arg value="test/tests"/>
      <arg value="test/test-cases.log"/>
    </java>
  </target>
 
  <target name="test-cases" depends="compile">
    <java fork="yes" dir="." classname="ie.ucd.bon.tests.Tester" classpathref="test.path">
      <arg value="test/"/>
      <arg value="test/tests"/>
      <arg value="test/test-cases.log"/>
    </java>
  </target>

  <target name="dist" depends="compile" description="Generate the distribution">
    <mkdir dir="${dist}/lib"/>
    <mkdir dir="${build}/templates"/>
    <copy todir="${build}/templates">
      <fileset dir="templates/" includes="* */* */*/* */*/*/*"/> 
    </copy>

    <echo message="${release-name}-${release-version}" file="${build}/version"/>

    <copy todir="${dist}">
      <fileset dir="${src-script}" includes="bonc,bonc.bat,bonc.js,update,my-bonc.example"/>
    </copy>

    <jar jarfile="${dist}/lib/BON.jar" basedir="${build}">
      <manifest>
        <attribute name="Main-Class" value="ie.ucd.bon.Main" />
        <attribute name="Class-Path" value="${lib-antlr-runtime} ${lib-prefuse} clops-0.2.2-runtime.jar ${lib-google-collect} ${lib-freemarker}"/>
      </manifest>
    </jar>
   
    <mkdir dir="${dist}/lib"/>
    <copy todir="${dist}/lib">
      <fileset dir="${lib}/" includes="${lib-antlr-runtime},${lib-clops-runtime},stringtemplate.jar,${lib-prefuse},${lib-google-collect},${lib-freemarker}"/>
    </copy>
   
    <chmod perm="a+x">
      <filelist dir="${dist}" files="bonc my-bonc.example update"/>
    </chmod>

    <echo message="${release-name}-${release-version}" file="${dist}/version"/>
  </target>

  <target name="clean-release">
    <delete>
      <fileset dir="${release}/" includes="${release-name}-${release-version}.*"/>
    </delete>
  </target>
 
  <target name="release" depends="dist,docs,debian-release" description="Generate a release">
    <copy todir="${dist}">
      <fileset dir="${src-doc}" includes="README.txt,INSTALLATION.txt,FAQ.txt,LICENCE.txt,RELEASE_NOTES.txt"/>
      <fileset dir="${src-doc}/changelog/" includes="changelog"/>
    </copy>
   
    <exec executable="${src-script}/release.sh" dir=".">
      <arg value="${release-name}-${release-version}"/>
    </exec>
    <copy todir="${release}">
      <fileset dir="${src-doc}" includes="README.txt,FAQ.txt,INSTALLATION.txt,LICENCE.txt,RELEASE_NOTES.txt"/>
      <fileset dir="${src-doc}/changelog/" includes="changelog"/>
      <fileset file="${src-script}/update"/>
    </copy>
    <chmod perm="a+x" file="${release}/update"/>
    <echo message="${release-name}-${release-version}" file="${release}/version"/>
  </target>
 
  <target name="actual-release" depends="release" description="Do a final release.">
    <!-- Do a release, move changelogs to old changelogs, and clear latest-changes -->
    <delete file="${src-doc}/changelog/old-changelog"/>
    <delete file="${src-doc}/changelog/old-changelog.Debian"/>
    <move file="${src-doc}/changelog/changelog" tofile="${src-doc}/changelog/old-changelog"/>
    <move file="${src-doc}/changelog/changelog.Debian" tofile="${src-doc}/changelog/old-changelog.Debian"/>
    <delete file="${src-doc}/changelog/latest-changes"/>
    <touch file="${src-doc}/changelog/latest-changes"/>
  </target>
 
  <!-- Antlr targets -->
  
  <target name="buildAntlrParser">
    <antlr3 target="${src}/${antlr-src}.g" outputdirectory="${src-parser}" multithreaded="${antlr-mulithreaded}">
      <classpath refid="antlr-mod.path"/>
    </antlr3>
  </target>
  
  <target name="buildAntlrTester">
    <antlr3 target="${src}/${antlr-tester-src}.g" outputdirectory="${src-tests}" libdirectory="${src-parser}" multithreaded="${antlr-mulithreaded}">
      <classpath refid="antlr.path"/>
    </antlr3>
  </target>
  
  <target name="antlr" depends="buildAntlrParser,buildAntlrTester"/>

  <target name="clean-build" description="Clean up the build">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${docs}"/>
  </target>
 
  <target name="docs" depends="manpage,changelogs" description="Generate all documentation">
    <delete file="${src-doc}/README.txt"/>
    <copy tofile="${src-doc}/README.txt" file="${src-doc}/README.txt.start"/>
    <java fork="yes" classname="ie.ucd.bon.Main" output="${src-doc}/README.txt" append="true" classpathref="dist.path">
      <arg value="--print-readme"/>
    </java>
    <concat destfile="${src-doc}/README.txt" append="true">
      <fileset file="${src-doc}/README.txt.end"/>
    </concat>
  </target>
 
  <!-- High-level targets -->
  <target name="all-tests" depends="test-cases,test-dist" description="Run all tests"/>
  
  <target name="all" depends="clean,init,compile,dist,all-tests"/>
  <target name="clean" depends="clean-build,clean-release,clean-debian-release"/>

  <target name="clean-changelogs">
    <delete file="${src-doc}/changelog/changelog"/>
    <delete file="${src-doc}/changelog/changelog.Debian"/> 
  </target>
 
  <target name="changelogs" depends="clean-changelogs">
    <!-- Setup properties with the timestamps we want -->
    <tstamp>
      <format property="DEB_RLS_TIME" pattern="E, dd MMM yyyy HH:mm:ss Z"/>
      <format property="STD_RLS_TIME" pattern="yyyy-MM-dd HH:mm"/>
    </tstamp>

    <!-- ****** changelog.Debian ****** -->
    <!-- Add new entry -->
    <copy tofile="${src-doc}/changelog/changelog.Debian" file="${src-doc}/changelog/changelog.Debian-entryformat">
      <filterset begintoken="[[" endtoken="]]">
        <filter token="version" value="${release-version}"/>
        <filter token="name" value="${release-name}"/>
        <filter token="distributions" value="unstable"/>
        <filter token="urgency" value="low"/>
      </filterset>
    </copy>
    <!-- Append changes for this entry -->
    <concat destfile="${src-doc}/changelog/changelog.Debian" append="true" fixlastline="true">
      <fileset file="${src-doc}/changelog/latest-changes"/>
    </concat>
    <!-- Add developer info and date/time -->
    <concat destfile="${src-doc}/changelog/changelog.Debian" append="true" fixlastline="true">
      <fileset file="${src-doc}/changelog/changelog.Debian-develtimeformat"/>
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
          <param type="token" name="developer" value="Fintan Fairmichael"/>
          <param type="token" name="email" value="fintan.fairmichael@ucd.ie"/>
          <param type="token" name="date-time" value="${DEB_RLS_TIME}"/>
        </filterreader>
      </filterchain>
    </concat>
    <!-- Append all previous entries -->
    <concat destfile="${src-doc}/changelog/changelog.Debian" append="true" fixlastline="true">
      <fileset file="${src-doc}/changelog/old-changelog.Debian"/>
    </concat>  
  
    <!-- ****** changelog ****** -->
    <!-- Add entry -->
    <copy tofile="${src-doc}/changelog/changelog" file="${src-doc}/changelog/changelog-entryformat">
      <filterset begintoken="[[" endtoken="]]">
        <filter token="version" value="${release-version}"/>
        <filter token="name" value="${release-name}"/>
        <filter token="date-time" value="${STD_RLS_TIME}"/>
      </filterset>
    </copy>
    <!-- Append changes for this entry -->
    <concat destfile="${src-doc}/changelog/changelog" append="true" fixlastline="true">
      <fileset file="${src-doc}/changelog/latest-changes"/>
    </concat> 
    <!-- Two blank lines -->
    <echo file="${src-doc}/changelog/changelog" append="true" message="${line.separator}${line.separator}"/>
    <!-- Append all previous entries -->
    <concat destfile="${src-doc}/changelog/changelog" append="true" fixlastline="true">
      <fileset file="${src-doc}/changelog/old-changelog"/>
    </concat>
  
  </target>
 
  <target name="manpage" depends="dist">
    <delete file="${src-doc}/bonc.1"/>
    <copy tofile="${src-doc}/bonc.1" file="${src-doc}/bonc.1.start"/>
    <java fork="yes" classname="ie.ucd.bon.Main" output="${src-doc}/bonc.1" append="true" classpathref="dist.path">
      <arg value="--print-man"/>
    </java>
    <concat destfile="${src-doc}/bonc.1" append="true">
      <fileset file="${src-doc}/bonc.1.end"/>
    </concat>
  </target>

  <target name="clean-debian-release">
    <delete>
      <fileset dir="${debian}/src/usr/share/bonc" includes="bonc,bonc-debian"/>
      <fileset dir="${debian}/src/usr/share/bonc/lib" includes="*.jar"/>
      <fileset dir="${debian}/src/usr/share/doc/bonc" includes="changelog.*,copyright"/>
      <fileset dir="${debian}/src/usr/share/man/man1" includes="bonc.*"/>
    </delete>
  </target>
 
  <target name="debian-release" depends="dist,changelogs,manpage">
    <java fork="yes" classname="ie.ucd.bon.Main" output="${debian}/src/etc/bash_completion.d/bonc_completion" append="false" classpathref="dist.path">
      <arg value="--print-bash-completion"/>
    </java>
   
    <copy todir="${debian}/src/usr/share/bonc"> 
      <fileset dir="${src-script}" includes="bonc,bonc-debian"/>
    </copy>

    <copy todir="${debian}/src/usr/share/bonc/lib">
      <fileset dir="${dist}/lib/" includes="*.jar"/>
    </copy>
   
    <gzip destfile="${debian}/src/usr/share/doc/bonc/changelog.Debian.gz" src="${src-doc}/changelog/changelog.Debian"/>
    <gzip destfile="${debian}/src/usr/share/doc/bonc/changelog.gz" src="${src-doc}/changelog/changelog"/>
    <gzip destfile="${debian}/src/usr/share/man/man1/bonc.1.gz" src="${src-doc}/bonc.1"/>
    <copy tofile="${debian}/src/usr/share/doc/bonc/copyright" file="${src-doc}/copyright.Debian"/>
    <copy tofile="${debian}/src/usr/share/mime/packages/bon.xml" file="${aux-src}/bon.xml"/>
    <copy tofile="${debian}/src/usr/share/gtksourceview-2.0/language-specs/bon.lang" file="${aux-src}/bon.lang"/>
   
    <chmod perm="a+x">
      <fileset dir="${debian}/src/usr/share/bonc" includes="bonc,bonc-debian"/>
    </chmod>

    <!-- Copy the control file, and fill in the release version. -->
    <delete file="${debian}/control/control"/>
    <copy todir="${debian}/control" file="${debian}/control-src/control">
      <filterset begintoken="[[" endtoken="]]">
        <filter token="version" value="${release-version}"/>
        <filter token="name" value="${release-name}"/>
      </filterset>
    </copy>

    <!-- Create release tar file -->
    <exec executable="${src-script}/build-deb-release-tar.sh" dir="."/>

    <jdeb destfile="${release}/${release-name}_${release-version}_all.deb" control="${debian}/control" changesIn="${src-doc}/changelog/latest-changes" changesOut="${debian}/${release-name}.changes">
      <data src="${debian}/src/deb-release.tgz"/>
    </jdeb>
   
    <copy todir="${release}" file="${debian}/${release-name}.changes"/>
  </target>

  <target name="astgen" depends="init" description="generates AST">
    <echo message="Running AST Gen"/>
    <java fork="yes" dir="${astgen-target}" jar="lib/astgen.jar">
      <arg value="-b"/>
      <arg value="${astgen-base}"/>
      <arg value="-Dpkg=${astgen-pkg}" />
      <arg value="${astgen-dir}/BON.ag" />
      <arg value="${astgen-tpl-dir}/abstract_classes.tpl" />
      <arg value="${astgen-tpl-dir}/normal_classes.tpl" />
      <arg value="${astgen-tpl-dir}/abstract_visitor.tpl" />
    </java>
  </target>
  
  <!-- CLOPS -->
  <target name="update-interface" depends="init" description="Clops generations">
    <echo message="Using ${clops-file}"/>
    <java fork="yes" jar="lib/clops-0.2.2.jar">
      <assertions><enable/></assertions>
      <arg value="-v"/>
      <arg value="-p"/>
      <arg value="${clops-pkg}"/>
      <arg value="-t"/>
      <arg value="${clops-target}"/>
      <arg value="-o"/>
      <arg value="${clops-target}"/>
      <arg value="${clops-file}"/>
    </java>
  </target>

  <target name="test-interface" description="Unit test the command line interface">
    <delete dir="${unit-test-dir}"/>
    <mkdir dir="${unit-test-dir}"/>
    <java classname="ie.ucd.clops.test.Main" fork="true">
      <classpath>
        <pathelement path="${toString:test-interface.path}"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${unit-test-dir}"/>
      </classpath>
      <arg value="${unit-test-file}"/>
      <arg value="-o"/>
      <arg value="${unit-test-dir}"/>
    </java>
  </target>

</project>