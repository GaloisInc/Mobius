/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package bonIDE.provider;

import bonIDE.util.BonIDEAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BonIDEItemProviderAdapterFactory extends BonIDEAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BonIDEItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.Cluster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusterItemProvider clusterItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.Cluster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusterAdapter() {
		if (clusterItemProvider == null) {
			clusterItemProvider = new ClusterItemProvider(this);
		}

		return clusterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.BONClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BONClassItemProvider bonClassItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.BONClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBONClassAdapter() {
		if (bonClassItemProvider == null) {
			bonClassItemProvider = new BONClassItemProvider(this);
		}

		return bonClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.IndexClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexClauseItemProvider indexClauseItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.IndexClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexClauseAdapter() {
		if (indexClauseItemProvider == null) {
			indexClauseItemProvider = new IndexClauseItemProvider(this);
		}

		return indexClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.InheritanceClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritanceClauseItemProvider inheritanceClauseItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.InheritanceClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritanceClauseAdapter() {
		if (inheritanceClauseItemProvider == null) {
			inheritanceClauseItemProvider = new InheritanceClauseItemProvider(this);
		}

		return inheritanceClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.FeatureArgument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureArgumentItemProvider featureArgumentItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.FeatureArgument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureArgumentAdapter() {
		if (featureArgumentItemProvider == null) {
			featureArgumentItemProvider = new FeatureArgumentItemProvider(this);
		}

		return featureArgumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.PreCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreConditionItemProvider preConditionItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.PreCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreConditionAdapter() {
		if (preConditionItemProvider == null) {
			preConditionItemProvider = new PreConditionItemProvider(this);
		}

		return preConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.PostCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostConditionItemProvider postConditionItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.PostCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPostConditionAdapter() {
		if (postConditionItemProvider == null) {
			postConditionItemProvider = new PostConditionItemProvider(this);
		}

		return postConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.Invariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvariantItemProvider invariantItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.Invariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvariantAdapter() {
		if (invariantItemProvider == null) {
			invariantItemProvider = new InvariantItemProvider(this);
		}

		return invariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.StaticRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticRelationshipItemProvider staticRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.StaticRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticRelationshipAdapter() {
		if (staticRelationshipItemProvider == null) {
			staticRelationshipItemProvider = new StaticRelationshipItemProvider(this);
		}

		return staticRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.InheritanceRel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritanceRelItemProvider inheritanceRelItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.InheritanceRel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritanceRelAdapter() {
		if (inheritanceRelItemProvider == null) {
			inheritanceRelItemProvider = new InheritanceRelItemProvider(this);
		}

		return inheritanceRelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.ClientSupplierRel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClientSupplierRelItemProvider clientSupplierRelItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.ClientSupplierRel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClientSupplierRelAdapter() {
		if (clientSupplierRelItemProvider == null) {
			clientSupplierRelItemProvider = new ClientSupplierRelItemProvider(this);
		}

		return clientSupplierRelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.AggregationRel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationRelItemProvider aggregationRelItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.AggregationRel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationRelAdapter() {
		if (aggregationRelItemProvider == null) {
			aggregationRelItemProvider = new AggregationRelItemProvider(this);
		}

		return aggregationRelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bonIDE.AssociationRel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationRelItemProvider associationRelItemProvider;

	/**
	 * This creates an adapter for a {@link bonIDE.AssociationRel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationRelAdapter() {
		if (associationRelItemProvider == null) {
			associationRelItemProvider = new AssociationRelItemProvider(this);
		}

		return associationRelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (clusterItemProvider != null) clusterItemProvider.dispose();
		if (bonClassItemProvider != null) bonClassItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (indexClauseItemProvider != null) indexClauseItemProvider.dispose();
		if (inheritanceClauseItemProvider != null) inheritanceClauseItemProvider.dispose();
		if (featureArgumentItemProvider != null) featureArgumentItemProvider.dispose();
		if (preConditionItemProvider != null) preConditionItemProvider.dispose();
		if (postConditionItemProvider != null) postConditionItemProvider.dispose();
		if (invariantItemProvider != null) invariantItemProvider.dispose();
		if (staticRelationshipItemProvider != null) staticRelationshipItemProvider.dispose();
		if (inheritanceRelItemProvider != null) inheritanceRelItemProvider.dispose();
		if (clientSupplierRelItemProvider != null) clientSupplierRelItemProvider.dispose();
		if (aggregationRelItemProvider != null) aggregationRelItemProvider.dispose();
		if (associationRelItemProvider != null) associationRelItemProvider.dispose();
	}

}
